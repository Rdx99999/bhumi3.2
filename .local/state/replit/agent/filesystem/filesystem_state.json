{"file_contents":{"README.md":{"content":"# Bhumi Consultancy Website\n\nA secure, full-stack consultancy website offering business consulting, training programs, and certificate verification functionality. The application features a React frontend with Express.js development server and Cloudflare Workers for production deployment.\n\n## Project Overview\n\nBhumi Consultancy website is built using modern, secure web technologies:\n\n- **Frontend**: React.js with TypeScript, Tailwind CSS, Shadcn/UI component library\n- **Backend**: Express.js (development) / Cloudflare Workers (production)\n- **Database**: PostgreSQL with Neon (development) / Cloudflare D1 SQLite (production)\n- **State Management**: TanStack Query for server state\n- **Authentication**: API key-based security system\n- **Deployment**: Dual environment strategy with security best practices\n\n## Features\n\n### 1. Services Showcase\n- Display consultancy services with descriptions and features\n- Highlight business consulting and audit preparation services\n\n### 2. Training Programs\n- List all training programs with categories, duration, and pricing\n- Filter training programs by category and duration\n- Detailed program descriptions and enrollment information\n\n### 3. Certificate Verification System\n- Verify certificate authenticity by certificate ID and participant name\n- Display certificate details including issue date and status\n- Certificate download functionality\n\n### 4. Participant Status Check\n- Check training status using participant ID or email\n- View enrolled programs, completion status, and certificates\n- Track training progress\n\n### 5. Admin Panel\n- Secure admin dashboard for managing all content\n- CRUD operations for services, training programs, participants, and certificates  \n- Contact form submission management\n- Real-time data updates and validation\n\n### 6. Contact Form & Notifications\n- Submit inquiries through a validated contact form\n- Instant Telegram notifications for new submissions\n- Store contact messages in the database with status tracking\n\n### 7. SEO Optimization\n- Dynamic sitemap generation based on current content\n- Proper meta tags and structured data for search engines\n- Optimized robots.txt file for search engine crawling\n\n### 8. Security Features\n- API key-based authentication system\n- Input validation and sanitization\n- SQL injection prevention with parameterized queries\n- XSS protection with proper data handling\n- Environment variable-based configuration\n\n## Project Structure\n\n```\n├── client/                  # Frontend React application\n│   ├── src/\n│   │   ├── components/      # UI components\n│   │   ├── hooks/           # Custom React hooks\n│   │   ├── lib/             # Utility functions and API clients\n│   │   ├── pages/           # Page components\n│   │   └── ...\n├── server/                  # Express server for development\n│   ├── index.ts             # Server entry point with ping service\n│   ├── routes.ts            # API routes and proxy configuration\n│   ├── storage.ts           # In-memory storage implementation\n│   ├── telegram-notifications.ts # Telegram bot integration\n│   └── vite.ts              # Vite configuration for the server\n├── shared/                  # Shared code between client and server\n│   ├── schema.ts            # Database schema and type definitions\n│   └── cloudflare-api.ts    # Cloudflare Worker API interface\n├── cloudflare-worker/       # Cloudflare Worker implementation\n│   ├── worker.js            # Worker code with D1 database\n│   ├── wrangler.toml        # Cloudflare Worker configuration\n│   ├── schema.sql           # D1 database schema\n│   └── sample-data.sql      # Sample data for the D1 database\n├── .env                     # Environment variables (required)\n└── replit.md               # Project documentation and preferences\n```\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+ installed\n- npm or yarn package manager\n- Cloudflare account (for production deployment)\n\n### Environment Setup\n1. Clone the repository and install dependencies:\n```bash\nnpm install\n```\n\n2. Create a `.env` file in the root directory with the following variables:\n```env\n# Cloudflare Worker Configuration\nCLOUDFLARE_WORKER_URL=https://your-worker.workers.dev\n\n# API Authentication Code (set your secure API key)\nAPI_CODE=your_secure_api_key_here\nVITE_API_CODE=your_secure_api_key_here\n\n# Domain Configuration\nDOMAIN=https://your-domain.com\nVITE_DOMAIN=https://your-domain.com\n\n# Server Configuration\nPORT=5000\n\n# Telegram Bot Configuration (optional)\nTELEGRAM_BOT_TOKEN=your_telegram_bot_token\nTELEGRAM_CHAT_ID=your_telegram_chat_id\n```\n\n### Development Environment\nTo start the development server:\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n### Admin Panel Access\nAccess the admin panel at `/admin` with your API key for:\n- Managing services and training programs\n- Viewing and managing participants\n- Certificate management\n- Contact form submissions\n\n## Deployment\n\n### Production Environment\nFor production deployment:\n1. Build the React frontend: `npm run build`\n2. Deploy the Cloudflare Worker using Wrangler CLI\n3. Set up a Cloudflare D1 database and apply the schema\n4. Configure environment variables in your hosting platform\n\n## Database Schema\n\nThe application uses the following database schema:\n\n1. **Users** - Administrative users\n2. **Services** - Consultancy services information\n3. **Training Programs** - Available training programs\n4. **Participants** - Enrolled participants information\n5. **Certificates** - Issued certificates\n6. **Contacts** - Contact form submissions\n\n## API Endpoints\n\nThe API provides secure endpoints with proper authentication:\n\n### Public Endpoints\n- GET `/api/services` - Get all services\n- GET `/api/training-programs` - Get all training programs\n- GET `/api/training-programs/:id` - Get a specific training program\n- POST `/api/verify-certificate` - Verify a certificate\n- POST `/api/check-status` - Check participant status\n- POST `/api/contact` - Submit a contact form\n- GET `/sitemap.xml` - Dynamic sitemap for SEO\n\n### Admin Endpoints (require X-API-Code header)\n- GET `/api/participants` - Get all participants\n- POST `/api/services/create` - Create new service\n- PUT `/api/services/:id` - Update service\n- DELETE `/api/services/:id` - Delete service\n- POST `/api/training-programs/create` - Create new training program\n- PUT `/api/training-programs/:id` - Update training program\n- DELETE `/api/training-programs/:id` - Delete training program\n- GET `/api/certificates` - Get all certificates\n- POST `/api/certificates/create` - Create new certificate\n- GET `/api/contacts` - Get all contact submissions\n\nFor detailed API documentation, refer to the [Cloudflare Worker README](./cloudflare-worker/README.md).\n\n## Security Features\n\n### Authentication\n- API key-based authentication using `X-API-Code` header\n- Environment variable-based configuration (no hardcoded credentials)\n- Secure admin panel access\n\n### Data Protection\n- Input validation with Zod schemas\n- SQL injection prevention with parameterized queries\n- XSS protection with proper data sanitization\n- HTTPS enforcement in production\n\n### Security Audit Status\n✅ **SECURITY VERIFIED** - Recent comprehensive security audit completed with no critical vulnerabilities found.\n\n## Certificate Verification\n\nTo test the certificate verification system, use the following sample data:\n- Certificate ID: \"BHM23051501\"\n- Participant Name: \"John Doe\"\n\n## Contributing\n\n1. Follow TypeScript best practices\n2. Use proper input validation\n3. Maintain security standards\n4. Update tests when adding features\n\n## License\n\nThis project is licensed under the MIT License.","size_bytes":7833},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Bhumi Consultancy Website\n\n## Overview\n\nA full-stack consultancy website for Bhumi Consultancy Services offering business consulting, training programs, and certificate verification functionality. The application features a React frontend with Express.js development server and Cloudflare Workers for production deployment. The website includes services showcase, training program management, certificate verification system, participant status tracking, and contact forms with SEO optimization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React.js with TypeScript for type safety\n- **Styling**: Tailwind CSS with Shadcn/UI component library for consistent design\n- **State Management**: TanStack Query for server state management and data fetching\n- **Routing**: Wouter for client-side routing with mobile-friendly navigation\n- **Forms**: React Hook Form with Zod validation for robust form handling\n- **Animation**: Framer Motion for smooth UI transitions and loading states\n- **SEO**: React Helmet for dynamic meta tags and structured data\n\n### Backend Architecture\n- **Development**: Express.js server with TypeScript\n- **Production**: Cloudflare Workers for serverless deployment\n- **Database**: PostgreSQL with Drizzle ORM for development, Cloudflare D1 (SQLite) for production\n- **API Design**: RESTful endpoints with standardized JSON responses\n- **Authentication**: API key-based authentication for admin operations\n- **Error Handling**: Centralized error handling with Zod validation\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL (development) / Cloudflare D1 SQLite (production)\n- **ORM**: Drizzle ORM with schema-first approach\n- **Connection**: Neon serverless for PostgreSQL development\n- **Storage Pattern**: In-memory storage fallback for development environments\n\n### Authentication and Authorization\n- **Admin Access**: API key-based authentication (X-API-Code header)\n- **Public Endpoints**: Open access for services, training programs, certificate verification\n- **Protected Operations**: CRUD operations require API key authentication\n- **Session Management**: Client-side storage for admin authentication state\n\n### Key Features Architecture\n- **Services Management**: CRUD operations for consultancy services with feature arrays\n- **Training Programs**: Category-based program management with enrollment tracking\n- **Certificate System**: Verification by certificate ID and participant name with download functionality\n- **Participant Tracking**: Status checking via participant ID or email\n- **Contact System**: Form submissions with validation and admin management\n- **SEO System**: Dynamic sitemap generation and structured data for search optimization\n\n## External Dependencies\n\n### Third-party Services\n- **Neon Database**: PostgreSQL serverless database for development\n- **Cloudflare Workers**: Serverless compute platform for production API\n- **Cloudflare D1**: SQLite database service for production data storage\n\n### APIs and Integrations\n- **Cloudflare Workers API**: Custom API endpoints for all backend operations\n- **Certificate Verification API**: Custom endpoints for certificate authentication\n- **Contact Form API**: Message submission and management endpoints\n\n### Development Tools\n- **Vite**: Build tool and development server with hot reload\n- **TypeScript**: Type checking and development experience\n- **Drizzle Kit**: Database migrations and schema management\n- **ESBuild**: Fast bundling for production builds\n\n### UI Libraries\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n- **Framer Motion**: Animation library for enhanced user experience\n\n### Deployment Architecture\n- **Frontend**: Static site deployment with Vite build output\n- **Backend**: Dual deployment strategy (Express.js dev / Cloudflare Workers prod)\n- **Database**: Environment-specific database connections\n- **CDN**: Asset delivery through build optimization and caching","size_bytes":4165},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":978},"cloudflare-worker/README.md":{"content":"# Bhumi Consultancy Cloudflare Worker\n\nThis directory contains the backend implementation for the Bhumi Consultancy website using Cloudflare Workers and D1 SQLite database.\n\n## Features\n\n- API endpoints for services, training programs, certificate verification, and more\n- Database integration with Cloudflare D1 SQLite\n- Authentication for protected operations\n- SQL schema for database initialization\n- Sample data for testing\n\n## API Documentation\n\n### Authentication\n\nCertain API endpoints (create, update, delete operations) require authentication. Authentication is implemented using an API code that must be included in the request headers:\n\n```\nX-API-Code: 7291826614\n```\n\nWithout this header, protected endpoints will return a 401 Unauthorized response.\n\n### Public Endpoints (No Authentication Required)\n\n#### GET /api/services\nGet a list of all services\n\n#### GET /api/training-programs\nGet a list of all training programs\n\n#### GET /api/training-programs/:id\nGet a specific training program by ID\n\n#### GET /api/certificate/:id/download\nDownload a certificate (or get certificate data)\n\n#### POST /api/verify-certificate\nVerify the authenticity of a certificate\n```json\n{\n  \"certificateId\": \"BHM23051501\",\n  \"participantName\": \"John Doe\"\n}\n```\n\n#### POST /api/check-status\nCheck a participant's status and enrolled programs\n```json\n{\n  \"participantId\": \"BHM2305P001\"\n}\n```\nor\n```json\n{\n  \"email\": \"john.doe@example.com\"\n}\n```\n\n#### POST /api/contact\nSubmit a contact form\n```json\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"subject\": \"Inquiry about training\",\n  \"message\": \"I would like to learn more about your training programs.\",\n  \"phone\": \"+1234567890\" // Optional\n}\n```\n\n### Protected Endpoints (Authentication Required)\n\n#### POST /api/services/create\nCreate a new service\n```json\n{\n  \"title\": \"New Service\",\n  \"description\": \"Description of the new service\",\n  \"icon\": \"icon-class\",\n  \"features\": [\"Feature 1\", \"Feature 2\", \"Feature 3\"]\n}\n```\n\n#### POST /api/training-programs/create\nCreate a new training program\n```json\n{\n  \"title\": \"New Training Program\",\n  \"description\": \"Description of the new training program\",\n  \"category\": \"Safety\",\n  \"duration\": \"2 days\",\n  \"price\": 499.99,\n  \"imagePath\": \"/images/training/new-program.jpg\" // Optional\n}\n```\n\n#### PUT/PATCH /api/services/:id\nUpdate an existing service (partial updates supported)\n```json\n{\n  \"title\": \"Updated Title\",\n  \"description\": \"Updated description\",\n  \"features\": [\"Updated feature 1\", \"Updated feature 2\"]\n}\n```\n\n#### PUT/PATCH /api/training-programs/:id\nUpdate an existing training program (partial updates supported)\n```json\n{\n  \"title\": \"Updated Training Program\",\n  \"price\": 599.99\n}\n```\n\n#### DELETE /api/services/:id\nDelete a service\n\n#### DELETE /api/training-programs/:id\nDelete a training program (will fail if participants are enrolled)\n\n## Database Schema\n\nThe database schema is defined in `schema.sql` and includes tables for:\n\n- Services\n- Training Programs\n- Participants\n- Certificates\n- Contacts\n\n## Sample Data\n\nSample data for testing is provided in `sample-data.sql`.\n\n## Authentication\n\nTo make authenticated requests to protected endpoints, include the API code in the request headers:\n\n```\nX-API-Code: 7291826614\n```\n\n## Testing\n\nA test script (`test-worker.js`) is provided to test the Worker endpoints.\n\n## Deployment\n\n1. Install Wrangler CLI: `npm install -g @cloudflare/wrangler`\n2. Configure `wrangler.toml` with your account ID and other settings\n3. Create the D1 database: `wrangler d1 create bhumi-consultancy`\n4. Update the database ID in `wrangler.toml`\n5. Deploy the schema: `wrangler d1 execute bhumi-consultancy --file=./schema.sql`\n6. Deploy the sample data: `wrangler d1 execute bhumi-consultancy --file=./sample-data.sql`\n7. Publish the worker: `wrangler publish`","size_bytes":3812},"cloudflare-worker/test-worker.js":{"content":"/**\n * Test script for Bhumi Consultancy Cloudflare Worker\n * \n * This script provides test cases for the various API endpoints.\n * You can run these tests using Miniflare (a local development environment for Cloudflare Workers).\n * \n * To run: npm install -g miniflare && miniflare --modules worker.js --d1 DB\n */\n\n// Test data\nconst testCertificateVerification = {\n  certificateId: 'BHM23051501',\n  participantName: 'John Doe'\n};\n\nconst testStatusCheck = {\n  participantId: 'BHM-P-2023001'\n};\n\nconst testStatusCheckEmail = {\n  email: 'john.doe@example.com'\n};\n\nconst testContactForm = {\n  name: 'Test User',\n  email: 'test.user@example.com',\n  phone: '+911234567890',\n  subject: 'Test Subject',\n  message: 'This is a test message.'\n};\n\n// Test data for authenticated endpoints\nconst API_CODE = '7291826614';\n\nconst testCreateService = {\n  title: 'New Test Service',\n  description: 'This is a test service created via API',\n  icon: 'icon-test',\n  features: ['Feature 1', 'Feature 2', 'Feature 3']\n};\n\nconst testCreateTrainingProgram = {\n  title: 'New Test Training Program',\n  description: 'This is a test training program created via API',\n  category: 'Test Category',\n  duration: '1 day',\n  price: 299.99\n};\n\nconst testUpdateService = {\n  title: 'Updated Test Service',\n  description: 'This service was updated via API'\n};\n\nconst testUpdateTrainingProgram = {\n  title: 'Updated Test Training Program',\n  price: 399.99\n};\n\n// Helper function to make API requests\nasync function makeRequest(url, method = 'GET', body = null, authenticate = false) {\n  const requestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  \n  // Add authentication header if required\n  if (authenticate) {\n    requestInit.headers['X-API-Code'] = API_CODE;\n  }\n  \n  if (body) {\n    requestInit.body = JSON.stringify(body);\n  }\n  \n  const request = new Request(url, requestInit);\n  const response = await worker.fetch(request, env);\n  \n  return await response.json();\n}\n\n// Tests\nasync function runTests() {\n  console.log('-------------- Running API Tests --------------');\n  \n  try {\n    // Test GET services\n    console.log('\\n1. Testing GET /api/services');\n    const servicesResponse = await makeRequest('http://localhost/api/services');\n    console.log('Response:', JSON.stringify(servicesResponse, null, 2));\n    \n    // Test GET training programs\n    console.log('\\n2. Testing GET /api/training-programs');\n    const trainingResponse = await makeRequest('http://localhost/api/training-programs');\n    console.log('Response:', JSON.stringify(trainingResponse, null, 2));\n    \n    // Test GET specific training program\n    console.log('\\n3. Testing GET /api/training-programs/1');\n    const programResponse = await makeRequest('http://localhost/api/training-programs/1');\n    console.log('Response:', JSON.stringify(programResponse, null, 2));\n    \n    // Test POST verify certificate\n    console.log('\\n4. Testing POST /api/verify-certificate');\n    const verifyResponse = await makeRequest(\n      'http://localhost/api/verify-certificate',\n      'POST',\n      testCertificateVerification\n    );\n    console.log('Response:', JSON.stringify(verifyResponse, null, 2));\n    \n    // Test POST check status by participant ID\n    console.log('\\n5. Testing POST /api/check-status (with participant ID)');\n    const statusResponse = await makeRequest(\n      'http://localhost/api/check-status',\n      'POST',\n      testStatusCheck\n    );\n    console.log('Response:', JSON.stringify(statusResponse, null, 2));\n    \n    // Test POST check status by email\n    console.log('\\n6. Testing POST /api/check-status (with email)');\n    const statusEmailResponse = await makeRequest(\n      'http://localhost/api/check-status',\n      'POST',\n      testStatusCheckEmail\n    );\n    console.log('Response:', JSON.stringify(statusEmailResponse, null, 2));\n    \n    // Test POST contact form\n    console.log('\\n7. Testing POST /api/contact');\n    const contactResponse = await makeRequest(\n      'http://localhost/api/contact',\n      'POST',\n      testContactForm\n    );\n    console.log('Response:', JSON.stringify(contactResponse, null, 2));\n    \n    // Test GET certificate download\n    console.log('\\n8. Testing GET /api/certificate/BHM23051501/download');\n    const certificateResponse = await makeRequest('http://localhost/api/certificate/BHM23051501/download');\n    console.log('Response:', JSON.stringify(certificateResponse, null, 2));\n    \n    // ---------------------- Authenticated Endpoint Tests ----------------------\n    \n    // Test POST create service without authentication (should fail)\n    console.log('\\n9. Testing POST /api/services/create without authentication (should fail)');\n    const createServiceNoAuthResponse = await makeRequest(\n      'http://localhost/api/services/create',\n      'POST',\n      testCreateService,\n      false\n    );\n    console.log('Response:', JSON.stringify(createServiceNoAuthResponse, null, 2));\n    \n    // Test POST create service with authentication\n    console.log('\\n10. Testing POST /api/services/create with authentication');\n    const createServiceResponse = await makeRequest(\n      'http://localhost/api/services/create',\n      'POST',\n      testCreateService,\n      true\n    );\n    console.log('Response:', JSON.stringify(createServiceResponse, null, 2));\n    \n    // Store the newly created service ID for later use in update and delete\n    let createdServiceId = null;\n    if (createServiceResponse.success && createServiceResponse.data && createServiceResponse.data.id) {\n      createdServiceId = createServiceResponse.data.id;\n    }\n    \n    // Test POST create training program with authentication\n    console.log('\\n11. Testing POST /api/training-programs/create with authentication');\n    const createTrainingResponse = await makeRequest(\n      'http://localhost/api/training-programs/create',\n      'POST',\n      testCreateTrainingProgram,\n      true\n    );\n    console.log('Response:', JSON.stringify(createTrainingResponse, null, 2));\n    \n    // Store the newly created training program ID for later use in update and delete\n    let createdTrainingId = null;\n    if (createTrainingResponse.success && createTrainingResponse.data && createTrainingResponse.data.id) {\n      createdTrainingId = createTrainingResponse.data.id;\n    }\n    \n    // Only run update and delete tests if we successfully created new records\n    if (createdServiceId) {\n      // Test PUT update service with authentication\n      console.log(`\\n12. Testing PUT /api/services/${createdServiceId} with authentication`);\n      const updateServiceResponse = await makeRequest(\n        `http://localhost/api/services/${createdServiceId}`,\n        'PUT',\n        testUpdateService,\n        true\n      );\n      console.log('Response:', JSON.stringify(updateServiceResponse, null, 2));\n      \n      // Test DELETE service with authentication\n      console.log(`\\n14. Testing DELETE /api/services/${createdServiceId} with authentication`);\n      const deleteServiceResponse = await makeRequest(\n        `http://localhost/api/services/${createdServiceId}`,\n        'DELETE',\n        null,\n        true\n      );\n      console.log('Response:', JSON.stringify(deleteServiceResponse, null, 2));\n    }\n    \n    if (createdTrainingId) {\n      // Test PATCH update training program with authentication\n      console.log(`\\n13. Testing PATCH /api/training-programs/${createdTrainingId} with authentication`);\n      const updateTrainingResponse = await makeRequest(\n        `http://localhost/api/training-programs/${createdTrainingId}`,\n        'PATCH',\n        testUpdateTrainingProgram,\n        true\n      );\n      console.log('Response:', JSON.stringify(updateTrainingResponse, null, 2));\n      \n      // Test DELETE training program with authentication\n      console.log(`\\n15. Testing DELETE /api/training-programs/${createdTrainingId} with authentication`);\n      const deleteTrainingResponse = await makeRequest(\n        `http://localhost/api/training-programs/${createdTrainingId}`,\n        'DELETE',\n        null,\n        true\n      );\n      console.log('Response:', JSON.stringify(deleteTrainingResponse, null, 2));\n    }\n    \n    console.log('\\n-------------- All Tests Completed --------------');\n  } catch (error) {\n    console.error('Error running tests:', error);\n  }\n}\n\n// Run tests\nrunTests();","size_bytes":8330},"cloudflare-worker/worker.js":{"content":"/**\n * Bhumi Consultancy - Cloudflare Worker\n * \n * This worker handles the API endpoints for the Bhumi Consultancy website,\n * interacting with Cloudflare D1 database for CRUD operations.\n */\n\n// D1 database binding name\n// In the real Cloudflare Worker environment, this binding will be configured in wrangler.toml\n// const DB = 'bhumi_consultancy_db';\n\n/**\n * Helper Functions\n */\n\n// JSON response helper\nfunction jsonResponse(data, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n\n// Error response helper\nfunction errorResponse(message, status = 400) {\n  return jsonResponse({ success: false, error: message }, status);\n}\n\n// Success response helper\nfunction successResponse(data) {\n  return jsonResponse({ success: true, data });\n}\n\n// Authentication helper - checks if API code is valid\nfunction authenticateApiRequest(request) {\n  const apiCode = request.headers.get('X-API-Code');\n  const requiredApiCode = '7291826614';\n\n  if (!apiCode || apiCode !== requiredApiCode) {\n    return false;\n  }\n\n  return true;\n}\n\n// Validate certificate verification request\nfunction validateCertificateVerification(data) {\n  if (!data || !data.certificateId || !data.participantName) {\n    return false;\n  }\n  return true;\n}\n\n// Validate participant status check request\nfunction validateStatusCheck(data) {\n  if (!data || (!data.participantId && !data.email)) {\n    return false;\n  }\n  return true;\n}\n\n// Validate contact form request\nfunction validateContactForm(data) {\n  if (!data || !data.name || !data.email || !data.subject || !data.message) {\n    return false;\n  }\n  return true;\n}\n\n// Validate participant data\nfunction validateParticipant(data) {\n  if (!data || !data.participantId || !data.fullName || !data.email || !data.trainingProgramId || !data.enrollmentDate) {\n    return false;\n  }\n  return true;\n}\n\n// Validate certificate data\nfunction validateCertificate(data) {\n  if (!data || !data.certificateId || !data.participantId || !data.trainingProgramId || !data.issueDate) {\n    return false;\n  }\n  return true;\n}\n\n// Generate SEO-friendly slug from title\nfunction generateSlug(title) {\n  if (!title) return '';\n  \n  return title\n    .toLowerCase()\n    .trim()\n    // Replace special characters and spaces with hyphens\n    .replace(/[^\\w\\s-]/g, '')\n    // Replace multiple spaces/hyphens with single hyphen\n    .replace(/[\\s_-]+/g, '-')\n    // Remove leading/trailing hyphens\n    .replace(/^-+|-+$/g, '');\n}\n\n/**\n * API Route Handlers\n */\n\n// GET /api/services - Get all services\nasync function handleGetServices(env) {\n  try {\n    const services = await env.DB.prepare(\n      'SELECT * FROM services'\n    ).all();\n\n    // Parse features JSON string into an array\n    const servicesWithParsedFeatures = services.results.map(service => ({\n      ...service,\n      features: JSON.parse(service.features)\n    }));\n\n    return successResponse(servicesWithParsedFeatures);\n  } catch (error) {\n    return errorResponse(`Failed to fetch services: ${error.message}`);\n  }\n}\n\n// GET /api/services/:id - Get a specific service\nasync function handleGetService(env, id) {\n  try {\n    const service = await env.DB.prepare(\n      'SELECT * FROM services WHERE id = ?'\n    ).bind(id).first();\n\n    if (!service) {\n      return errorResponse('Service not found', 404);\n    }\n\n    // Parse features JSON string into an array\n    service.features = JSON.parse(service.features);\n\n    return successResponse(service);\n  } catch (error) {\n    return errorResponse(`Failed to fetch service: ${error.message}`);\n  }\n}\n\n// GET /api/training-programs - Get all training programs\nasync function handleGetTrainingPrograms(env) {\n  try {\n    const programs = await env.DB.prepare(\n      'SELECT * FROM training_programs'\n    ).all();\n\n    return successResponse(programs.results);\n  } catch (error) {\n    return errorResponse(`Failed to fetch training programs: ${error.message}`);\n  }\n}\n\n// GET /api/training-programs/:identifier - Get a specific training program by ID or slug\nasync function handleGetTrainingProgram(env, identifier) {\n  try {\n    let program;\n    \n    // Check if identifier is a number (ID) or string (slug)\n    if (/^\\d+$/.test(identifier)) {\n      // It's a numeric ID\n      program = await env.DB.prepare(\n        'SELECT * FROM training_programs WHERE id = ?'\n      ).bind(parseInt(identifier)).first();\n    } else {\n      // It's a slug\n      program = await env.DB.prepare(\n        'SELECT * FROM training_programs WHERE slug = ?'\n      ).bind(identifier).first();\n    }\n\n    if (!program) {\n      return errorResponse('Training program not found', 404);\n    }\n\n    return successResponse(program);\n  } catch (error) {\n    return errorResponse(`Failed to fetch training program: ${error.message}`);\n  }\n}\n\n// POST /api/verify-certificate - Verify a certificate\nasync function handleVerifyCertificate(env, data) {\n  try {\n    if (!validateCertificateVerification(data)) {\n      return errorResponse('Invalid certificate verification request', 400);\n    }\n\n    // Query certificate, participant, and training program details\n    const query = `\n      SELECT \n        c.certificate_id, c.issue_date, c.expiry_date, c.certificate_path,\n        p.full_name, p.id as participant_id,\n        tp.title as training_name, tp.id as training_id\n      FROM certificates c\n      JOIN participants p ON c.participant_id = p.id\n      JOIN training_programs tp ON c.training_program_id = tp.id\n      WHERE c.certificate_id = ? AND p.full_name = ?\n    `;\n\n    const result = await env.DB.prepare(query)\n      .bind(data.certificateId, data.participantName)\n      .first();\n\n    if (!result) {\n      return errorResponse('Certificate not found or details do not match', 404);\n    }\n\n    // Determine certificate status\n    let status = 'active';\n    const now = new Date();\n    const expiryDate = result.expiry_date ? new Date(result.expiry_date) : null;\n\n    if (expiryDate && now > expiryDate) {\n      status = 'expired';\n    }\n\n    const verificationResult = {\n      certificate: {\n        certificateId: result.certificate_id,\n        issueDate: result.issue_date,\n        status: status,\n        certificatePath: result.certificate_path\n      },\n      participant: {\n        name: result.full_name,\n        id: result.participant_id\n      },\n      training: {\n        name: result.training_name,\n        id: result.training_id\n      }\n    };\n\n    return successResponse(verificationResult);\n  } catch (error) {\n    return errorResponse(`Failed to verify certificate: ${error.message}`);\n  }\n}\n\n// POST /api/check-status - Check participant status\nasync function handleCheckParticipantStatus(env, data) {\n  try {\n    if (!validateStatusCheck(data)) {\n      return errorResponse('Invalid status check request', 400);\n    }\n\n    // Find participant by ID or email\n    let participantQuery = '';\n    let queryParam = '';\n\n    if (data.participantId) {\n      participantQuery = 'SELECT * FROM participants WHERE participant_id = ?';\n      queryParam = data.participantId;\n    } else {\n      participantQuery = 'SELECT * FROM participants WHERE email = ?';\n      queryParam = data.email;\n    }\n\n    const participant = await env.DB.prepare(participantQuery)\n      .bind(queryParam)\n      .first();\n\n    if (!participant) {\n      return errorResponse('Participant not found', 404);\n    }\n\n    // Get all programs the participant is enrolled in\n    const enrolledProgramsQuery = `\n      SELECT \n        tp.id, tp.title, c.issue_date as completion_date, c.certificate_id\n      FROM training_programs tp\n      JOIN participants p ON p.training_program_id = tp.id\n      LEFT JOIN certificates c ON c.participant_id = p.id AND c.training_program_id = tp.id\n      WHERE p.id = ?\n    `;\n\n    const enrolledPrograms = await env.DB.prepare(enrolledProgramsQuery)\n      .bind(participant.id)\n      .all();\n\n    // Format the enrolled programs\n    const formattedPrograms = enrolledPrograms.results.map(program => ({\n      id: program.id,\n      name: program.title,\n      completionDate: program.completion_date || undefined,\n      certificateId: program.certificate_id || undefined\n    }));\n\n    const statusResult = {\n      participant: {\n        participantId: participant.participant_id,\n        name: participant.full_name,\n        status: participant.status\n      },\n      enrolledPrograms: formattedPrograms\n    };\n\n    return successResponse(statusResult);\n  } catch (error) {\n    return errorResponse(`Failed to check participant status: ${error.message}`);\n  }\n}\n\n// POST /api/contact - Submit contact form\nasync function handleContactForm(env, data) {\n  try {\n    if (!validateContactForm(data)) {\n      return errorResponse('Invalid contact form data', 400);\n    }\n\n    const now = new Date().toISOString();\n\n    const result = await env.DB.prepare(`\n      INSERT INTO contacts (full_name, email, phone, subject, message, created_at, status)\n      VALUES (?, ?, ?, ?, ?, ?, 'pending')\n    `).bind(\n      data.name,\n      data.email,\n      data.phone || null,\n      data.subject,\n      data.message,\n      now\n    ).run();\n\n    return successResponse({ id: result.lastRowId });\n  } catch (error) {\n    return errorResponse(`Failed to submit contact form: ${error.message}`);\n  }\n}\n\n// GET /api/certificate/:id/download - Download certificate\nasync function handleCertificateDownload(env, certificateId) {\n  try {\n    // First, check if the certificate exists\n    const certificate = await env.DB.prepare(\n      'SELECT c.*, p.full_name, tp.title as training_title FROM certificates c ' +\n      'JOIN participants p ON c.participant_id = p.id ' +\n      'JOIN training_programs tp ON c.training_program_id = tp.id ' +\n      'WHERE c.certificate_id = ?'\n    ).bind(certificateId).first();\n\n    if (!certificate) {\n      return errorResponse('Certificate not found', 404);\n    }\n\n    // In a real implementation, we would generate a PDF certificate here\n    // or retrieve the certificate file from R2 or another storage\n    // For this demo, we'll return a JSON response with the certificate data\n\n    // Use the certificate_path from database if available, otherwise fallback to a default URL\n    const downloadUrl = certificate.certificate_path \n      ? certificate.certificate_path \n      : `https://bhumi-consultancy.com/certificates/${certificate.certificate_id}.pdf`;\n\n    const certificateData = {\n      id: certificate.certificate_id,\n      participantName: certificate.full_name,\n      trainingProgram: certificate.training_title,\n      issueDate: certificate.issue_date,\n      expiryDate: certificate.expiry_date,\n      downloadUrl: downloadUrl,\n      url: downloadUrl // Include url for compatibility with current frontend\n    };\n\n    return successResponse(certificateData);\n  } catch (error) {\n    return errorResponse(`Failed to download certificate: ${error.message}`);\n  }\n}\n\n// POST /api/services/create - Create a new service\nasync function handleCreateService(env, data) {\n  try {\n    // Validate service data\n    if (!data || !data.title || !data.description || !data.icon || !data.features) {\n      return errorResponse('Invalid service data. Title, description, icon, and features are required.', 400);\n    }\n\n    // Convert features array to JSON string if it's an array\n    const featuresJson = Array.isArray(data.features) ? JSON.stringify(data.features) : data.features;\n\n    // Insert the new service\n    const result = await env.DB.prepare(`\n      INSERT INTO services (title, description, icon, features)\n      VALUES (?, ?, ?, ?)\n    `).bind(\n      data.title,\n      data.description,\n      data.icon,\n      featuresJson\n    ).run();\n\n    // Get the newly created service\n    const newService = await env.DB.prepare(\n      'SELECT * FROM services WHERE id = ?'\n    ).bind(result.lastRowId).first();\n\n    // Parse features JSON string into an array\n    newService.features = JSON.parse(newService.features);\n\n    return successResponse(newService);\n  } catch (error) {\n    return errorResponse(`Failed to create service: ${error.message}`);\n  }\n}\n\n// POST /api/training-programs/create - Create a new training program\nasync function handleCreateTrainingProgram(env, data) {\n  try {\n    // Validate training program data\n    if (!data || !data.title || !data.description || !data.category || !data.duration) {\n      return errorResponse('Invalid training program data. Title, description, category, and duration are required.', 400);\n    }\n\n    // Generate slug from title if not provided\n    let slug = data.slug || generateSlug(data.title);\n    \n    // Check if slug already exists and make it unique if necessary\n    let slugExists = await env.DB.prepare(\n      'SELECT COUNT(*) as count FROM training_programs WHERE slug = ?'\n    ).bind(slug).first();\n    \n    let counter = 1;\n    let originalSlug = slug;\n    while (slugExists.count > 0) {\n      slug = `${originalSlug}-${counter}`;\n      slugExists = await env.DB.prepare(\n        'SELECT COUNT(*) as count FROM training_programs WHERE slug = ?'\n      ).bind(slug).first();\n      counter++;\n    }\n\n    // Handle pricing - support both old and new pricing structure\n    let price, onlinePrice, offlinePrice, deliveryMode;\n    \n    if (data.online_price || data.offline_price) {\n      // New pricing structure\n      onlinePrice = data.online_price || 0;\n      offlinePrice = data.offline_price || 0;\n      deliveryMode = data.delivery_mode || 'both';\n      price = onlinePrice; // Set price to online_price for backward compatibility\n    } else if (data.price) {\n      // Legacy pricing structure\n      price = data.price;\n      onlinePrice = data.price;\n      offlinePrice = data.price;\n      deliveryMode = 'both';\n    } else {\n      return errorResponse('Either price or online_price/offline_price is required.', 400);\n    }\n\n    // Insert the new training program\n    const result = await env.DB.prepare(`\n      INSERT INTO training_programs (title, slug, description, category, duration, price, online_price, offline_price, delivery_mode, image_path)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.title,\n      slug,\n      data.description,\n      data.category,\n      data.duration,\n      price,\n      onlinePrice,\n      offlinePrice,\n      deliveryMode,\n      // Handle both naming conventions for image_path\n      (data.image_path !== undefined ? data.image_path : data.imagePath) || null\n    ).run();\n\n    // Get the newly created training program\n    const newProgram = await env.DB.prepare(\n      'SELECT * FROM training_programs WHERE id = ?'\n    ).bind(result.lastRowId).first();\n\n    return successResponse(newProgram);\n  } catch (error) {\n    return errorResponse(`Failed to create training program: ${error.message}`);\n  }\n}\n\n// DELETE /api/services/:id - Delete a service\nasync function handleDeleteService(env, id) {\n  try {\n    // Check if the service exists\n    const service = await env.DB.prepare(\n      'SELECT * FROM services WHERE id = ?'\n    ).bind(id).first();\n\n    if (!service) {\n      return errorResponse('Service not found', 404);\n    }\n\n    // Delete the service\n    await env.DB.prepare(\n      'DELETE FROM services WHERE id = ?'\n    ).bind(id).run();\n\n    return successResponse({ message: `Service with ID ${id} has been deleted successfully` });\n  } catch (error) {\n    return errorResponse(`Failed to delete service: ${error.message}`);\n  }\n}\n\n// DELETE /api/training-programs/:id - Delete a training program\nasync function handleDeleteTrainingProgram(env, id) {\n  try {\n    // Check if the training program exists\n    const program = await env.DB.prepare(\n      'SELECT * FROM training_programs WHERE id = ?'\n    ).bind(id).first();\n\n    if (!program) {\n      return errorResponse('Training program not found', 404);\n    }\n\n    // Check if there are any participants enrolled in this program\n    const enrolledParticipants = await env.DB.prepare(\n      'SELECT COUNT(*) as count FROM participants WHERE training_program_id = ?'\n    ).bind(id).first();\n\n    if (enrolledParticipants.count > 0) {\n      return errorResponse(`Cannot delete training program: ${enrolledParticipants.count} participants are enrolled in this program.`, 400);\n    }\n\n    // Delete the training program\n    await env.DB.prepare(\n      'DELETE FROM training_programs WHERE id = ?'\n    ).bind(id).run();\n\n    return successResponse({ message: `Training program with ID ${id} has been deleted successfully` });\n  } catch (error) {\n    return errorResponse(`Failed to delete training program: ${error.message}`);\n  }\n}\n\n// PUT/PATCH /api/services/:id - Update a service\nasync function handleUpdateService(env, id, data) {\n  try {\n    // Check if the service exists\n    const service = await env.DB.prepare(\n      'SELECT * FROM services WHERE id = ?'\n    ).bind(id).first();\n\n    if (!service) {\n      return errorResponse('Service not found', 404);\n    }\n\n    // Validate service data\n    if (!data || Object.keys(data).length === 0) {\n      return errorResponse('No update data provided', 400);\n    }\n\n    // Convert features array to JSON string if it's provided and it's an array\n    const featuresJson = data.features \n      ? (Array.isArray(data.features) ? JSON.stringify(data.features) : data.features)\n      : undefined;\n\n    // Build the update SQL dynamically based on what fields are provided\n    let updateFields = [];\n    let values = [];\n\n    if (data.title !== undefined) {\n      updateFields.push('title = ?');\n      values.push(data.title);\n    }\n\n    if (data.description !== undefined) {\n      updateFields.push('description = ?');\n      values.push(data.description);\n    }\n\n    if (data.icon !== undefined) {\n      updateFields.push('icon = ?');\n      values.push(data.icon);\n    }\n\n    if (featuresJson !== undefined) {\n      updateFields.push('features = ?');\n      values.push(featuresJson);\n    }\n\n    if (updateFields.length === 0) {\n      return errorResponse('No valid fields to update', 400);\n    }\n\n    // Add the ID as the last parameter\n    values.push(id);\n\n    // Execute the update\n    await env.DB.prepare(\n      `UPDATE services SET ${updateFields.join(', ')} WHERE id = ?`\n    ).bind(...values).run();\n\n    // Get the updated service\n    const updatedService = await env.DB.prepare(\n      'SELECT * FROM services WHERE id = ?'\n    ).bind(id).first();\n\n    // Parse features JSON string into an array\n    updatedService.features = JSON.parse(updatedService.features);\n\n    return successResponse(updatedService);\n  } catch (error) {\n    return errorResponse(`Failed to update service: ${error.message}`);\n  }\n}\n\n// GET /api/participants - Get all participants\nasync function handleGetParticipants(env) {\n  try {\n    const participants = await env.DB.prepare(\n      'SELECT p.*, tp.title as training_program_name FROM participants p LEFT JOIN training_programs tp ON p.training_program_id = tp.id'\n    ).all();\n\n    return successResponse(participants.results);\n  } catch (error) {\n    return errorResponse(`Failed to fetch participants: ${error.message}`);\n  }\n}\n\n// GET /api/participants/:id - Get a specific participant\nasync function handleGetParticipant(env, id) {\n  try {\n    const participant = await env.DB.prepare(\n      'SELECT p.*, tp.title as training_program_name FROM participants p LEFT JOIN training_programs tp ON p.training_program_id = tp.id WHERE p.id = ?'\n    ).bind(id).first();\n\n    if (!participant) {\n      return errorResponse('Participant not found', 404);\n    }\n\n    return successResponse(participant);\n  } catch (error) {\n    return errorResponse(`Failed to fetch participant: ${error.message}`);\n  }\n}\n\n// POST /api/participants/create - Create a new participant\nasync function handleCreateParticipant(env, data) {\n  try {\n    if (!validateParticipant(data)) {\n      return errorResponse('Invalid participant data. Required fields are missing.', 400);\n    }\n\n    // Check if training program exists\n    const trainingProgram = await env.DB.prepare(\n      'SELECT * FROM training_programs WHERE id = ?'\n    ).bind(data.trainingProgramId).first();\n\n    if (!trainingProgram) {\n      return errorResponse('Training program not found', 404);\n    }\n\n    // Check if participant ID is unique\n    const existingParticipant = await env.DB.prepare(\n      'SELECT * FROM participants WHERE participant_id = ?'\n    ).bind(data.participantId).first();\n\n    if (existingParticipant) {\n      return errorResponse('Participant ID already exists', 400);\n    }\n\n    // Insert the new participant\n    const result = await env.DB.prepare(`\n      INSERT INTO participants (participant_id, full_name, email, phone, training_program_id, enrollment_date, status)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.participantId,\n      data.fullName,\n      data.email,\n      data.phone || null,\n      data.trainingProgramId,\n      data.enrollmentDate,\n      data.status || 'active'\n    ).run();\n\n    // Get the newly created participant\n    const newParticipant = await env.DB.prepare(\n      'SELECT p.*, tp.title as training_program_name FROM participants p LEFT JOIN training_programs tp ON p.training_program_id = tp.id WHERE p.id = ?'\n    ).bind(result.lastRowId).first();\n\n    return successResponse(newParticipant);\n  } catch (error) {\n    return errorResponse(`Failed to create participant: ${error.message}`);\n  }\n}\n\n// PUT/PATCH /api/participants/:id - Update a participant\nasync function handleUpdateParticipant(env, id, data) {\n  try {\n    // Check if the participant exists\n    const participant = await env.DB.prepare(\n      'SELECT * FROM participants WHERE id = ?'\n    ).bind(id).first();\n\n    if (!participant) {\n      return errorResponse('Participant not found', 404);\n    }\n\n    // Validate participant data\n    if (!data || Object.keys(data).length === 0) {\n      return errorResponse('No update data provided', 400);\n    }\n\n    // If training program ID is provided, check if it exists\n    if (data.trainingProgramId) {\n      const trainingProgram = await env.DB.prepare(\n        'SELECT * FROM training_programs WHERE id = ?'\n      ).bind(data.trainingProgramId).first();\n\n      if (!trainingProgram) {\n        return errorResponse('Training program not found', 404);\n      }\n    }\n\n    // If participant ID is provided, check if it's unique\n    if (data.participantId && data.participantId !== participant.participant_id) {\n      const existingParticipant = await env.DB.prepare(\n        'SELECT * FROM participants WHERE participant_id = ?'\n      ).bind(data.participantId).first();\n\n      if (existingParticipant) {\n        return errorResponse('Participant ID already exists', 400);\n      }\n    }\n\n    // Build the update SQL dynamically based on what fields are provided\n    let updateFields = [];\n    let values = [];\n\n    if (data.participantId !== undefined) {\n      updateFields.push('participant_id = ?');\n      values.push(data.participantId);\n    }\n\n    if (data.fullName !== undefined) {\n      updateFields.push('full_name = ?');\n      values.push(data.fullName);\n    }\n\n    if (data.email !== undefined) {\n      updateFields.push('email = ?');\n      values.push(data.email);\n    }\n\n    if (data.phone !== undefined) {\n      updateFields.push('phone = ?');\n      values.push(data.phone);\n    }\n\n    if (data.trainingProgramId !== undefined) {\n      updateFields.push('training_program_id = ?');\n      values.push(data.trainingProgramId);\n    }\n\n    if (data.enrollmentDate !== undefined) {\n      updateFields.push('enrollment_date = ?');\n      values.push(data.enrollmentDate);\n    }\n\n    if (data.status !== undefined) {\n      updateFields.push('status = ?');\n      values.push(data.status);\n    }\n\n    if (updateFields.length === 0) {\n      return errorResponse('No valid fields to update', 400);\n    }\n\n    // Add the ID as the last parameter\n    values.push(id);\n\n    // Execute the update\n    await env.DB.prepare(\n      `UPDATE participants SET ${updateFields.join(', ')} WHERE id = ?`\n    ).bind(...values).run();\n\n    // Get the updated participant\n    const updatedParticipant = await env.DB.prepare(\n      'SELECT p.*, tp.title as training_program_name FROM participants p LEFT JOIN training_programs tp ON p.training_program_id = tp.id WHERE p.id = ?'\n    ).bind(id).first();\n\n    return successResponse(updatedParticipant);\n  } catch (error) {\n    return errorResponse(`Failed to update participant: ${error.message}`);\n  }\n}\n\n// DELETE /api/participants/:id - Delete a participant\nasync function handleDeleteParticipant(env, id) {\n  try {\n    // Check if the participant exists\n    const participant = await env.DB.prepare(\n      'SELECT * FROM participants WHERE id = ?'\n    ).bind(id).first();\n\n    if (!participant) {\n      return errorResponse('Participant not found', 404);\n    }\n\n    // Check if there are any certificates for this participant\n    const certificates = await env.DB.prepare(\n      'SELECT COUNT(*) as count FROM certificates WHERE participant_id = ?'\n    ).bind(id).first();\n\n    if (certificates.count > 0) {\n      return errorResponse(`Cannot delete participant: ${certificates.count} certificates are associated with this participant.`, 400);\n    }\n\n    // Delete the participant\n    await env.DB.prepare(\n      'DELETE FROM participants WHERE id = ?'\n    ).bind(id).run();\n\n    return successResponse({ message: `Participant with ID ${id} has been deleted successfully` });\n  } catch (error) {\n    return errorResponse(`Failed to delete participant: ${error.message}`);\n  }\n}\n\n// GET /api/certificates - Get all certificates\nasync function handleGetCertificates(env) {\n  try {\n    const certificates = await env.DB.prepare(`\n      SELECT c.*, \n        p.full_name as participant_name, \n        tp.title as training_program_name \n      FROM certificates c \n      JOIN participants p ON c.participant_id = p.id \n      JOIN training_programs tp ON c.training_program_id = tp.id\n    `).all();\n\n    return successResponse(certificates.results);\n  } catch (error) {\n    return errorResponse(`Failed to fetch certificates: ${error.message}`);\n  }\n}\n\n// GET /api/certificates/:id - Get a specific certificate\nasync function handleGetCertificate(env, id) {\n  try {\n    const certificate = await env.DB.prepare(`\n      SELECT c.*, \n        p.full_name as participant_name, \n        tp.title as training_program_name \n      FROM certificates c \n      JOIN participants p ON c.participant_id = p.id \n      JOIN training_programs tp ON c.training_program_id = tp.id\n      WHERE c.id = ?\n    `).bind(id).first();\n\n    if (!certificate) {\n      return errorResponse('Certificate not found', 404);\n    }\n\n    return successResponse(certificate);\n  } catch (error) {\n    return errorResponse(`Failed to fetch certificate: ${error.message}`);\n  }\n}\n\n// POST /api/certificates/create - Create a new certificate\nasync function handleCreateCertificate(env, data) {\n  try {\n    if (!validateCertificate(data)) {\n      return errorResponse('Invalid certificate data. Required fields are missing.', 400);\n    }\n\n    // Check if participant exists\n    const participant = await env.DB.prepare(\n      'SELECT * FROM participants WHERE id = ?'\n    ).bind(data.participantId).first();\n\n    if (!participant) {\n      return errorResponse('Participant not found', 404);\n    }\n\n    // Check if training program exists\n    const trainingProgram = await env.DB.prepare(\n      'SELECT * FROM training_programs WHERE id = ?'\n    ).bind(data.trainingProgramId).first();\n\n    if (!trainingProgram) {\n      return errorResponse('Training program not found', 404);\n    }\n\n    // Check if certificate ID is unique\n    const existingCertificate = await env.DB.prepare(\n      'SELECT * FROM certificates WHERE certificate_id = ?'\n    ).bind(data.certificateId).first();\n\n    if (existingCertificate) {\n      return errorResponse('Certificate ID already exists', 400);\n    }\n\n    // Insert the new certificate\n    const result = await env.DB.prepare(`\n      INSERT INTO certificates (certificate_id, participant_id, training_program_id, issue_date, expiry_date, certificate_path)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.certificateId,\n      data.participantId,\n      data.trainingProgramId,\n      data.issueDate,\n      data.expiryDate || null,\n      data.certificatePath || null\n    ).run();\n\n    // Get the newly created certificate\n    const newCertificate = await env.DB.prepare(`\n      SELECT c.*, \n        p.full_name as participant_name, \n        tp.title as training_program_name \n      FROM certificates c \n      JOIN participants p ON c.participant_id = p.id \n      JOIN training_programs tp ON c.training_program_id = tp.id\n      WHERE c.id = ?\n    `).bind(result.lastRowId).first();\n\n    return successResponse(newCertificate);\n  } catch (error) {\n    return errorResponse(`Failed to create certificate: ${error.message}`);\n  }\n}\n\n// PUT/PATCH /api/certificates/:id - Update a certificate\nasync function handleUpdateCertificate(env, id, data) {\n  try {\n    // Check if the certificate exists\n    const certificate = await env.DB.prepare(\n      'SELECT * FROM certificates WHERE id = ?'\n    ).bind(id).first();\n\n    if (!certificate) {\n      return errorResponse('Certificate not found', 404);\n    }\n\n    // Validate certificate data\n    if (!data || Object.keys(data).length === 0) {\n      return errorResponse('No update data provided', 400);\n    }\n\n    // If participant ID is provided, check if it exists\n    if (data.participantId) {\n      const participant = await env.DB.prepare(\n        'SELECT * FROM participants WHERE id = ?'\n      ).bind(data.participantId).first();\n\n      if (!participant) {\n        return errorResponse('Participant not found', 404);\n      }\n    }\n\n    // If training program ID is provided, check if it exists\n    if (data.trainingProgramId) {\n      const trainingProgram = await env.DB.prepare(\n        'SELECT * FROM training_programs WHERE id = ?'\n      ).bind(data.trainingProgramId).first();\n\n      if (!trainingProgram) {\n        return errorResponse('Training program not found', 404);\n      }\n    }\n\n    // If certificate ID is provided, check if it's unique\n    if (data.certificateId && data.certificateId !== certificate.certificate_id) {\n      const existingCertificate = await env.DB.prepare(\n        'SELECT * FROM certificates WHERE certificate_id = ?'\n      ).bind(data.certificateId).first();\n\n      if (existingCertificate) {\n        return errorResponse('Certificate ID already exists', 400);\n      }\n    }\n\n    // Build the update SQL dynamically based on what fields are provided\n    let updateFields = [];\n    let values = [];\n\n    if (data.certificateId !== undefined) {\n      updateFields.push('certificate_id = ?');\n      values.push(data.certificateId);\n    }\n\n    if (data.participantId !== undefined) {\n      updateFields.push('participant_id = ?');\n      values.push(data.participantId);\n    }\n\n    if (data.trainingProgramId !== undefined) {\n      updateFields.push('training_program_id = ?');\n      values.push(data.trainingProgramId);\n    }\n\n    if (data.issueDate !== undefined) {\n      updateFields.push('issue_date = ?');\n      values.push(data.issueDate);\n    }\n\n    if (data.expiryDate !== undefined) {\n      updateFields.push('expiry_date = ?');\n      values.push(data.expiryDate);\n    }\n\n    if (data.certificatePath !== undefined) {\n      updateFields.push('certificate_path = ?');\n      values.push(data.certificatePath);\n    }\n\n    if (updateFields.length === 0) {\n      return errorResponse('No valid fields to update', 400);\n    }\n\n    // Add the ID as the last parameter\n    values.push(id);\n\n    // Execute the update\n    await env.DB.prepare(\n      `UPDATE certificates SET ${updateFields.join(', ')} WHERE id = ?`\n    ).bind(...values).run();\n\n    // Get the updated certificate\n    const updatedCertificate = await env.DB.prepare(`\n      SELECT c.*, \n        p.full_name as participant_name, \n        tp.title as training_program_name \n      FROM certificates c \n      JOIN participants p ON c.participant_id = p.id \n      JOIN training_programs tp ON c.training_program_id = tp.id\n      WHERE c.id = ?\n    `).bind(id).first();\n\n    return successResponse(updatedCertificate);\n  } catch (error) {\n    return errorResponse(`Failed to update certificate: ${error.message}`);\n  }\n}\n\n// DELETE /api/certificates/:id - Delete a certificate\nasync function handleDeleteCertificate(env, id) {\n  try {\n    // Check if the certificate exists\n    const certificate = await env.DB.prepare(\n      'SELECT * FROM certificates WHERE id = ?'\n    ).bind(id).first();\n\n    if (!certificate) {\n      return errorResponse('Certificate not found', 404);\n    }\n\n    // Delete the certificate\n    await env.DB.prepare(\n      'DELETE FROM certificates WHERE id = ?'\n    ).bind(id).run();\n\n    return successResponse({ message: `Certificate with ID ${id} has been deleted successfully` });\n  } catch (error) {\n    return errorResponse(`Failed to delete certificate: ${error.message}`);\n  }\n}\n\n// GET /api/contacts - Get all contacts\nasync function handleGetContacts(env) {\n  try {\n    const contacts = await env.DB.prepare(\n      'SELECT * FROM contacts ORDER BY created_at DESC'\n    ).all();\n\n    return successResponse(contacts.results);\n  } catch (error) {\n    return errorResponse(`Failed to fetch contacts: ${error.message}`);\n  }\n}\n\n// GET /api/contacts/:id - Get a specific contact\nasync function handleGetContact(env, id) {\n  try {\n    const contact = await env.DB.prepare(\n      'SELECT * FROM contacts WHERE id = ?'\n    ).bind(id).first();\n\n    if (!contact) {\n      return errorResponse('Contact not found', 404);\n    }\n\n    return successResponse(contact);\n  } catch (error) {\n    return errorResponse(`Failed to fetch contact: ${error.message}`);\n  }\n}\n\n// DELETE /api/contacts/:id - Delete a contact\nasync function handleDeleteContact(env, id) {\n  try {\n    // Check if the contact exists\n    const contact = await env.DB.prepare(\n      'SELECT * FROM contacts WHERE id = ?'\n    ).bind(id).first();\n\n    if (!contact) {\n      return errorResponse('Contact not found', 404);\n    }\n\n    // Delete the contact\n    await env.DB.prepare(\n      'DELETE FROM contacts WHERE id = ?'\n    ).bind(id).run();\n\n    return successResponse({ message: `Contact with ID ${id} has been deleted successfully` });\n  } catch (error) {\n    return errorResponse(`Failed to delete contact: ${error.message}`);\n  }\n}\n\n// PUT /api/contacts/:id - Update contact status\nasync function handleUpdateContactStatus(env, id, data) {\n  try {\n    // Check if the contact exists\n    const contact = await env.DB.prepare(\n      'SELECT * FROM contacts WHERE id = ?'\n    ).bind(id).first();\n\n    if (!contact) {\n      return errorResponse('Contact not found', 404);\n    }\n\n    // Validate status\n    if (!data || !data.status) {\n      return errorResponse('Status is required', 400);\n    }\n\n    // Execute the update\n    await env.DB.prepare(\n      'UPDATE contacts SET status = ? WHERE id = ?'\n    ).bind(data.status, id).run();\n\n    // Get the updated contact\n    const updatedContact = await env.DB.prepare(\n      'SELECT * FROM contacts WHERE id = ?'\n    ).bind(id).first();\n\n    return successResponse(updatedContact);\n  } catch (error) {\n    return errorResponse(`Failed to update contact status: ${error.message}`);\n  }\n}\n\n// PUT/PATCH /api/training-programs/:id - Update a training program\nasync function handleUpdateTrainingProgram(env, id, data) {\n  try {\n    // Check if the training program exists\n    const program = await env.DB.prepare(\n      'SELECT * FROM training_programs WHERE id = ?'\n    ).bind(id).first();\n\n    if (!program) {\n      return errorResponse('Training program not found', 404);\n    }\n\n    // Validate training program data\n    if (!data || Object.keys(data).length === 0) {\n      return errorResponse('No update data provided', 400);\n    }\n\n    // Build the update SQL dynamically based on what fields are provided\n    let updateFields = [];\n    let values = [];\n\n    if (data.title !== undefined) {\n      updateFields.push('title = ?');\n      values.push(data.title);\n    }\n\n    if (data.description !== undefined) {\n      updateFields.push('description = ?');\n      values.push(data.description);\n    }\n\n    if (data.category !== undefined) {\n      updateFields.push('category = ?');\n      values.push(data.category);\n    }\n\n    if (data.duration !== undefined) {\n      updateFields.push('duration = ?');\n      values.push(data.duration);\n    }\n\n    // Handle slug updates with validation and uniqueness check\n    if (data.slug !== undefined) {\n      let slug = data.slug;\n      \n      // Generate slug from title if slug is empty\n      if (!slug && data.title) {\n        slug = generateSlug(data.title);\n      }\n      \n      if (slug) {\n        // Check if slug already exists (excluding current program)\n        const slugExists = await env.DB.prepare(\n          'SELECT COUNT(*) as count FROM training_programs WHERE slug = ? AND id != ?'\n        ).bind(slug, id).first();\n        \n        if (slugExists.count > 0) {\n          // Make slug unique by adding counter\n          let counter = 1;\n          let originalSlug = slug;\n          let uniqueSlugCheck;\n          do {\n            slug = `${originalSlug}-${counter}`;\n            uniqueSlugCheck = await env.DB.prepare(\n              'SELECT COUNT(*) as count FROM training_programs WHERE slug = ? AND id != ?'\n            ).bind(slug, id).first();\n            counter++;\n          } while (uniqueSlugCheck.count > 0);\n        }\n        \n        updateFields.push('slug = ?');\n        values.push(slug);\n      }\n    }\n\n    if (data.price !== undefined) {\n      updateFields.push('price = ?');\n      values.push(data.price);\n    }\n\n    if (data.online_price !== undefined) {\n      updateFields.push('online_price = ?');\n      values.push(data.online_price);\n    }\n\n    if (data.offline_price !== undefined) {\n      updateFields.push('offline_price = ?');\n      values.push(data.offline_price);\n    }\n\n    if (data.delivery_mode !== undefined) {\n      updateFields.push('delivery_mode = ?');\n      values.push(data.delivery_mode);\n    }\n\n    // Check for both imagePath and image_path keys to accommodate both naming conventions\n    if (data.imagePath !== undefined || data.image_path !== undefined) {\n      updateFields.push('image_path = ?');\n      const imagePathValue = data.image_path !== undefined ? data.image_path : data.imagePath;\n      values.push(imagePathValue);\n      console.log('Setting image_path to:', imagePathValue);\n    }\n\n    if (updateFields.length === 0) {\n      return errorResponse('No valid fields to update', 400);\n    }\n\n    // Add the ID as the last parameter\n    values.push(id);\n\n    // Execute the update\n    await env.DB.prepare(\n      `UPDATE training_programs SET ${updateFields.join(', ')} WHERE id = ?`\n    ).bind(...values).run();\n\n    // Get the updated training program\n    const updatedProgram = await env.DB.prepare(\n      'SELECT * FROM training_programs WHERE id = ?'\n    ).bind(id).first();\n\n    return successResponse(updatedProgram);\n  } catch (error) {\n    return errorResponse(`Failed to update training program: ${error.message}`);\n  }\n}\n\n/**\n * Main Worker Handler\n */\nexport default {\n  async fetch(request, env) {\n    // Get the URL and parse the path\n    const url = new URL(request.url);\n    const pathname = url.pathname; // Changed from 'path' to 'pathname' for clarity\n    const method = request.method;\n\n    // Handle OPTIONS requests for CORS (preflight)\n    if (method === 'OPTIONS') {\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, X-API-Code',\n        },\n      });\n    }\n\n    // API routes\n    if (pathname.startsWith('/api/')) {\n      // GET endpoints\n      if (method === 'GET') {\n        // Services\n        if (pathname === '/api/services') {\n          return handleGetServices(env);\n        }\n\n        if (pathname.match(/^\\/api\\/services\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleGetService(env, id);\n        }\n\n        // Training Programs\n        if (pathname === '/api/training-programs') {\n          return handleGetTrainingPrograms(env);\n        }\n\n        if (pathname.match(/^\\/api\\/training-programs\\/[\\w-]+$/)) {\n          const identifier = pathname.split('/').pop();\n          return handleGetTrainingProgram(env, identifier);\n        }\n\n        // Participants\n        if (pathname === '/api/participants') {\n          // Authenticate the request for participant management\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n          return handleGetParticipants(env);\n        }\n\n        if (pathname.match(/^\\/api\\/participants\\/\\d+$/)) {\n          // Authenticate the request for participant management\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n          const id = parseInt(pathname.split('/').pop());\n          return handleGetParticipant(env, id);\n        }\n\n        // Certificates\n        if (pathname === '/api/certificates') {\n          // Authenticate the request for certificate management\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n          return handleGetCertificates(env);\n        }\n\n        if (pathname.match(/^\\/api\\/certificates\\/\\d+$/)) {\n          // Authenticate the request for certificate management\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n          const id = parseInt(pathname.split('/').pop());\n          return handleGetCertificate(env, id);\n        }\n\n        if (pathname.match(/^\\/api\\/certificates\\/download\\/(.+)$/)) {\n          // Certificate download should be public\n          // No authentication required for certificate downloads\n          const certificateId = pathname.match(/^\\/api\\/certificates\\/download\\/(.+)$/)[1];\n          return handleCertificateDownload(env, certificateId);\n        }\n\n        // Contacts\n        if (pathname === '/api/contacts') {\n          // Authenticate the request for contact management\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n          return handleGetContacts(env);\n        }\n\n        if (pathname.match(/^\\/api\\/contacts\\/\\d+$/)) {\n          // Authenticate the request for contact management\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n          const id = parseInt(pathname.split('/').pop());\n          return handleGetContact(env, id);\n        }\n      }\n\n      // POST endpoints\n      if (method === 'POST') {\n        // Parse the request body\n        let data;\n        try {\n          data = await request.json();\n        } catch (error) {\n          return errorResponse('Invalid JSON in request body', 400);\n        }\n\n        // Regular POST operations (no authentication required)\n        if (pathname === '/api/verify-certificate') {\n          return handleVerifyCertificate(env, data);\n        }\n\n        if (pathname === '/api/check-status') {\n          return handleCheckParticipantStatus(env, data);\n        }\n\n        if (pathname === '/api/contact') {\n          return handleContactForm(env, data);\n        }\n\n        // POST operations that create new records - require authentication\n        if (pathname.includes('/create') || pathname.includes('/add')) {\n          // Authenticate the request\n          if (!authenticateApiRequest(request)) {\n            return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n          }\n\n          // Handle different create endpoints\n          if (pathname === '/api/services/create') {\n            return handleCreateService(env, data);\n          }\n\n          if (pathname === '/api/training-programs/create') {\n            return handleCreateTrainingProgram(env, data);\n          }\n\n          if (pathname === '/api/participants/create') {\n            return handleCreateParticipant(env, data);\n          }\n\n          if (pathname === '/api/certificates/create') {\n            return handleCreateCertificate(env, data);\n          }\n        }\n      }\n\n      // DELETE operations - require authentication\n      if (method === 'DELETE') {\n        // Authenticate the request\n        if (!authenticateApiRequest(request)) {\n          return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n        }\n\n        if (pathname.match(/^\\/api\\/services\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleDeleteService(env, id);\n        }\n\n        if (pathname.match(/^\\/api\\/training-programs\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleDeleteTrainingProgram(env, id);\n        }\n\n        if (pathname.match(/^\\/api\\/participants\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleDeleteParticipant(env, id);\n        }\n\n        if (pathname.match(/^\\/api\\/certificates\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleDeleteCertificate(env, id);\n        }\n\n        // Contacts\n        if (pathname.match(/^\\/api\\/contacts\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/')[3]);\n          return handleDeleteContact(env, id);\n        }\n      }\n\n      // PUT/PATCH operations - require authentication\n      if (method === 'PUT' || method === 'PATCH') {\n        // Authenticate the request\n        if (!authenticateApiRequest(request)) {\n          return errorResponse('Authentication failed. Invalid or missing API code.', 401);\n        }\n\n        // Parse the request body\n        let data;\n        try {\n          data = await request.json();\n        } catch (error) {\n          return errorResponse('Invalid JSON in request body', 400);\n        }\n\n        if (pathname.match(/^\\/api\\/services\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleUpdateService(env, id, data);\n        }\n\n        if (pathname.match(/^\\/api\\/training-programs\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleUpdateTrainingProgram(env, id, data);\n        }\n\n        if (pathname.match(/^\\/api\\/participants\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleUpdateParticipant(env, id, data);\n        }\n\n        if (pathname.match(/^\\/api\\/certificates\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/').pop());\n          return handleUpdateCertificate(env, id, data);\n        }\n\n        if (pathname.match(/^\\/api\\/contacts\\/\\d+$/)) {\n          const id = parseInt(pathname.split('/')[3]);\n          return handleUpdateContactStatus(env, id, data);\n        }\n      }\n\n      // If no matching endpoint is found\n      return errorResponse('Endpoint not found', 404);\n    }\n\n    // If not an API route, return 404\n    return errorResponse('Not found', 404);\n  }\n};","size_bytes":47528},"cloudflare-worker/wrangler.toml":{"content":"name = \"bhumi-consultancy-worker\"\nmain = \"worker.js\"\ncompatibility_date = \"2023-01-01\"\n\n# D1 Database Configuration\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"bhumi_consultancy_db\"\ndatabase_id = \"your-d1-database-id\"  # Replace with your actual D1 database ID\n\n# Routes Configuration\n[routes]\npattern = \"api/*\"\nzone_name = \"your-domain.com\"  # Replace with your actual domain","size_bytes":381},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport fetch from \"node-fetch\";\n\nconst app = express();\n\n// Ping function to keep the server alive\nconst PING_URL = process.env.DOMAIN || \"https://bhumiconsultancy.in\";\nconst PING_INTERVAL = 25000; // 25 seconds\n\nasync function pingWebsite() {\n  try {\n    const response = await fetch(PING_URL, {\n      method: 'GET',\n      timeout: 10000, // 10 second timeout\n    });\n    log(`Ping to ${PING_URL}: ${response.status} ${response.statusText}`, \"ping\");\n  } catch (error) {\n    log(`Ping failed to ${PING_URL}: ${error.message}`, \"ping\");\n  }\n}\n\n// Start pinging after server is ready\nfunction startPingService() {\n  log(`Starting ping service - will ping ${PING_URL} every ${PING_INTERVAL/1000} seconds`, \"ping\");\n  setInterval(pingWebsite, PING_INTERVAL);\n  // Initial ping after 30 seconds\n  setTimeout(pingWebsite, 30000);\n}\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    // If the error is a 404 for a non-API path, allow it to pass through to the client router\n    if (err.status === 404 && !_req.path.startsWith('/api')) {\n      return _next();\n    }\n    \n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    // Start the ping service to keep the server alive\n    startPingService();\n  });\n})();\n","size_bytes":3018},"server/routes.ts":{"content":"import \"dotenv/config\";\nimport type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertServiceSchema, \n  insertTrainingProgramSchema,\n  insertParticipantSchema,\n  insertCertificateSchema,\n  contactFormSchema,\n  certificateVerificationSchema,\n  statusCheckSchema\n} from \"@shared/schema\";\nimport { ZodError } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport fetch from \"node-fetch\";\nimport { SitemapStream, streamToPromise } from \"sitemap\";\nimport { createGzip } from \"zlib\";\nimport { sendContactNotification } from \"./telegram-notifications\";\n\n// Cloudflare Worker URL - force your new URL\nconst CLOUDFLARE_WORKER_URL = \"https://apiv2.bhumiconsultancy120.workers.dev\";\n\n// Site domain for sitemap\nconst DOMAIN = process.env.DOMAIN || \"https://bhumiconsultancy.in\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // API route prefix\n  const apiPrefix = \"/api\";\n  \n  // Health check endpoint for ping service\n  app.get('/health', (_req: Request, res: Response) => {\n    res.status(200).json({ \n      status: 'ok', \n      timestamp: new Date().toISOString(),\n      uptime: process.uptime()\n    });\n  });\n\n  // Error handler middleware\n  const handleError = (err: unknown, res: Response) => {\n    console.error(\"API Error:\", err);\n    \n    if (err instanceof ZodError) {\n      const validationError = fromZodError(err);\n      return res.status(400).json({ \n        success: false, \n        error: validationError.message \n      });\n    }\n    \n    return res.status(500).json({ \n      success: false, \n      error: err instanceof Error ? err.message : \"Unknown error occurred\" \n    });\n  };\n  \n  // Add a middleware to set proper caching headers for assets\n  app.use((req, res, next) => {\n    // Only handle specific static assets that should be cached\n    if (req.path.match(/\\.(js|css|png|jpg|jpeg|gif|ico|svg)$/)) {\n      res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 day\n    }\n    next();\n  });\n\n  // GET services\n  app.get(`${apiPrefix}/services`, (req: Request, res: Response) => {\n    // Always proxy to Cloudflare Worker API\n    proxyToCloudflareWorker(req, res, '/api/services');\n  });\n\n  // GET single service\n  app.get(`${apiPrefix}/services/:id`, (req: Request, res: Response) => {\n    // Always proxy to Cloudflare Worker API\n    proxyToCloudflareWorker(req, res, `/api/services/${req.params.id}`);\n  });\n\n  // GET training programs\n  app.get(`${apiPrefix}/training-programs`, (req: Request, res: Response) => {\n    // Always proxy to Cloudflare Worker API\n    proxyToCloudflareWorker(req, res, '/api/training-programs');\n  });\n\n  // GET single training program\n  app.get(`${apiPrefix}/training-programs/:id`, (req: Request, res: Response) => {\n    // Always proxy to Cloudflare Worker API\n    proxyToCloudflareWorker(req, res, `/api/training-programs/${req.params.id}`);\n  });\n\n  // POST verify certificate\n  app.post(`${apiPrefix}/verify-certificate`, (req: Request, res: Response) => {\n    // Always proxy to Cloudflare Worker API\n    proxyToCloudflareWorker(req, res, '/api/verify-certificate');\n  });\n\n  // POST check participant status\n  app.post(`${apiPrefix}/check-status`, (req: Request, res: Response) => {\n    // Always proxy to Cloudflare Worker API\n    proxyToCloudflareWorker(req, res, '/api/check-status');\n  });\n\n  // POST contact form with Telegram notification\n  app.post(`${apiPrefix}/contact`, async (req: Request, res: Response) => {\n    try {\n      // Validate the contact form data\n      const validatedData = contactFormSchema.parse(req.body);\n      \n      // First, save to database via Cloudflare Worker\n      const response = await fetch(`${CLOUDFLARE_WORKER_URL}/api/contact`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(validatedData)\n      });\n      \n      const data = await response.json() as any;\n      \n      // If successful, send Telegram notification immediately\n      if (response.ok && data.success) {\n        // Send notification in the background (don't wait for it)\n        sendContactNotification({\n          name: validatedData.name,\n          email: validatedData.email,\n          phone: validatedData.phone,\n          subject: validatedData.subject,\n          message: validatedData.message\n        }).catch(error => {\n          console.error('Failed to send Telegram notification:', error);\n        });\n        \n        console.log(`📬 New contact from ${validatedData.name} (${validatedData.email}) - Telegram notification sent`);\n      }\n      \n      // Return the response to the client\n      return res.status(response.status).json(data);\n    } catch (error) {\n      // If validation fails or other error, fall back to proxy BUT still try to send notification\n      if (error instanceof ZodError) {\n        console.log('⚠️ Contact form validation failed, using proxy method');\n      } else {\n        console.error('Contact form error, falling back to proxy:', error);\n      }\n      \n      // Proxy to Cloudflare Worker with notification wrapper\n      await proxyToCloudflareWorkerWithNotification(req, res, '/api/contact');\n    }\n  });\n\n  // Test endpoint for Telegram notifications\n  app.get(`${apiPrefix}/test-telegram`, async (req: Request, res: Response) => {\n    try {\n      const { testTelegramBot } = await import('./telegram-notifications');\n      const result = await testTelegramBot();\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  // Telegram bot status endpoint\n  app.get(`${apiPrefix}/telegram-status`, async (req: Request, res: Response) => {\n    try {\n      const { getTelegramBotStatus } = await import('./telegram-notifications');\n      const status = getTelegramBotStatus();\n      res.json(status);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  });\n\n  // Special proxy function for contact forms that also sends Telegram notifications\n  async function proxyToCloudflareWorkerWithNotification(req: Request, res: Response, endpoint: string) {\n    try {\n      // Add cache busting parameter to avoid stale data\n      const cacheBuster = `_t=${Date.now()}`;\n      const urlWithCacheBuster = endpoint.includes('?') \n        ? `${endpoint}&${cacheBuster}` \n        : `${endpoint}?${cacheBuster}`;\n      \n      // Get the method and body\n      const method = req.method;\n      const requestInit: any = {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': req.get('User-Agent') || 'Express-Proxy/1.0'\n        }\n      };\n\n      // Add body for POST/PUT requests\n      if (method === 'POST' || method === 'PUT') {\n        requestInit.body = JSON.stringify(req.body);\n      }\n\n      // Make request to Cloudflare Worker\n      const response = await fetch(`${CLOUDFLARE_WORKER_URL}${urlWithCacheBuster}`, requestInit);\n      const data = await response.json() as any;\n\n      // If the contact was successfully saved, send Telegram notification\n      if (response.ok && data.success && endpoint === '/api/contact') {\n        const contactData = req.body;\n        if (contactData && contactData.name && contactData.email) {\n          // Send notification in the background (don't wait for it)\n          sendContactNotification({\n            name: contactData.name || 'Unknown',\n            email: contactData.email || 'unknown@email.com',\n            phone: contactData.phone,\n            subject: contactData.subject || 'Contact Form',\n            message: contactData.message || ''\n          }).catch(error => {\n            console.error('Failed to send Telegram notification for proxied contact:', error);\n          });\n          \n          console.log(`📬 New contact from ${contactData.name} (${contactData.email}) - Telegram notification sent (via proxy)`);\n        }\n      }\n      \n      // Set appropriate headers and return response\n      res.status(response.status);\n      res.set('Content-Type', response.headers.get('Content-Type') || 'application/json');\n      res.json(data);\n      \n    } catch (error) {\n      console.error('Error proxying to Cloudflare Worker:', error);\n      res.status(500).json({ \n        success: false, \n        message: 'Internal server error',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  }\n\n  // Cloudflare Worker Proxy\n  // Helper function to proxy requests to Cloudflare Worker\n  async function proxyToCloudflareWorker(req: Request, res: Response, endpoint: string) {\n    try {\n      // Add cache busting parameter to avoid stale data\n      const cacheBuster = `_t=${Date.now()}`;\n      const urlWithCacheBuster = endpoint.includes('?') \n        ? `${endpoint}&${cacheBuster}` \n        : `${endpoint}?${cacheBuster}`;\n      \n      const url = `${CLOUDFLARE_WORKER_URL}${urlWithCacheBuster}`;\n      \n      // Set up headers for the proxy request\n      const headers: Record<string, string> = { \n        'Content-Type': 'application/json' \n      };\n      \n      // Add authentication header if in request\n      if (req.headers['x-api-code']) {\n        headers['X-API-Code'] = req.headers['x-api-code'] as string;\n      }\n      \n      // Make the request to Cloudflare Worker\n      const response = await fetch(url, {\n        method: req.method,\n        headers,\n        body: ['POST', 'PUT', 'PATCH'].includes(req.method) ? JSON.stringify(req.body) : undefined\n      });\n      \n      // Get the response data\n      const data = await response.json();\n      \n      // Return the response with the same status code\n      return res.status(response.status).json(data);\n    } catch (error) {\n      console.error('Error proxying to Cloudflare Worker:', error);\n      return res.status(500).json({\n        success: false,\n        error: 'Failed to connect to Cloudflare Worker API'\n      });\n    }\n  }\n  \n  // CRUD operations for Services (via Cloudflare Worker)\n  app.post(`${apiPrefix}/services/create`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/services/create');\n  });\n  \n  app.put(`${apiPrefix}/services/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/services/${req.params.id}`);\n  });\n  \n  app.delete(`${apiPrefix}/services/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/services/${req.params.id}`);\n  });\n  \n  // CRUD operations for Training Programs (via Cloudflare Worker)\n  app.post(`${apiPrefix}/training-programs/create`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/training-programs/create');\n  });\n  \n  app.put(`${apiPrefix}/training-programs/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/training-programs/${req.params.id}`);\n  });\n  \n  app.delete(`${apiPrefix}/training-programs/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/training-programs/${req.params.id}`);\n  });\n  \n  // CRUD operations for Participants (via Cloudflare Worker)\n  app.get(`${apiPrefix}/participants`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/participants');\n  });\n\n  app.get(`${apiPrefix}/participants/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/participants/${req.params.id}`);\n  });\n  \n  app.post(`${apiPrefix}/participants/create`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/participants/create');\n  });\n  \n  app.put(`${apiPrefix}/participants/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/participants/${req.params.id}`);\n  });\n  \n  app.delete(`${apiPrefix}/participants/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/participants/${req.params.id}`);\n  });\n  \n  // CRUD operations for Certificates (via Cloudflare Worker)\n  app.get(`${apiPrefix}/certificates`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/certificates');\n  });\n\n  app.get(`${apiPrefix}/certificates/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/certificates/${req.params.id}`);\n  });\n  \n  app.post(`${apiPrefix}/certificates/create`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/certificates/create');\n  });\n  \n  app.put(`${apiPrefix}/certificates/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/certificates/${req.params.id}`);\n  });\n  \n  app.delete(`${apiPrefix}/certificates/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/certificates/${req.params.id}`);\n  });\n  \n  app.get(`${apiPrefix}/certificates/download/:certificateId`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/certificates/download/${req.params.certificateId}`);\n  });\n  \n  // Contact management operations (via Cloudflare Worker)\n  app.get(`${apiPrefix}/contacts`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, '/api/contacts');\n  });\n\n  app.get(`${apiPrefix}/contacts/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/contacts/${req.params.id}`);\n  });\n  \n  app.put(`${apiPrefix}/contacts/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/contacts/${req.params.id}`);\n  });\n\n  app.delete(`${apiPrefix}/contacts/:id`, (req: Request, res: Response) => {\n    proxyToCloudflareWorker(req, res, `/api/contacts/${req.params.id}`);\n  });\n  \n  // Cloudflare Worker Documentation\n  app.get(`${apiPrefix}/demo/cloudflare-worker`, (_req: Request, res: Response) => {\n    res.json({\n      success: true,\n      message: \"This application is now connected to a live Cloudflare Worker API\",\n      worker: {\n        url: CLOUDFLARE_WORKER_URL,\n        authentication: {\n          required: \"For POST (create), PUT, PATCH and DELETE operations\",\n          header: \"X-API-Code\",\n          value: process.env.API_CODE ? \"[CONFIGURED]\" : \"[MISSING - API_CODE env variable required]\"\n        },\n        endpoints: [\n          // Services\n          { path: \"/api/services\", method: \"GET\", description: \"Get all services\" },\n          { path: \"/api/services/create\", method: \"POST\", description: \"Create a new service (requires authentication)\" },\n          { path: \"/api/services/:id\", method: \"PUT/PATCH\", description: \"Update a service (requires authentication)\" },\n          { path: \"/api/services/:id\", method: \"DELETE\", description: \"Delete a service (requires authentication)\" },\n          \n          // Training Programs\n          { path: \"/api/training-programs\", method: \"GET\", description: \"Get all training programs\" },\n          { path: \"/api/training-programs/:id\", method: \"GET\", description: \"Get a specific training program by ID\" },\n          { path: \"/api/training-programs/create\", method: \"POST\", description: \"Create a new training program (requires authentication)\" },\n          { path: \"/api/training-programs/:id\", method: \"PUT/PATCH\", description: \"Update a training program (requires authentication)\" },\n          { path: \"/api/training-programs/:id\", method: \"DELETE\", description: \"Delete a training program (requires authentication)\" },\n          \n          // Participants\n          { path: \"/api/participants\", method: \"GET\", description: \"Get all participants (requires authentication)\" },\n          { path: \"/api/participants/:id\", method: \"GET\", description: \"Get a specific participant by ID (requires authentication)\" },\n          { path: \"/api/participants/create\", method: \"POST\", description: \"Create a new participant (requires authentication)\" },\n          { path: \"/api/participants/:id\", method: \"PUT/PATCH\", description: \"Update a participant (requires authentication)\" },\n          { path: \"/api/participants/:id\", method: \"DELETE\", description: \"Delete a participant (requires authentication)\" },\n          \n          // Certificates\n          { path: \"/api/certificates\", method: \"GET\", description: \"Get all certificates (requires authentication)\" },\n          { path: \"/api/certificates/:id\", method: \"GET\", description: \"Get a specific certificate by ID (requires authentication)\" },\n          { path: \"/api/certificates/create\", method: \"POST\", description: \"Create a new certificate (requires authentication)\" },\n          { path: \"/api/certificates/:id\", method: \"PUT/PATCH\", description: \"Update a certificate (requires authentication)\" },\n          { path: \"/api/certificates/:id\", method: \"DELETE\", description: \"Delete a certificate (requires authentication)\" },\n          { path: \"/api/certificates/download/:certificateId\", method: \"GET\", description: \"Get download URL for a certificate (public access, no authentication required)\" },\n          \n          // Verification & Status\n          { path: \"/api/verify-certificate\", method: \"POST\", description: \"Verify a certificate's authenticity\" },\n          { path: \"/api/check-status\", method: \"POST\", description: \"Check a participant's training status\" },\n          \n          // Contacts\n          { path: \"/api/contacts\", method: \"GET\", description: \"Get all contact submissions (requires authentication)\" },\n          { path: \"/api/contacts/:id\", method: \"PUT\", description: \"Update contact status (requires authentication)\" },\n          { path: \"/api/contact\", method: \"POST\", description: \"Submit a contact form\" }\n        ]\n      }\n    });\n  });\n\n  // Dynamic sitemap generation with cache invalidation\n  let sitemap: Buffer | null = null;\n  let sitemapLastGenerated: number = 0;\n  const SITEMAP_CACHE_DURATION = 3600000; // 1 hour in milliseconds\n  \n  // Helper function to fetch live data from Cloudflare Worker\n  async function fetchLiveData() {\n    try {\n      const [servicesRes, trainingProgramsRes] = await Promise.all([\n        fetch(`${CLOUDFLARE_WORKER_URL}/api/services`),\n        fetch(`${CLOUDFLARE_WORKER_URL}/api/training-programs`)\n      ]);\n      \n      const servicesData = await servicesRes.json() as any;\n      const trainingProgramsData = await trainingProgramsRes.json() as any;\n      \n      return {\n        services: servicesData.success ? servicesData.data : [],\n        trainingPrograms: trainingProgramsData.success ? trainingProgramsData.data : []\n      };\n    } catch (error) {\n      console.warn('Failed to fetch live data for sitemap, using fallback:', error);\n      // Fallback to local storage if API fails\n      return {\n        services: await storage.getAllServices(),\n        trainingPrograms: await storage.getAllTrainingPrograms()\n      };\n    }\n  }\n  \n  app.get('/sitemap.xml', async (req: Request, res: Response) => {\n    res.header('Content-Type', 'application/xml');\n    res.header('Content-Encoding', 'gzip');\n    \n    try {\n      const now = Date.now();\n      const cacheExpired = now - sitemapLastGenerated > SITEMAP_CACHE_DURATION;\n      \n      // Check for cache query parameter to force refresh\n      const forceRefresh = req.query.refresh === 'true';\n      \n      if (sitemap && !cacheExpired && !forceRefresh) {\n        // Return cached sitemap if available and not expired\n        res.send(sitemap);\n        return;\n      }\n      \n      console.log('🗺️ Generating fresh sitemap with live data...');\n      \n      // Create a sitemap stream\n      const smStream = new SitemapStream({ hostname: DOMAIN });\n      const pipeline = smStream.pipe(createGzip());\n      \n      // Fetch live data from Cloudflare Worker\n      const { services, trainingPrograms } = await fetchLiveData();\n      \n      console.log(`📊 Sitemap includes: ${services.length} services, ${trainingPrograms.length} training programs`);\n      \n      // Static routes with SEO priorities\n      smStream.write({ \n        url: '/', \n        changefreq: 'weekly', \n        priority: 1.0,\n        lastmod: new Date().toISOString().split('T')[0]\n      });\n      smStream.write({ \n        url: '/about', \n        changefreq: 'monthly', \n        priority: 0.8,\n        lastmod: new Date().toISOString().split('T')[0]\n      });\n      smStream.write({ \n        url: '/training-programs', \n        changefreq: 'weekly', \n        priority: 0.9,\n        lastmod: new Date().toISOString().split('T')[0]\n      });\n      smStream.write({ \n        url: '/contact', \n        changefreq: 'monthly', \n        priority: 0.7,\n        lastmod: new Date().toISOString().split('T')[0]\n      });\n      smStream.write({ \n        url: '/verify-certificate', \n        changefreq: 'monthly', \n        priority: 0.6,\n        lastmod: new Date().toISOString().split('T')[0]\n      });\n      \n      // Dynamic routes for services\n      services.forEach((service: any) => {\n        smStream.write({\n          url: `/services/${service.id}`,\n          changefreq: 'monthly',\n          priority: 0.7,\n          lastmod: new Date().toISOString().split('T')[0]\n        });\n      });\n      \n      // Dynamic routes for training programs (high priority for SEO)\n      trainingPrograms.forEach((program: any) => {\n        smStream.write({\n          url: `/training-programs/${program.id}`,\n          changefreq: 'weekly', // More frequent updates for training programs\n          priority: 0.8, // Higher priority for training content\n          lastmod: new Date().toISOString().split('T')[0]\n        });\n      });\n      \n      // Add category-based training program pages if categories exist\n      const uniqueCategories = Array.from(new Set(trainingPrograms.map((p: any) => p.category).filter(Boolean)));\n      uniqueCategories.forEach((category: string) => {\n        smStream.write({\n          url: `/training-programs?category=${encodeURIComponent(category)}`,\n          changefreq: 'weekly',\n          priority: 0.6,\n          lastmod: new Date().toISOString().split('T')[0]\n        });\n      });\n      \n      // End the stream\n      smStream.end();\n      \n      // Store the sitemap in memory for caching\n      const sitemapData = await streamToPromise(pipeline);\n      sitemap = sitemapData;\n      sitemapLastGenerated = now;\n      \n      console.log('✅ Sitemap generated successfully');\n      \n      // Send the sitemap to the client\n      res.send(sitemap);\n    } catch (error) {\n      console.error('❌ Error generating sitemap:', error);\n      res.status(500).send('Error generating sitemap');\n    }\n  });\n  \n  // Clear sitemap cache endpoint for admin use\n  app.post(`${apiPrefix}/sitemap/refresh`, (req: Request, res: Response) => {\n    sitemap = null;\n    sitemapLastGenerated = 0;\n    res.json({ \n      success: true, \n      message: 'Sitemap cache cleared. Next request will generate fresh sitemap.' \n    });\n  });\n\n  // Add a catch-all route to handle client-side routing\n  // NOTE: This MUST be registered after all API routes\n  app.get('*', (req: Request, res: Response, next: NextFunction) => {\n    // Skip API routes and static assets which already have handlers\n    if (req.path.startsWith('/api/') || req.path.includes('.')) {\n      return next();\n    }\n    \n    // Log client-side route access for debugging\n    console.log(`Client-side route accessed: ${req.path}`);\n    \n    // Let the Vite middleware handle it in development\n    // It will serve index.html for client-side routes\n    next();\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23553},"server/storage.ts":{"content":"import { \n  users, type User, type InsertUser,\n  services, type Service, type InsertService,\n  trainingPrograms, type TrainingProgram, type InsertTrainingProgram,\n  participants, type Participant, type InsertParticipant,\n  certificates, type Certificate, type InsertCertificate,\n  contacts, type Contact, type InsertContact,\n  CertificateVerification, StatusCheck,\n} from \"@shared/schema\";\n\n// Storage interface with CRUD methods\nexport interface IStorage {\n  // Users\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Services\n  getAllServices(): Promise<Service[]>;\n  getService(id: number): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: number, service: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: number): Promise<boolean>;\n  \n  // Training Programs\n  getAllTrainingPrograms(): Promise<TrainingProgram[]>;\n  getTrainingProgram(id: number): Promise<TrainingProgram | undefined>;\n  createTrainingProgram(program: InsertTrainingProgram): Promise<TrainingProgram>;\n  updateTrainingProgram(id: number, program: Partial<InsertTrainingProgram>): Promise<TrainingProgram | undefined>;\n  deleteTrainingProgram(id: number): Promise<boolean>;\n  \n  // Participants\n  getAllParticipants(): Promise<Participant[]>;\n  getParticipant(id: number): Promise<Participant | undefined>;\n  getParticipantByParticipantId(participantId: string): Promise<Participant | undefined>;\n  getParticipantByEmail(email: string): Promise<Participant | undefined>;\n  createParticipant(participant: InsertParticipant): Promise<Participant>;\n  updateParticipant(id: number, participant: Partial<InsertParticipant>): Promise<Participant | undefined>;\n  deleteParticipant(id: number): Promise<boolean>;\n  \n  // Certificates\n  getAllCertificates(): Promise<Certificate[]>;\n  getCertificate(id: number): Promise<Certificate | undefined>;\n  getCertificateByCertificateId(certificateId: string): Promise<Certificate | undefined>;\n  getCertificatesByParticipantId(participantId: number): Promise<Certificate[]>;\n  createCertificate(certificate: InsertCertificate): Promise<Certificate>;\n  updateCertificate(id: number, certificate: Partial<InsertCertificate>): Promise<Certificate | undefined>;\n  deleteCertificate(id: number): Promise<boolean>;\n  \n  // Contacts\n  createContact(contact: InsertContact): Promise<Contact>;\n  getAllContacts(): Promise<Contact[]>;\n  \n  // Specialized operations\n  verifyCertificate(data: CertificateVerification): Promise<{ \n    valid: boolean;\n    certificate?: Certificate;\n    participant?: Participant;\n    trainingProgram?: TrainingProgram; \n  }>;\n  \n  checkParticipantStatus(data: StatusCheck): Promise<{\n    valid: boolean;\n    participant?: Participant;\n    certificates?: Certificate[];\n    trainingPrograms?: TrainingProgram[];\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private services: Map<number, Service>;\n  private trainingPrograms: Map<number, TrainingProgram>;\n  private participants: Map<number, Participant>;\n  private certificates: Map<number, Certificate>;\n  private contacts: Map<number, Contact>;\n  \n  currentUserId: number;\n  currentServiceId: number;\n  currentTrainingProgramId: number;\n  currentParticipantId: number;\n  currentCertificateId: number;\n  currentContactId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.services = new Map();\n    this.trainingPrograms = new Map();\n    this.participants = new Map();\n    this.certificates = new Map();\n    this.contacts = new Map();\n    \n    this.currentUserId = 1;\n    this.currentServiceId = 1;\n    this.currentTrainingProgramId = 1;\n    this.currentParticipantId = 1;\n    this.currentCertificateId = 1;\n    this.currentContactId = 1;\n    \n    // Initialize with sample data\n    this.initializeSampleData().catch(console.error);\n  }\n\n  // Initialize sample data for the in-memory storage\n  private async initializeSampleData() {\n    // Sample services\n    const consultancyService: InsertService = {\n      title: \"Consultancy Services\",\n      description: \"Our expert consultants provide strategic guidance to optimize your business operations, improve efficiency, and drive growth.\",\n      icon: \"chart-line\",\n      features: [\"Business strategy development\", \"Operational efficiency analysis\", \"Growth planning and implementation\"],\n    };\n    \n    const auditService: InsertService = {\n      title: \"Audit Preparation\",\n      description: \"Comprehensive audit preparation services to ensure your business is fully compliant and audit-ready.\",\n      icon: \"file-invoice\",\n      features: [\"Financial statement preparation\", \"Compliance documentation\", \"Risk assessment and mitigation\"],\n    };\n    \n    this.createService(consultancyService);\n    this.createService(auditService);\n    \n    // Sample training programs\n    const trainingProgram1: InsertTrainingProgram = {\n      title: \"Strategic Business Planning\",\n      description: \"Learn how to develop and implement effective business strategies.\",\n      category: \"Business\",\n      duration: \"4 weeks\",\n      price: 12500,\n      image_path: \"/training1.jpg\",\n    };\n    \n    const trainingProgram2: InsertTrainingProgram = {\n      title: \"Financial Management\",\n      description: \"Master financial planning, analysis, and reporting for business.\",\n      category: \"Finance\",\n      duration: \"6 weeks\",\n      price: 15000,\n      image_path: \"/training2.jpg\",\n    };\n    \n    const trainingProgram3: InsertTrainingProgram = {\n      title: \"Executive Leadership\",\n      description: \"Develop essential leadership skills for executive positions.\",\n      category: \"Leadership\",\n      duration: \"8 weeks\",\n      price: 20000,\n      image_path: \"/training3.jpg\",\n    };\n    \n    const program1 = await this.createTrainingProgram(trainingProgram1);\n    const program2 = await this.createTrainingProgram(trainingProgram2);\n    await this.createTrainingProgram(trainingProgram3);\n    \n    // Sample participant\n    const participant1: InsertParticipant = {\n      participantId: \"BHM-P001\",\n      fullName: \"John Doe\",\n      email: \"john.doe@example.com\",\n      phone: \"+919876543210\",\n      trainingProgramId: program1.id,\n      enrollmentDate: new Date(\"2023-01-15\"),\n      status: \"active\",\n    };\n    \n    const createdParticipant = await this.createParticipant(participant1);\n    \n    // Sample certificate\n    const certificate1: InsertCertificate = {\n      certificateId: \"BHM23051501\",\n      participantId: createdParticipant.id,\n      trainingProgramId: program1.id,\n      issueDate: new Date(\"2023-05-15\"),\n      expiryDate: new Date(\"2025-05-15\"),\n      certificatePath: \"/certificates/BHM23051501.pdf\",\n    };\n    \n    await this.createCertificate(certificate1);\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const user: User = { \n      ...insertUser, \n      id,\n      phone: insertUser.phone ?? null,\n      role: insertUser.role ?? \"user\"\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Service methods\n  async getAllServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: number): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    const id = this.currentServiceId++;\n    const service: Service = { ...insertService, id };\n    this.services.set(id, service);\n    return service;\n  }\n\n  async updateService(id: number, updateData: Partial<InsertService>): Promise<Service | undefined> {\n    const existingService = this.services.get(id);\n    if (!existingService) return undefined;\n    \n    const updatedService = { ...existingService, ...updateData };\n    this.services.set(id, updatedService);\n    return updatedService;\n  }\n\n  async deleteService(id: number): Promise<boolean> {\n    return this.services.delete(id);\n  }\n\n  // Training Program methods\n  async getAllTrainingPrograms(): Promise<TrainingProgram[]> {\n    return Array.from(this.trainingPrograms.values());\n  }\n\n  async getTrainingProgram(id: number): Promise<TrainingProgram | undefined> {\n    return this.trainingPrograms.get(id);\n  }\n\n  async createTrainingProgram(insertProgram: InsertTrainingProgram): Promise<TrainingProgram> {\n    const id = this.currentTrainingProgramId++;\n    const program: TrainingProgram = { \n      ...insertProgram, \n      id,\n      online_price: insertProgram.online_price ?? null,\n      offline_price: insertProgram.offline_price ?? null,\n      delivery_mode: insertProgram.delivery_mode ?? \"both\",\n      image_path: insertProgram.image_path ?? null\n    };\n    this.trainingPrograms.set(id, program);\n    return program;\n  }\n\n  async updateTrainingProgram(id: number, updateData: Partial<InsertTrainingProgram>): Promise<TrainingProgram | undefined> {\n    const existingProgram = this.trainingPrograms.get(id);\n    if (!existingProgram) return undefined;\n    \n    const updatedProgram = { ...existingProgram, ...updateData };\n    this.trainingPrograms.set(id, updatedProgram);\n    return updatedProgram;\n  }\n\n  async deleteTrainingProgram(id: number): Promise<boolean> {\n    return this.trainingPrograms.delete(id);\n  }\n\n  // Participant methods\n  async getAllParticipants(): Promise<Participant[]> {\n    return Array.from(this.participants.values());\n  }\n\n  async getParticipant(id: number): Promise<Participant | undefined> {\n    return this.participants.get(id);\n  }\n\n  async getParticipantByParticipantId(participantId: string): Promise<Participant | undefined> {\n    return Array.from(this.participants.values()).find(\n      (participant) => participant.participantId === participantId,\n    );\n  }\n\n  async getParticipantByEmail(email: string): Promise<Participant | undefined> {\n    return Array.from(this.participants.values()).find(\n      (participant) => participant.email === email,\n    );\n  }\n\n  async createParticipant(insertParticipant: InsertParticipant): Promise<Participant> {\n    const id = this.currentParticipantId++;\n    const participant: Participant = { \n      ...insertParticipant, \n      id,\n      phone: insertParticipant.phone ?? null,\n      status: insertParticipant.status ?? \"active\"\n    };\n    this.participants.set(id, participant);\n    return participant;\n  }\n\n  async updateParticipant(id: number, updateData: Partial<InsertParticipant>): Promise<Participant | undefined> {\n    const existingParticipant = this.participants.get(id);\n    if (!existingParticipant) return undefined;\n    \n    const updatedParticipant = { ...existingParticipant, ...updateData };\n    this.participants.set(id, updatedParticipant);\n    return updatedParticipant;\n  }\n\n  async deleteParticipant(id: number): Promise<boolean> {\n    return this.participants.delete(id);\n  }\n\n  // Certificate methods\n  async getAllCertificates(): Promise<Certificate[]> {\n    return Array.from(this.certificates.values());\n  }\n\n  async getCertificate(id: number): Promise<Certificate | undefined> {\n    return this.certificates.get(id);\n  }\n\n  async getCertificateByCertificateId(certificateId: string): Promise<Certificate | undefined> {\n    return Array.from(this.certificates.values()).find(\n      (certificate) => certificate.certificateId === certificateId,\n    );\n  }\n\n  async getCertificatesByParticipantId(participantId: number): Promise<Certificate[]> {\n    return Array.from(this.certificates.values()).filter(\n      (certificate) => certificate.participantId === participantId,\n    );\n  }\n\n  async createCertificate(insertCertificate: InsertCertificate): Promise<Certificate> {\n    const id = this.currentCertificateId++;\n    const certificate: Certificate = { \n      ...insertCertificate, \n      id,\n      expiryDate: insertCertificate.expiryDate ?? null,\n      certificatePath: insertCertificate.certificatePath ?? null\n    };\n    this.certificates.set(id, certificate);\n    return certificate;\n  }\n\n  async updateCertificate(id: number, updateData: Partial<InsertCertificate>): Promise<Certificate | undefined> {\n    const existingCertificate = this.certificates.get(id);\n    if (!existingCertificate) return undefined;\n    \n    const updatedCertificate = { ...existingCertificate, ...updateData };\n    this.certificates.set(id, updatedCertificate);\n    return updatedCertificate;\n  }\n\n  async deleteCertificate(id: number): Promise<boolean> {\n    return this.certificates.delete(id);\n  }\n\n  // Contact methods\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = this.currentContactId++;\n    const contact: Contact = { \n      ...insertContact, \n      id,\n      phone: insertContact.phone ?? null,\n      status: insertContact.status ?? \"pending\"\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getAllContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  // Specialized operations\n  async verifyCertificate(data: CertificateVerification): Promise<{ \n    valid: boolean;\n    certificate?: Certificate;\n    participant?: Participant;\n    trainingProgram?: TrainingProgram; \n  }> {\n    const certificate = await this.getCertificateByCertificateId(data.certificateId);\n    if (!certificate) return { valid: false };\n    \n    const participant = await this.getParticipant(certificate.participantId);\n    if (!participant || participant.fullName.toLowerCase() !== data.participantName.toLowerCase()) {\n      return { valid: false };\n    }\n    \n    const trainingProgram = await this.getTrainingProgram(certificate.trainingProgramId);\n    if (!trainingProgram) return { valid: false };\n    \n    return {\n      valid: true,\n      certificate,\n      participant,\n      trainingProgram\n    };\n  }\n\n  async checkParticipantStatus(data: StatusCheck): Promise<{\n    valid: boolean;\n    participant?: Participant;\n    certificates?: Certificate[];\n    trainingPrograms?: TrainingProgram[];\n  }> {\n    const participant = await this.getParticipantByParticipantId(data.participantId);\n    if (!participant || participant.email.toLowerCase() !== data.email.toLowerCase()) {\n      return { valid: false };\n    }\n    \n    const certificates = await this.getCertificatesByParticipantId(participant.id);\n    \n    const trainingProgramIds = certificates.map(cert => cert.trainingProgramId);\n    const trainingPrograms = await Promise.all(\n      trainingProgramIds.map(id => this.getTrainingProgram(id))\n    );\n    \n    return {\n      valid: true,\n      participant,\n      certificates,\n      trainingPrograms: trainingPrograms.filter(Boolean) as TrainingProgram[]\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15015},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/cloudflare-api.ts":{"content":"/**\n * This file contains the interface and type definitions for interacting with the Cloudflare Workers API\n * In a production environment, this would be replaced with actual Cloudflare Workers API calls\n */\n\nimport { \n  TrainingProgram, \n  Service, \n  Participant, \n  Certificate,\n  Contact,\n  CertificateVerification,\n  StatusCheck\n} from './schema';\n\n// Response types\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\nexport interface CertificateVerificationResult {\n  certificate: {\n    certificateId: string;\n    issueDate: string;\n    status: 'active' | 'expired' | 'revoked';\n    certificatePath?: string;\n  };\n  participant: {\n    name: string;\n    id: number;\n  };\n  training: {\n    name: string;\n    id: number;\n  };\n}\n\nexport interface ParticipantStatusResult {\n  participant: {\n    participantId: string;\n    name: string;\n    status: 'active' | 'completed' | 'inactive';\n  };\n  enrolledPrograms: {\n    id: number;\n    name: string;\n    completionDate?: string;\n    certificateId?: string;\n  }[];\n}\n\n// Cloudflare D1 schema \nexport const D1_SCHEMA = `\n-- Users Table\nCREATE TABLE IF NOT EXISTS users (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  username TEXT NOT NULL UNIQUE,\n  password TEXT NOT NULL,\n  full_name TEXT NOT NULL,\n  email TEXT NOT NULL,\n  phone TEXT,\n  role TEXT NOT NULL DEFAULT 'user'\n);\n\n-- Services Table\nCREATE TABLE IF NOT EXISTS services (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title TEXT NOT NULL,\n  description TEXT NOT NULL,\n  icon TEXT NOT NULL,\n  features TEXT NOT NULL\n);\n\n-- Training Programs Table\nCREATE TABLE IF NOT EXISTS training_programs (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  title TEXT NOT NULL,\n  description TEXT NOT NULL,\n  category TEXT NOT NULL,\n  duration TEXT NOT NULL,\n  price INTEGER NOT NULL,\n  image_path TEXT\n);\n\n-- Participants Table\nCREATE TABLE IF NOT EXISTS participants (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  participant_id TEXT NOT NULL UNIQUE,\n  full_name TEXT NOT NULL,\n  email TEXT NOT NULL,\n  phone TEXT,\n  training_program_id INTEGER NOT NULL,\n  enrollment_date TIMESTAMP NOT NULL,\n  status TEXT NOT NULL DEFAULT 'active',\n  FOREIGN KEY (training_program_id) REFERENCES training_programs(id)\n);\n\n-- Certificates Table\nCREATE TABLE IF NOT EXISTS certificates (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  certificate_id TEXT NOT NULL UNIQUE,\n  participant_id INTEGER NOT NULL,\n  training_program_id INTEGER NOT NULL,\n  issue_date TIMESTAMP NOT NULL,\n  expiry_date TIMESTAMP,\n  certificate_path TEXT,\n  FOREIGN KEY (participant_id) REFERENCES participants(id),\n  FOREIGN KEY (training_program_id) REFERENCES training_programs(id)\n);\n\n-- Contacts Table\nCREATE TABLE IF NOT EXISTS contacts (\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\n  full_name TEXT NOT NULL,\n  email TEXT NOT NULL,\n  phone TEXT,\n  subject TEXT NOT NULL,\n  message TEXT NOT NULL,\n  created_at TIMESTAMP NOT NULL,\n  status TEXT NOT NULL DEFAULT 'pending'\n);\n\n-- Insert initial services data\nINSERT INTO services (title, description, icon, features)\nVALUES \n('Consultancy Services', 'Our expert consultants provide strategic guidance to optimize your business operations, improve efficiency, and drive growth.', 'chart-line', '[\"Business strategy development\", \"Operational efficiency analysis\", \"Growth planning and implementation\"]'),\n('Audit Preparation', 'Comprehensive audit preparation services to ensure your business is fully compliant and audit-ready.', 'file-invoice', '[\"Financial statement preparation\", \"Compliance documentation\", \"Risk assessment and mitigation\"]');\n\n-- Insert initial training programs data\nINSERT INTO training_programs (title, description, category, duration, price, image_path)\nVALUES \n('Strategic Business Planning', 'Learn how to develop and implement effective business strategies.', 'Business', '4 weeks', 12500, '/images/training1.jpg'),\n('Financial Management', 'Master financial planning, analysis, and reporting for business.', 'Finance', '6 weeks', 15000, '/images/training2.jpg'),\n('Executive Leadership', 'Develop essential leadership skills for executive positions.', 'Leadership', '8 weeks', 20000, '/images/training3.jpg');\n`;\n","size_bytes":4158},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User schema\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\").default(\"user\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  fullName: true,\n  email: true,\n  phone: true,\n  role: true,\n});\n\n// Service schema\nexport const services = pgTable(\"services\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  features: jsonb(\"features\").notNull(),\n});\n\nexport const insertServiceSchema = createInsertSchema(services).pick({\n  title: true,\n  description: true,\n  icon: true,\n  features: true,\n});\n\n// Training Program schema\nexport const trainingPrograms = pgTable(\"training_programs\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(), // SEO-friendly URL slug\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  duration: text(\"duration\").notNull(),\n  price: integer(\"price\").notNull(), // Keep for backward compatibility (will be online_price)\n  online_price: integer(\"online_price\"),\n  offline_price: integer(\"offline_price\"),\n  delivery_mode: text(\"delivery_mode\").default(\"both\").notNull(), // 'online', 'offline', 'both'\n  image_path: text(\"image_path\"),\n});\n\nexport const insertTrainingProgramSchema = createInsertSchema(trainingPrograms).pick({\n  title: true,\n  slug: true,\n  description: true,\n  category: true,\n  duration: true,\n  price: true,\n  online_price: true,\n  offline_price: true,\n  delivery_mode: true,\n  image_path: true,\n});\n\n// Participant schema\nexport const participants = pgTable(\"participants\", {\n  id: serial(\"id\").primaryKey(),\n  participantId: text(\"participant_id\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  trainingProgramId: integer(\"training_program_id\").notNull(),\n  enrollmentDate: timestamp(\"enrollment_date\").notNull(),\n  status: text(\"status\").default(\"active\").notNull(),\n});\n\nexport const insertParticipantSchema = createInsertSchema(participants).pick({\n  participantId: true,\n  fullName: true,\n  email: true,\n  phone: true,\n  trainingProgramId: true,\n  enrollmentDate: true,\n  status: true,\n});\n\n// Certificate schema\nexport const certificates = pgTable(\"certificates\", {\n  id: serial(\"id\").primaryKey(),\n  certificateId: text(\"certificate_id\").notNull().unique(),\n  participantId: integer(\"participant_id\").notNull(),\n  trainingProgramId: integer(\"training_program_id\").notNull(),\n  issueDate: timestamp(\"issue_date\").notNull(),\n  expiryDate: timestamp(\"expiry_date\"),\n  certificatePath: text(\"certificate_path\"),\n});\n\nexport const insertCertificateSchema = createInsertSchema(certificates).pick({\n  certificateId: true,\n  participantId: true,\n  trainingProgramId: true,\n  issueDate: true,\n  expiryDate: true,\n  certificatePath: true,\n});\n\n// Contact schema\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull(),\n  status: text(\"status\").default(\"pending\").notNull(),\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).pick({\n  fullName: true,\n  email: true,\n  phone: true,\n  subject: true,\n  message: true,\n  createdAt: true,\n  status: true,\n});\n\n// Define types from schemas\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Service = typeof services.$inferSelect;\n\nexport type InsertTrainingProgram = z.infer<typeof insertTrainingProgramSchema>;\nexport type TrainingProgram = typeof trainingPrograms.$inferSelect;\n\nexport type InsertParticipant = z.infer<typeof insertParticipantSchema>;\nexport type Participant = typeof participants.$inferSelect;\n\nexport type InsertCertificate = z.infer<typeof insertCertificateSchema>;\nexport type Certificate = typeof certificates.$inferSelect;\n\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n\n// Certificate verification schema\nexport const certificateVerificationSchema = z.object({\n  certificateId: z.string().min(1, \"Certificate ID is required\"),\n  participantName: z.string().min(1, \"Participant name is required\"),\n});\n\nexport type CertificateVerification = z.infer<typeof certificateVerificationSchema>;\n\n// Status check schema\nexport const statusCheckSchema = z.object({\n  participantId: z.string().min(1, \"Participant ID is required\"),\n  email: z.string().email(\"Invalid email address\"),\n});\n\nexport type StatusCheck = z.infer<typeof statusCheckSchema>;\n\n// Contact form schema\nexport const contactFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  subject: z.string().min(1, \"Subject is required\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\nexport type ContactForm = z.infer<typeof contactFormSchema>;\n","size_bytes":5651},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport NotFound from \"@/pages/not-found\";\nimport Header from \"@/components/layout/Header\";\nimport Footer from \"@/components/layout/Footer\";\nimport Home from \"@/pages/home\";\nimport TrainingPrograms from \"@/pages/training-programs\";\nimport TrainingProgramDetails from \"@/pages/training-program-details\";\nimport ServiceDetails from \"@/pages/service-details\";\nimport VerifyCertificate from \"@/pages/verify-certificate\";\nimport Contact from \"@/pages/contact\";\nimport AboutUs from \"@/pages/about\";\nimport AdminDashboard from \"@/pages/admin\";\nimport CreateService from \"@/pages/admin/create-service\";\nimport EditService from \"@/pages/admin/edit-service\";\nimport CreateTrainingProgram from \"@/pages/admin/create-training-program\";\nimport EditTrainingProgram from \"@/pages/admin/edit-training-program\";\nimport CreateParticipant from \"@/pages/admin/create-participant\";\nimport EditParticipant from \"@/pages/admin/edit-participant\";\nimport CreateCertificate from \"@/pages/admin/create-certificate\";\nimport EditCertificate from \"@/pages/admin/edit-certificate\";\nimport DeleteConfirmation from \"@/pages/admin/delete-confirmation\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  // Determine if we're on the admin page using wouter's useLocation\n  const [location, setLocation] = useLocation();\n  const isAdminRoute = location.startsWith('/admin');\n  \n  // Handle route changes and refresh issues\n  useEffect(() => {\n    // Store the current path in the route cache on each route change\n    if (window.routeCache) {\n      window.routeCache.currentPath = location;\n    }\n    \n    // Scroll to top when navigating between routes\n    window.scrollTo(0, 0);\n    \n    // If we're on a refresh and have a path in cache, make sure we're on the right route\n    const path = window.location.pathname;\n    if (path !== '/' && path !== location) {\n      setLocation(path);\n    }\n  }, [location, setLocation]);\n  \n  // If on admin page, render without header/footer\n  if (isAdminRoute) {\n    return (\n      <div className=\"min-h-screen min-h-screen-dynamic\">\n        <main className=\"flex-grow\">\n          <Switch>\n            <Route path=\"/admin\" component={AdminDashboard} />\n            <Route path=\"/admin/services/create\" component={CreateService} />\n            <Route path=\"/admin/services/edit/:id\" component={EditService} />\n            <Route path=\"/admin/training-programs/create\" component={CreateTrainingProgram} />\n            <Route path=\"/admin/training-programs/edit/:id\" component={EditTrainingProgram} />\n            <Route path=\"/admin/participants/create\" component={CreateParticipant} />\n            <Route path=\"/admin/participants/edit/:id\" component={EditParticipant} />\n            <Route path=\"/admin/certificates/create\" component={CreateCertificate} />\n            <Route path=\"/admin/certificates/edit/:id\" component={EditCertificate} />\n            <Route path=\"/admin/delete/:type/:id\" component={DeleteConfirmation} />\n            <Route component={AdminDashboard} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n  \n  // For non-admin routes, render with header and footer\n  return (\n    <div className=\"flex flex-col min-h-screen min-h-screen-dynamic\">\n      <Header />\n      <main className=\"flex-grow\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/about\" component={AboutUs} />\n          <Route path=\"/training-programs\" component={TrainingPrograms} />\n          <Route path=\"/training-programs/:id\" component={TrainingProgramDetails} />\n          <Route path=\"/services/:id\" component={ServiceDetails} />\n          <Route path=\"/verify-certificate\" component={VerifyCertificate} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4136},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom utility classes for mobile-responsive design */\n@layer utilities {\n  /* Use CSS variable for viewport height to handle mobile browsers better */\n  .h-screen-dynamic {\n    height: 100vh; /* Fallback */\n    height: calc(var(--vh, 1vh) * 100);\n  }\n  \n  .min-h-screen-dynamic {\n    min-height: 100vh; /* Fallback */\n    min-height: calc(var(--vh, 1vh) * 100);\n  }\n  \n  /* Mobile-friendly max widths for content containers */\n  .max-w-content-sm {\n    max-width: calc(100vw - 2rem);\n  }\n  \n  .max-w-content-md {\n    max-width: calc(100vw - 3rem);\n  }\n  \n  /* Better text sizing for mobile */\n  .text-responsive {\n    font-size: clamp(1rem, 4vw, 1.25rem);\n  }\n  \n  .heading-responsive {\n    font-size: clamp(1.5rem, 6vw, 2.25rem);\n  }\n  \n  /* Fix for iOS Safari 100vh issue */\n  @supports (-webkit-touch-callout: none) {\n    .h-screen, .min-h-screen {\n      height: -webkit-fill-available;\n    }\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground scroll-smooth;\n  }\n\n  img {\n    @apply max-w-full h-auto;\n  }\n  \n  /* Global color variables */\n  :root {\n    --primary-dark: hsl(210, 85%, 17%);\n    --primary-light: hsl(210, 75%, 85%);\n    --accent-color: hsl(280, 65%, 60%);\n    --success-color: hsl(142, 76%, 36%);\n    --success-light: hsl(142, 75%, 96%);\n    --warning-color: hsl(45, 93%, 47%);\n    --warning-light: hsl(45, 93%, 96%);\n    --danger-color: hsl(354, 70%, 54%);\n    --danger-light: hsl(354, 70%, 96%);\n    --info-color: hsl(200, 75%, 50%);\n    --info-light: hsl(200, 75%, 96%);\n  }\n\n  /* Improved focus styles for accessibility */\n  :focus {\n    @apply outline-none ring-2 ring-primary/50 ring-offset-2 ring-offset-background;\n  }\n  \n  /* Smooth scrolling for anchor links */\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  /* Grid background pattern */\n  .bg-grid-white {\n    background-image: linear-gradient(to right, rgba(255, 255, 255, 0.1) 1px, transparent 1px),\n      linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);\n  }\n  \n  /* Button and UI element styles */\n  .btn-gradient {\n    @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800;\n  }\n  \n  .card-highlight {\n    @apply bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300;\n  }\n  \n  .bg-primary-dark {\n    background-color: var(--primary-dark);\n  }\n  \n  /* Professional styling elements */\n  .text-gradient {\n    @apply bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-blue-600;\n  }\n  \n  .border-gradient {\n    @apply border border-transparent bg-gradient-to-r from-blue-400 to-blue-600 bg-origin-border;\n  }\n  \n  /* Container modifications for better symmetry */\n  .container {\n    @apply mx-auto w-full max-w-[1280px] px-4 sm:px-6 lg:px-8;\n  }\n  \n  /* Symmetrical layouts */\n  .symmetrical-grid {\n    @apply grid grid-cols-1 gap-x-8 gap-y-8 md:grid-cols-2 lg:grid-cols-3;\n  }\n  \n  .symmetrical-grid-2 {\n    @apply grid grid-cols-1 gap-x-8 gap-y-8 md:grid-cols-2;\n  }\n}\n\n@layer utilities {\n  /* Responsive text utilities */\n  .text-responsive {\n    @apply text-sm sm:text-base md:text-lg;\n  }\n\n  .heading-responsive {\n    @apply text-xl sm:text-2xl md:text-3xl lg:text-4xl;\n  }\n  \n  .subtitle-responsive {\n    @apply text-base sm:text-lg md:text-xl text-gray-600;\n  }\n\n  /* Spacing utilities for common responsive patterns */\n  .p-responsive {\n    @apply p-4 sm:p-6 md:p-8 lg:p-10;\n  }\n\n  .py-responsive {\n    @apply py-8 sm:py-12 md:py-16 lg:py-20;\n  }\n\n  .px-responsive {\n    @apply px-4 sm:px-6 lg:px-8;\n  }\n\n  .m-responsive {\n    @apply m-4 sm:m-6 md:m-8 lg:m-10;\n  }\n\n  .my-responsive {\n    @apply my-6 sm:my-8 md:my-10 lg:my-12;\n  }\n\n  .mx-responsive {\n    @apply mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8;\n  }\n  \n  /* Symmetrical spacing */\n  .section-spacing {\n    @apply py-10 sm:py-16 md:py-20 lg:py-24;\n  }\n  \n  .content-spacing {\n    @apply mb-8 sm:mb-10 md:mb-12 lg:mb-16;\n  }\n  \n  /* Professional utility classes */\n  .shadow-soft {\n    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);\n  }\n  \n  .shadow-card {\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.05), 0 4px 6px -2px rgba(0, 0, 0, 0.025);\n  }\n  \n  .shadow-card-hover {\n    transition: box-shadow 0.3s ease, transform 0.3s ease;\n  }\n  \n  .shadow-card-hover:hover {\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    transform: translateY(-2px);\n  }\n  \n  .transition-fast {\n    @apply transition-all duration-200 ease-in-out;\n  }\n  \n  .transition-medium {\n    @apply transition-all duration-300 ease-in-out;\n  }\n  \n  .glass-effect {\n    @apply bg-white bg-opacity-10 backdrop-blur-sm border border-white border-opacity-20;\n  }\n  \n  .glass-card {\n    @apply bg-white bg-opacity-90 backdrop-blur-md border border-gray-100 shadow-soft;\n  }\n  \n  /* Animation utilities */\n  .fade-in {\n    animation: fadeIn 0.5s ease forwards;\n  }\n  \n  .slide-up {\n    animation: slideUp 0.5s ease forwards;\n  }\n  \n  .slide-in-right {\n    animation: slideInRight 0.5s ease forwards;\n  }\n  \n  .pulse-slow {\n    animation: pulse 3s infinite;\n  }\n  \n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  @keyframes slideUp {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n  \n  @keyframes slideInRight {\n    from { opacity: 0; transform: translateX(20px); }\n    to { opacity: 1; transform: translateX(0); }\n  }\n  \n  @keyframes pulse {\n    0% { opacity: 0.6; }\n    50% { opacity: 1; }\n    100% { opacity: 0.6; }\n  }\n}","size_bytes":5632},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { Toaster } from \"@/components/ui/toaster\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <>\n    <App />\n    <Toaster />\n  </>\n);\n","size_bytes":241},"client/src/types.d.ts":{"content":"// Type definitions for the Bhumi Consultancy website\n\n// Extend the Window interface to include our routeCache\ninterface Window {\n  routeCache?: {\n    currentPath: string;\n  };\n}","size_bytes":179},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/cloudflare-api.ts":{"content":"import { CertificateVerification, StatusCheck, ContactForm, Service, TrainingProgram, Participant, Certificate, Contact, InsertParticipant, InsertCertificate } from \"@shared/schema\";\nimport { ApiResponse, CertificateVerificationResult, ParticipantStatusResult } from \"@shared/cloudflare-api\";\nimport { apiRequest } from \"./queryClient\";\n\n// API authentication code\nconst API_CODE = import.meta.env.VITE_API_CODE;\n\n// Function to verify certificate\nexport async function verifyCertificate(data: CertificateVerification): Promise<ApiResponse<CertificateVerificationResult>> {\n  try {\n    const response = await apiRequest('POST', '/api/verify-certificate', data);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while verifying the certificate\"\n    };\n  }\n}\n\n// Function to check participant status\nexport async function checkParticipantStatus(data: StatusCheck): Promise<ApiResponse<ParticipantStatusResult>> {\n  try {\n    const response = await apiRequest('POST', '/api/check-status', data);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while checking participant status\"\n    };\n  }\n}\n\n// Function to submit contact form\nexport async function submitContactForm(data: ContactForm): Promise<ApiResponse<{ id: number }>> {\n  try {\n    const response = await apiRequest('POST', '/api/contact', {\n      ...data,\n      createdAt: new Date().toISOString(),\n      status: \"pending\"\n    });\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while submitting the form\"\n    };\n  }\n}\n\n// Function to create a new service (requires authentication)\nexport async function createService(data: Omit<Service, 'id'>): Promise<ApiResponse<Service>> {\n  try {\n    const response = await apiRequest('POST', '/api/services/create', data, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while creating the service\"\n    };\n  }\n}\n\n// Function to update a service (requires authentication)\nexport async function updateService(id: number, data: Partial<Omit<Service, 'id'>>): Promise<ApiResponse<Service>> {\n  try {\n    const response = await apiRequest('PUT', `/api/services/${id}`, data, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while updating the service\"\n    };\n  }\n}\n\n// Function to delete a service (requires authentication)\nexport async function deleteService(id: number): Promise<ApiResponse<{message: string}>> {\n  try {\n    const response = await apiRequest('DELETE', `/api/services/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while deleting the service\"\n    };\n  }\n}\n\n// Function to create a new training program (requires authentication)\nexport async function createTrainingProgram(data: Omit<TrainingProgram, 'id'>): Promise<ApiResponse<TrainingProgram>> {\n  try {\n    // Make sure image_path and imagePath are properly handled\n    const processedData = {\n      ...data,\n      // Explicitly set image_path to null if it's empty string\n      image_path: data.image_path || null,\n      // Also set imagePath for backward compatibility with Cloudflare worker\n      imagePath: data.image_path || null\n    };\n    \n    console.log('Creating new training program with data:', processedData);\n    \n    const response = await apiRequest('POST', '/api/training-programs/create', processedData, true);\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating training program:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while creating the training program\"\n    };\n  }\n}\n\n// Function to update a training program (requires authentication)\nexport async function updateTrainingProgram(id: number, data: Partial<Omit<TrainingProgram, 'id'>>): Promise<ApiResponse<TrainingProgram>> {\n  try {\n    // Make sure image_path and imagePath are properly handled\n    const processedData = {\n      ...data,\n      // Explicitly set image_path to null if it's empty string\n      ...(data.image_path !== undefined && { \n        image_path: data.image_path || null,\n        // Also set imagePath for backward compatibility with Cloudflare worker\n        imagePath: data.image_path || null \n      }),\n      // Ensure price fields are properly included\n      ...(data.price !== undefined && { price: Number(data.price) }),\n      ...(data.online_price !== undefined && { online_price: Number(data.online_price) }),\n      ...(data.offline_price !== undefined && { offline_price: Number(data.offline_price) })\n    };\n    \n    console.log('Sending update to API for program ID:', id, 'with data:', processedData);\n    \n    const response = await apiRequest('PUT', `/api/training-programs/${id}`, processedData, true);\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating training program:', error);\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while updating the training program\"\n    };\n  }\n}\n\n// Function to delete a training program (requires authentication)\nexport async function deleteTrainingProgram(id: number): Promise<ApiResponse<{message: string}>> {\n  try {\n    const response = await apiRequest('DELETE', `/api/training-programs/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while deleting the training program\"\n    };\n  }\n}\n\n// Participant Management Functions\n\n// Function to get all participants (requires authentication)\nexport async function getAllParticipants(): Promise<ApiResponse<Participant[]>> {\n  try {\n    const response = await apiRequest('GET', '/api/participants', undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while fetching participants\"\n    };\n  }\n}\n\n// Function to get participant by ID (requires authentication)\nexport async function getParticipant(id: number): Promise<ApiResponse<Participant>> {\n  try {\n    const response = await apiRequest('GET', `/api/participants/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while fetching the participant\"\n    };\n  }\n}\n\n// Function to create a new participant (requires authentication)\nexport async function createParticipant(data: InsertParticipant): Promise<ApiResponse<Participant>> {\n  try {\n    const response = await apiRequest('POST', '/api/participants/create', data, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while creating the participant\"\n    };\n  }\n}\n\n// Function to update a participant (requires authentication)\nexport async function updateParticipant(id: number, data: Partial<InsertParticipant>): Promise<ApiResponse<Participant>> {\n  try {\n    const response = await apiRequest('PUT', `/api/participants/${id}`, data, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while updating the participant\"\n    };\n  }\n}\n\n// Function to delete a participant (requires authentication)\nexport async function deleteParticipant(id: number): Promise<ApiResponse<{message: string}>> {\n  try {\n    const response = await apiRequest('DELETE', `/api/participants/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while deleting the participant\"\n    };\n  }\n}\n\n// Certificate Management Functions\n\n// Function to get all certificates (requires authentication)\nexport async function getAllCertificates(): Promise<ApiResponse<Certificate[]>> {\n  try {\n    const response = await apiRequest('GET', '/api/certificates', undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while fetching certificates\"\n    };\n  }\n}\n\n// Function to get certificate by ID (requires authentication)\nexport async function getCertificate(id: number): Promise<ApiResponse<Certificate>> {\n  try {\n    const response = await apiRequest('GET', `/api/certificates/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while fetching the certificate\"\n    };\n  }\n}\n\n// Function to create a new certificate (requires authentication)\nexport async function createCertificate(data: InsertCertificate): Promise<ApiResponse<Certificate>> {\n  try {\n    const response = await apiRequest('POST', '/api/certificates/create', data, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while creating the certificate\"\n    };\n  }\n}\n\n// Function to update a certificate (requires authentication)\nexport async function updateCertificate(id: number, data: Partial<InsertCertificate>): Promise<ApiResponse<Certificate>> {\n  try {\n    const response = await apiRequest('PUT', `/api/certificates/${id}`, data, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while updating the certificate\"\n    };\n  }\n}\n\n// Function to delete a certificate (requires authentication)\nexport async function deleteCertificate(id: number): Promise<ApiResponse<{message: string}>> {\n  try {\n    const response = await apiRequest('DELETE', `/api/certificates/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while deleting the certificate\"\n    };\n  }\n}\n\n// Function to download a certificate (requires authentication for admin)\nexport async function downloadCertificate(certificateId: string, requireAuth: boolean = true): Promise<ApiResponse<{ url: string, downloadUrl: string }>> {\n  try {\n    const response = await apiRequest('GET', `/api/certificates/download/${certificateId}`, undefined, requireAuth);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while downloading the certificate\"\n    };\n  }\n}\n\n// Function to download a certificate (public access)\nexport async function downloadPublicCertificate(certificateId: string): Promise<ApiResponse<{ url: string, downloadUrl: string }>> {\n  try {\n    const response = await apiRequest('GET', `/api/certificates/download/${certificateId}`, undefined, false);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while downloading the certificate\"\n    };\n  }\n}\n\n// Contact Management Functions\n\n// Function to get all contacts (requires authentication)\nexport async function getAllContacts(): Promise<ApiResponse<Contact[]>> {\n  try {\n    const response = await apiRequest('GET', '/api/contacts', undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while fetching contacts\"\n    };\n  }\n}\n\n// Function to update contact status (requires authentication)\nexport async function updateContactStatus(id: number, status: string): Promise<ApiResponse<Contact>> {\n  try {\n    const response = await apiRequest('PUT', `/api/contacts/${id}`, { status }, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while updating the contact status\"\n    };\n  }\n}\n\n// Function to delete a contact (requires authentication)\nexport async function deleteContact(id: number): Promise<ApiResponse<{message: string}>> {\n  try {\n    const response = await apiRequest('DELETE', `/api/contacts/${id}`, undefined, true);\n    return await response.json();\n  } catch (error) {\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"An error occurred while deleting the contact\"\n    };\n  }\n}\n\n// Cloudflare Worker API Documentation for UI display\nexport const cloudflareWorkerDocs = {\n  title: \"Cloudflare Worker API Documentation\",\n  description: \"This documentation outlines the API endpoints available in the Cloudflare Worker for Bhumi Consultancy. Some endpoints require authentication via the X-API-Code header.\",\n  authentication: {\n    required: \"For POST (create), PUT, PATCH and DELETE operations\",\n    header: \"X-API-Code\",\n    value: \"[CONFIGURED_VIA_ENV]\"\n  },\n  endpointGroups: [\n    {\n      name: \"Services\",\n      endpoints: [\n        {\n          path: \"/api/services\",\n          method: \"GET\",\n          description: \"Get all services\",\n          response: \"Array of service objects\"\n        },\n        {\n          path: \"/api/services/create\",\n          method: \"POST\",\n          description: \"Create a new service (requires authentication)\",\n          body: \"{ title: string, description: string, icon: string, features: string[] }\",\n          response: \"Created service object\",\n          protected: true\n        },\n        {\n          path: \"/api/services/:id\",\n          method: \"PUT/PATCH\",\n          description: \"Update an existing service (requires authentication)\",\n          body: \"{ title?: string, description?: string, icon?: string, features?: string[] }\",\n          response: \"Updated service object\",\n          protected: true\n        },\n        {\n          path: \"/api/services/:id\",\n          method: \"DELETE\",\n          description: \"Delete a service (requires authentication)\",\n          response: \"Success message\",\n          protected: true\n        }\n      ]\n    },\n    {\n      name: \"Training Programs\",\n      endpoints: [\n        {\n          path: \"/api/training-programs\",\n          method: \"GET\",\n          description: \"Get all training programs\",\n          response: \"Array of training program objects\"\n        },\n        {\n          path: \"/api/training-programs/:id\",\n          method: \"GET\",\n          description: \"Get a specific training program by ID\",\n          response: \"Training program object\"\n        },\n        {\n          path: \"/api/training-programs/create\",\n          method: \"POST\",\n          description: \"Create a new training program (requires authentication)\",\n          body: \"{ title: string, description: string, category: string, duration: string, price: number, imagePath?: string }\",\n          response: \"Created training program object\",\n          protected: true\n        },\n        {\n          path: \"/api/training-programs/:id\",\n          method: \"PUT/PATCH\",\n          description: \"Update an existing training program (requires authentication)\",\n          body: \"{ title?: string, description?: string, category?: string, duration?: string, price?: number, imagePath?: string }\",\n          response: \"Updated training program object\",\n          protected: true\n        },\n        {\n          path: \"/api/training-programs/:id\",\n          method: \"DELETE\",\n          description: \"Delete a training program (requires authentication). Will fail if participants are enrolled.\",\n          response: \"Success message\",\n          protected: true\n        }\n      ]\n    },\n    {\n      name: \"Participants\",\n      endpoints: [\n        {\n          path: \"/api/participants\",\n          method: \"GET\",\n          description: \"Get all participants (requires authentication)\",\n          response: \"Array of participant objects\",\n          protected: true\n        },\n        {\n          path: \"/api/participants/:id\",\n          method: \"GET\",\n          description: \"Get a specific participant by ID (requires authentication)\",\n          response: \"Participant object\",\n          protected: true\n        },\n        {\n          path: \"/api/participants/create\",\n          method: \"POST\",\n          description: \"Create a new participant (requires authentication)\",\n          body: \"{ participantId: string, fullName: string, email: string, phone?: string, trainingProgramId: number, enrollmentDate: string, status: string }\",\n          response: \"Created participant object\",\n          protected: true\n        },\n        {\n          path: \"/api/participants/:id\",\n          method: \"PUT/PATCH\",\n          description: \"Update an existing participant (requires authentication)\",\n          body: \"{ participantId?: string, fullName?: string, email?: string, phone?: string, trainingProgramId?: number, enrollmentDate?: string, status?: string }\",\n          response: \"Updated participant object\",\n          protected: true\n        },\n        {\n          path: \"/api/participants/:id\",\n          method: \"DELETE\",\n          description: \"Delete a participant (requires authentication). Will fail if certificates exist.\",\n          response: \"Success message\",\n          protected: true\n        }\n      ]\n    },\n    {\n      name: \"Certificates\",\n      endpoints: [\n        {\n          path: \"/api/certificates\",\n          method: \"GET\",\n          description: \"Get all certificates (requires authentication)\",\n          response: \"Array of certificate objects\",\n          protected: true\n        },\n        {\n          path: \"/api/certificates/:id\",\n          method: \"GET\",\n          description: \"Get a specific certificate by ID (requires authentication)\",\n          response: \"Certificate object\",\n          protected: true\n        },\n        {\n          path: \"/api/certificates/create\",\n          method: \"POST\",\n          description: \"Create a new certificate (requires authentication)\",\n          body: \"{ certificateId: string, participantId: number, trainingProgramId: number, issueDate: string, expiryDate?: string, certificatePath?: string }\",\n          response: \"Created certificate object\",\n          protected: true\n        },\n        {\n          path: \"/api/certificates/:id\",\n          method: \"PUT/PATCH\",\n          description: \"Update an existing certificate (requires authentication)\",\n          body: \"{ certificateId?: string, participantId?: number, trainingProgramId?: number, issueDate?: string, expiryDate?: string, certificatePath?: string }\",\n          response: \"Updated certificate object\",\n          protected: true\n        },\n        {\n          path: \"/api/certificates/:id\",\n          method: \"DELETE\",\n          description: \"Delete a certificate (requires authentication)\",\n          response: \"Success message\",\n          protected: true\n        },\n        {\n          path: \"/api/certificates/download/:certificateId\",\n          method: \"GET\",\n          description: \"Get download URL for a certificate (public access, no authentication required)\",\n          response: \"Certificate download URL object\",\n          protected: false\n        }\n      ]\n    },\n    {\n      name: \"Certificate Verification\",\n      endpoints: [\n        {\n          path: \"/api/verify-certificate\",\n          method: \"POST\",\n          description: \"Verify a certificate's authenticity\",\n          body: \"{ certificateId: string, participantName: string }\",\n          response: \"Certificate verification result\"\n        }\n      ]\n    },\n    {\n      name: \"Participant Status\",\n      endpoints: [\n        {\n          path: \"/api/check-status\",\n          method: \"POST\",\n          description: \"Check a participant's training status\",\n          body: \"{ participantId: string, email: string }\",\n          response: \"Participant status result with enrolled programs\"\n        }\n      ]\n    },\n    {\n      name: \"Contacts\",\n      endpoints: [\n        {\n          path: \"/api/contacts\",\n          method: \"GET\",\n          description: \"Get all contact submissions (requires authentication)\",\n          response: \"Array of contact objects\",\n          protected: true\n        },\n        {\n          path: \"/api/contacts/:id\",\n          method: \"PUT\",\n          description: \"Update contact status (requires authentication)\",\n          body: \"{ status: string }\",\n          response: \"Updated contact object\",\n          protected: true\n        },\n        {\n          path: \"/api/contact\",\n          method: \"POST\",\n          description: \"Submit a contact form\",\n          body: \"{ name: string, email: string, phone?: string, subject: string, message: string }\",\n          response: \"Contact submission confirmation\"\n        }\n      ]\n    }\n  ],\n  dbSchema: {\n    tables: [\n      {\n        name: \"users\",\n        description: \"Store user information for admin access\",\n        columns: [\n          { name: \"id\", type: \"INTEGER\", description: \"Primary key\" },\n          { name: \"username\", type: \"TEXT\", description: \"Unique username\" },\n          { name: \"password\", type: \"TEXT\", description: \"Hashed password\" },\n          { name: \"full_name\", type: \"TEXT\", description: \"User's full name\" },\n          { name: \"email\", type: \"TEXT\", description: \"User's email address\" },\n          { name: \"phone\", type: \"TEXT\", description: \"User's phone number (optional)\" },\n          { name: \"role\", type: \"TEXT\", description: \"User role (default: 'user')\" }\n        ]\n      },\n      {\n        name: \"services\",\n        description: \"Store service information\",\n        columns: [\n          { name: \"id\", type: \"INTEGER\", description: \"Primary key\" },\n          { name: \"title\", type: \"TEXT\", description: \"Service title\" },\n          { name: \"description\", type: \"TEXT\", description: \"Service description\" },\n          { name: \"icon\", type: \"TEXT\", description: \"Service icon name\" },\n          { name: \"features\", type: \"TEXT\", description: \"JSON array of features\" }\n        ]\n      },\n      {\n        name: \"training_programs\",\n        description: \"Store training program information\",\n        columns: [\n          { name: \"id\", type: \"INTEGER\", description: \"Primary key\" },\n          { name: \"title\", type: \"TEXT\", description: \"Program title\" },\n          { name: \"description\", type: \"TEXT\", description: \"Program description\" },\n          { name: \"category\", type: \"TEXT\", description: \"Program category\" },\n          { name: \"duration\", type: \"TEXT\", description: \"Program duration\" },\n          { name: \"price\", type: \"INTEGER\", description: \"Program price\" },\n          { name: \"image_path\", type: \"TEXT\", description: \"Path to program image (optional)\" }\n        ]\n      },\n      {\n        name: \"participants\",\n        description: \"Store participant information\",\n        columns: [\n          { name: \"id\", type: \"INTEGER\", description: \"Primary key\" },\n          { name: \"participant_id\", type: \"TEXT\", description: \"Unique participant ID\" },\n          { name: \"full_name\", type: \"TEXT\", description: \"Participant's full name\" },\n          { name: \"email\", type: \"TEXT\", description: \"Participant's email address\" },\n          { name: \"phone\", type: \"TEXT\", description: \"Participant's phone number (optional)\" },\n          { name: \"training_program_id\", type: \"INTEGER\", description: \"Foreign key to training_programs\" },\n          { name: \"enrollment_date\", type: \"TIMESTAMP\", description: \"Date of enrollment\" },\n          { name: \"status\", type: \"TEXT\", description: \"Participant status (default: 'active')\" }\n        ]\n      },\n      {\n        name: \"certificates\",\n        description: \"Store certificate information\",\n        columns: [\n          { name: \"id\", type: \"INTEGER\", description: \"Primary key\" },\n          { name: \"certificate_id\", type: \"TEXT\", description: \"Unique certificate ID\" },\n          { name: \"participant_id\", type: \"INTEGER\", description: \"Foreign key to participants\" },\n          { name: \"training_program_id\", type: \"INTEGER\", description: \"Foreign key to training_programs\" },\n          { name: \"issue_date\", type: \"TIMESTAMP\", description: \"Date of certificate issuance\" },\n          { name: \"expiry_date\", type: \"TIMESTAMP\", description: \"Certificate expiry date (optional)\" },\n          { name: \"certificate_path\", type: \"TEXT\", description: \"Path to certificate file (optional)\" }\n        ]\n      },\n      {\n        name: \"contacts\",\n        description: \"Store contact form submissions\",\n        columns: [\n          { name: \"id\", type: \"INTEGER\", description: \"Primary key\" },\n          { name: \"full_name\", type: \"TEXT\", description: \"Contact's full name\" },\n          { name: \"email\", type: \"TEXT\", description: \"Contact's email address\" },\n          { name: \"phone\", type: \"TEXT\", description: \"Contact's phone number (optional)\" },\n          { name: \"subject\", type: \"TEXT\", description: \"Contact form subject\" },\n          { name: \"message\", type: \"TEXT\", description: \"Contact message\" },\n          { name: \"created_at\", type: \"TIMESTAMP\", description: \"Submission timestamp\" },\n          { name: \"status\", type: \"TEXT\", description: \"Status of the contact (default: 'pending')\" }\n        ]\n      }\n    ]\n  }\n};\n","size_bytes":25882},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n  authenticate: boolean = false,\n): Promise<Response> {\n  // Set up headers\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  // Add API authentication code if required\n  if (authenticate) {\n    headers[\"X-API-Code\"] = import.meta.env.VITE_API_CODE;\n    // Add cache-busting query parameter for authenticated requests\n    if (url.includes('?')) {\n      url = `${url}&_t=${Date.now()}`;\n    } else {\n      url = `${url}?_t=${Date.now()}`;\n    }\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n  authenticate?: boolean;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior, authenticate = false }) =>\n  async ({ queryKey }) => {\n    // Set up headers for authentication if needed\n    const headers: Record<string, string> = {};\n    \n    if (authenticate) {\n      headers[\"X-API-Code\"] = import.meta.env.VITE_API_CODE;\n    }\n    \n    let endpoint = queryKey[0] as string;\n    \n    // Add cache-busting parameter for authenticated requests\n    if (authenticate) {\n      if (endpoint.includes('?')) {\n        endpoint = `${endpoint}&_t=${Date.now()}`;\n      } else {\n        endpoint = `${endpoint}?_t=${Date.now()}`;\n      }\n    }\n    \n    const res = await fetch(endpoint, {\n      credentials: \"include\",\n      headers\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2355},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Format date for display (accepts both Date objects and date strings)\nexport function formatDate(dateInput: string | Date): string {\n  const date = dateInput instanceof Date ? dateInput : new Date(dateInput);\n  return date.toLocaleDateString();\n}\n\n// Format date with time for display (accepts both Date objects and date strings)\nexport function formatDateTime(dateInput: string | Date): string {\n  const date = dateInput instanceof Date ? dateInput : new Date(dateInput);\n  return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n}\n","size_bytes":714},"client/src/pages/about.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { FaUserTie, FaAward, FaCertificate, FaChartLine } from \"react-icons/fa\";\nimport { motion } from \"framer-motion\";\nimport { useEffect } from \"react\";\nimport SEO from \"@/components/SEO/SEO\";\n\nexport default function AboutUs() {\n  // Scroll to top when navigating to this page\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  // Animation variants\n  const fadeIn = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n      },\n    },\n  };\n\n  const staggerContainer = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  // Special animation for stats counter\n  const counterVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: (custom: number) => ({\n      opacity: 1,\n      scale: 1,\n      transition: {\n        delay: custom * 0.1,\n        type: \"spring\",\n        stiffness: 200,\n        damping: 10,\n      },\n    }),\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* SEO for About page */}\n      <SEO\n        title=\"About Us | Professional Consultancy Experts | Bhumi Consultancy Services\"\n        description=\"Learn about Bhumi Consultancy Services - experienced business consultants providing professional training programs, audit services, and certification solutions to help businesses grow.\"\n        keywords=\"about bhumi consultancy, professional consultants, business consulting experts, training program specialists, audit services, certification providers\"\n        canonicalUrl=\"https://bhumiconsultancy.in/about\"\n        structuredData={{\n          type: 'organization',\n          data: {\n            name: 'Bhumi Consultancy Services',\n            url: 'https://bhumiconsultancy.in',\n            logo: 'https://bhumiconsultancy.in/favicon.png',\n            description: 'Professional business consulting, training programs, and certification services with years of industry experience.',\n            address: {\n              '@type': 'PostalAddress',\n              streetAddress: 'MCF-6503, Sanjay Colony, Sector-23, 33 Feet Road, Near Rana Aata Chakki',\n              addressLocality: 'Faridabad',\n              addressRegion: 'Haryana',\n              postalCode: '121005',\n              addressCountry: 'IN'\n            },\n            contactPoint: {\n              '@type': 'ContactPoint',\n              telephone: '+91 7827284027',\n              contactType: 'customer service',\n              email: 'bcs04062013@gmail.com',\n              areaServed: 'IN',\n              availableLanguage: ['en', 'hi']\n            },\n            founder: {\n              '@type': 'Person',\n              name: 'Veerarjun Upadhyay'\n            },\n            socialMedia: [\n              'https://www.facebook.com/share/19gk3NuZ5F/',\n              'https://x.com/veerupyy?t=3j_t11dcqUTDxbptxjEw_w&s=09',\n              'https://www.linkedin.com/in/veerarjun-upadhyay-a41001313',\n              'https://www.instagram.com/veerarjunupadhyay?igsh=MXA5bmtkNHZlbmV5eg=='\n            ]\n          }\n        }}\n      />\n      {/* Hero Section */}\n      <motion.section\n        className=\"bg-primary text-white py-12 sm:py-16 md:py-20\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.8 }}\n      >\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            className=\"max-w-3xl mx-auto text-center\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{\n              duration: 0.8,\n              delay: 0.2,\n            }}\n          >\n            <motion.h1\n              className=\"text-3xl sm:text-4xl md:text-5xl font-bold mb-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.8 }}\n            >\n              About Bhumi Consultancy Services\n            </motion.h1>\n            <motion.p\n              className=\"text-base sm:text-lg md:text-xl opacity-90\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.5, duration: 0.8 }}\n            >\n              We are a Faridabad, Haryana based consultancy firm specialized in\n              ISO certifications, customer audits, VDA audits, and recruitment\n              services for the automotive and non automotive industrial sectors.\n            </motion.p>\n          </motion.div>\n        </div>\n      </motion.section>\n\n      {/* Our Story */}\n      <motion.section\n        className=\"py-12 sm:py-16 md:py-20\"\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, amount: 0.2 }}\n        variants={fadeIn}\n      >\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <motion.h2\n              className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-primary mb-6 text-center\"\n              variants={fadeIn}\n            >\n              Our Story\n            </motion.h2>\n            <motion.div\n              className=\"bg-white rounded-lg shadow-md p-6 sm:p-8 md:p-10 mb-12\"\n              initial={{ opacity: 0, y: 30 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              viewport={{ once: true, amount: 0.2 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <motion.p\n                className=\"text-gray-700 mb-4 text-responsive\"\n                initial={{ opacity: 0 }}\n                whileInView={{ opacity: 1 }}\n                viewport={{ once: true }}\n                transition={{ delay: 0.3, duration: 0.8 }}\n              >\n                Founded with a vision to elevate quality standards in the\n                automotive industry, Bhumi Consultancy began with the mission to\n                help manufacturers achieve excellence in international\n                certifications and audits.\n              </motion.p>\n              <motion.p\n                className=\"text-gray-700 mb-4 text-responsive\"\n                initial={{ opacity: 0 }}\n                whileInView={{ opacity: 1 }}\n                viewport={{ once: true }}\n                transition={{ delay: 0.5, duration: 0.8 }}\n              >\n                Our journey began in the automotive sector, where we established\n                strong partnerships with major OEMs and tier-one suppliers.\n                Through years of dedicated service and proven results, we've\n                built a reputation for excellence in VDA audits and ISO\n                certifications, consistently achieving Green ratings for our\n                clients.\n              </motion.p>\n              <motion.p\n                className=\"text-gray-700 text-responsive\"\n                initial={{ opacity: 0 }}\n                whileInView={{ opacity: 1 }}\n                viewport={{ once: true }}\n                transition={{ delay: 0.7, duration: 0.8 }}\n              >\n                Today, we have expanded our services to include recruitment\n                solutions, providing over 3,500 qualified candidates to\n                companies in the automotive and industrial sectors. We've helped\n                88+ companies achieve and maintain Green Zone ratings, and\n                successfully completed 100+ customer audits with some of the\n                industry's most demanding clients.\n              </motion.p>\n            </motion.div>\n          </div>\n        </div>\n      </motion.section>\n\n      {/* Core Values */}\n      <motion.section\n        className=\"py-12 sm:py-16 md:py-20 bg-gray-100\"\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, amount: 0.1 }}\n        variants={staggerContainer}\n      >\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.h2\n            className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-primary mb-10 text-center\"\n            variants={fadeIn}\n          >\n            Our Core Values\n          </motion.h2>\n          <motion.div\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-8\"\n            variants={staggerContainer}\n          >\n            <motion.div variants={fadeIn} whileHover={{ y: -10 }}>\n              <Card className=\"bg-white rounded-lg shadow-md hover:shadow-lg transition duration-300 h-full\">\n                <CardContent className=\"p-6 sm:p-8 text-center\">\n                  <motion.div\n                    className=\"bg-yellow-500 text-white rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\"\n                    whileHover={{ rotate: 360 }}\n                    transition={{ duration: 0.6 }}\n                  >\n                    <FaUserTie size={28} />\n                  </motion.div>\n                  <h3 className=\"text-xl font-bold text-primary mb-2\">\n                    ISO Certification\n                  </h3>\n                  <p className=\"text-gray-700 text-sm sm:text-base\">\n                    ISO 9001:2015, ISO 14001:2015, ISO 45001:2018, IATF\n                    16949:2016 certification expertise.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div variants={fadeIn} whileHover={{ y: -10 }}>\n              <Card className=\"bg-white rounded-lg shadow-md hover:shadow-lg transition duration-300 h-full\">\n                <CardContent className=\"p-6 sm:p-8 text-center\">\n                  <motion.div\n                    className=\"bg-yellow-500 text-white rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\"\n                    whileHover={{ scale: 1.2 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n                  >\n                    <FaAward size={28} />\n                  </motion.div>\n                  <h3 className=\"text-xl font-bold text-primary mb-2\">\n                    Customer Audit\n                  </h3>\n                  <p className=\"text-gray-700 text-sm sm:text-base\">\n                    Comprehensive customer audit preparation and documentation\n                    services to meet industry standards.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div variants={fadeIn} whileHover={{ y: -10 }}>\n              <Card className=\"bg-white rounded-lg shadow-md hover:shadow-lg transition duration-300 h-full\">\n                <CardContent className=\"p-6 sm:p-8 text-center\">\n                  <motion.div\n                    className=\"bg-yellow-500 text-white rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\"\n                    whileHover={{ rotate: 10, scale: 1.1 }}\n                    transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n                  >\n                    <FaCertificate size={28} />\n                  </motion.div>\n                  <h3 className=\"text-xl font-bold text-primary mb-2\">\n                    VDA Audit\n                  </h3>\n                  <p className=\"text-gray-700 text-sm sm:text-base\">\n                    Successfully passed VDA Audit for major automotive companies\n                    like Volkswagen, AMG, Navistar with Green ratings.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            <motion.div variants={fadeIn} whileHover={{ y: -10 }}>\n              <Card className=\"bg-white rounded-lg shadow-md hover:shadow-lg transition duration-300 h-full\">\n                <CardContent className=\"p-6 sm:p-8 text-center\">\n                  <motion.div\n                    className=\"bg-yellow-500 text-white rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\"\n                    whileHover={{ y: [0, -8, 0] }}\n                    transition={{ duration: 0.6, repeat: 0 }}\n                  >\n                    <FaChartLine size={28} />\n                  </motion.div>\n                  <h3 className=\"text-xl font-bold text-primary mb-2\">\n                    Recruitment Services\n                  </h3>\n                  <p className=\"text-gray-700 text-sm sm:text-base\">\n                    Specialized manpower solutions and technical recruitment\n                    services for automotive and industrial sectors.\n                  </p>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </motion.div>\n        </div>\n      </motion.section>\n\n      {/* Team Section */}\n      <motion.section\n        className=\"py-12 sm:py-16 md:py-20\"\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, amount: 0.1 }}\n        variants={staggerContainer}\n      >\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.h2\n            className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-primary mb-10 text-center\"\n            variants={fadeIn}\n          >\n            Our Team\n          </motion.h2>\n          <motion.div\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"\n            variants={staggerContainer}\n          >\n            {/* Team Member 1 */}\n            <motion.div\n              variants={fadeIn}\n              whileHover={{ translateY: -10 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n              className=\"bg-white rounded-lg shadow-md overflow-hidden\"\n            >\n              <motion.div\n                className=\"h-48 sm:h-56 bg-gray-300 flex items-center justify-center overflow-hidden\"\n                whileHover={{ scale: 1.05 }}\n                transition={{ duration: 0.5 }}\n              >\n                <img\n                  src=\"https://huggingface.co/Aman6u5/ddddttyyuu/resolve/main/image%2520(3).png?download=true\"\n                  alt=\"Managing Director\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </motion.div>\n              <div className=\"p-5 sm:p-6\">\n                <h3 className=\"text-xl font-bold text-primary mb-1\">\n                  Veer Arjun Upadhyay\n                </h3>\n                <p className=\"text-yellow-600 font-medium mb-3\">\n                  Managing Director\n                </p>\n                <p className=\"text-gray-700 text-sm sm:text-base\">\n                  Leading our team with vision and expertise, Mr. Upadhyay\n                  oversees all business activities of the organization with a\n                  focus on excellence.\n                </p>\n              </div>\n            </motion.div>\n\n            {/* Team Member 2 */}\n            <motion.div\n              variants={fadeIn}\n              whileHover={{ translateY: -10 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n              className=\"bg-white rounded-lg shadow-md overflow-hidden\"\n            >\n              <motion.div\n                className=\"h-48 sm:h-56 bg-gray-300 flex items-center justify-center overflow-hidden\"\n                whileHover={{ scale: 1.05 }}\n                transition={{ duration: 0.5 }}\n              >\n                <img\n                  src=\"https://huggingface.co/Aman6u5/ddddttyyuu/resolve/main/WhatsApp%20Image%202025-08-03%20at%208.54.14%20PM%20(1).jpeg?download=true\"\n                  alt=\"CEO\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </motion.div>\n              <div className=\"p-5 sm:p-6\">\n                <h3 className=\"text-xl font-bold text-primary mb-1\">\n                  Poonam Upadhyay\n                </h3>\n                <p className=\"text-yellow-600 font-medium mb-3\">\n                  Chief Executive Officer\n                </p>\n                <p className=\"text-gray-700 text-sm sm:text-base\">\n                  Mrs. Upadhyay ensures operational excellence and quality\n                  service delivery across all our consultancy projects.\n                </p>\n              </div>\n            </motion.div>\n\n            {/* Team Member 3 */}\n            <motion.div\n              variants={fadeIn}\n              whileHover={{ translateY: -10 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n              className=\"bg-white rounded-lg shadow-md overflow-hidden\"\n            >\n              <motion.div\n                className=\"h-48 sm:h-56 bg-gray-300 flex items-center justify-center overflow-hidden\"\n                whileHover={{ scale: 1.05 }}\n                transition={{ duration: 0.5 }}\n              >\n                <img\n                  src=\"https://huggingface.co/Aman6u5/ddddttyyuu/resolve/main/out.jpg?download=true\"\n                  alt=\"Training Director\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </motion.div>\n              <div className=\"p-5 sm:p-6\">\n                <h3 className=\"text-xl font-bold text-primary mb-1\">\n                  Vinod Kumar Tiwari\n                </h3>\n                <p className=\"text-yellow-600 font-medium mb-3\">\n                  Head of Training Department\n                </p>\n                <p className=\"text-gray-700 text-sm sm:text-base\">\n                  Mr. Tiwari leads our specialized training department providing\n                  behavioral, technical, and management system training with a\n                  focus on industrial best practices.\n                </p>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </motion.section>\n\n      {/* Stats Section */}\n      <motion.section\n        className=\"py-12 sm:py-16 md:py-20 bg-primary text-white\"\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, amount: 0.2 }}\n        variants={staggerContainer}\n      >\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            className=\"grid grid-cols-2 md:grid-cols-4 gap-6 sm:gap-8 text-center\"\n            variants={staggerContainer}\n          >\n            <motion.div\n              custom={0}\n              variants={counterVariants}\n              whileHover={{ scale: 1.1 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n            >\n              <motion.div\n                className=\"text-3xl sm:text-4xl md:text-5xl font-bold mb-2\"\n                initial={{ opacity: 0, scale: 0.5 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ type: \"spring\", stiffness: 100, delay: 0.1 }}\n              >\n                82+\n              </motion.div>\n              <p className=\"text-sm sm:text-base\">New Clients</p>\n            </motion.div>\n            <motion.div\n              custom={1}\n              variants={counterVariants}\n              whileHover={{ scale: 1.1 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n            >\n              <motion.div\n                className=\"text-3xl sm:text-4xl md:text-5xl font-bold mb-2\"\n                initial={{ opacity: 0, scale: 0.5 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ type: \"spring\", stiffness: 100, delay: 0.2 }}\n              >\n                100+\n              </motion.div>\n              <p className=\"text-sm sm:text-base\">Customer Audits</p>\n            </motion.div>\n            <motion.div\n              custom={2}\n              variants={counterVariants}\n              whileHover={{ scale: 1.1 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n            >\n              <motion.div\n                className=\"text-3xl sm:text-4xl md:text-5xl font-bold mb-2\"\n                initial={{ opacity: 0, scale: 0.5 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ type: \"spring\", stiffness: 100, delay: 0.3 }}\n              >\n                88+\n              </motion.div>\n              <p className=\"text-sm sm:text-base\">Companies in Green Zone</p>\n            </motion.div>\n            <motion.div\n              custom={3}\n              variants={counterVariants}\n              whileHover={{ scale: 1.1 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n            >\n              <motion.div\n                className=\"text-3xl sm:text-4xl md:text-5xl font-bold mb-2\"\n                initial={{ opacity: 0, scale: 0.5 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ type: \"spring\", stiffness: 100, delay: 0.4 }}\n              >\n                3500+\n              </motion.div>\n              <p className=\"text-sm sm:text-base\">Candidates Provided</p>\n            </motion.div>\n          </motion.div>\n        </div>\n      </motion.section>\n    </div>\n  );\n}\n","size_bytes":21093},"client/src/pages/admin.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { \n  deleteService, \n  deleteTrainingProgram,\n  getAllParticipants, deleteParticipant,\n  getAllCertificates, deleteCertificate, downloadCertificate,\n  getAllContacts, updateContactStatus, deleteContact\n} from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, Plus, Pencil, Trash2, Download, CheckCircle, XCircle, Clock, Building2, GraduationCap, Users, Award, MessageSquare, LogOut, LayoutDashboard, Menu, X } from 'lucide-react';\nimport { formatDate, formatDateTime } from '@/lib/utils';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport type { Service, TrainingProgram, Participant, Certificate, Contact } from '@shared/schema';\n\n// Navigation items for the sidebar\nconst navigationItems = [\n  {\n    id: 'overview',\n    label: 'Overview',\n    icon: LayoutDashboard,\n  },\n  {\n    id: 'services',\n    label: 'Services',\n    icon: Building2,\n  },\n  {\n    id: 'training',\n    label: 'Training Programs',\n    icon: GraduationCap,\n  },\n  {\n    id: 'participants',\n    label: 'Participants',\n    icon: Users,\n  },\n  {\n    id: 'certificates',\n    label: 'Certificates',\n    icon: Award,\n  },\n  {\n    id: 'contacts',\n    label: 'Contacts',\n    icon: MessageSquare,\n  },\n];\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [apiCode, setApiCode] = useState(localStorage.getItem('admin_api_code') || '');\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('admin_api_code'));\n  const [activeSection, setActiveSection] = useState('overview');\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Authentication handler\n  const handleAuthenticate = () => {\n    if (apiCode === import.meta.env.VITE_API_CODE) {\n      localStorage.setItem('admin_api_code', apiCode);\n      setIsAuthenticated(true);\n      toast({\n        title: \"Authentication successful\",\n        description: \"You are now logged in as admin\",\n      });\n    } else {\n      toast({\n        title: \"Authentication failed\",\n        description: \"Invalid API code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('admin_api_code');\n    setIsAuthenticated(false);\n    setApiCode('');\n  };\n\n  // Handle navigation item click - close mobile menu\n  const handleNavigationClick = (sectionId: string) => {\n    setActiveSection(sectionId);\n    setIsMobileMenuOpen(false);\n  };\n\n  // Close mobile menu when clicking outside\n  const handleOverlayClick = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  // If not authenticated, show login form\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl font-bold text-center\">Admin Login</CardTitle>\n            <CardDescription className=\"text-center\">\n              Enter your API code to access the dashboard\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"apiCode\">API Code</label>\n                <input\n                  id=\"apiCode\"\n                  type=\"password\"\n                  value={apiCode}\n                  onChange={(e) => setApiCode(e.target.value)}\n                  placeholder=\"Enter API code...\"\n                  data-testid=\"input-api-code\"\n                  className=\"w-full p-2 border rounded\"\n                />\n              </div>\n            </div>\n          </CardContent>\n          <div className=\"p-6 pt-0\">\n            <Button \n              onClick={handleAuthenticate} \n              className=\"w-full\"\n              data-testid=\"button-authenticate\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  // Render active section content\n  const renderActiveContent = () => {\n    switch (activeSection) {\n      case 'overview':\n        return <OverviewDashboard />;\n      case 'services':\n        return <ServiceManager />;\n      case 'training':\n        return <TrainingProgramManager />;\n      case 'participants':\n        return <ParticipantManager />;\n      case 'certificates':\n        return <CertificateManager />;\n      case 'contacts':\n        return <ContactManager />;\n      default:\n        return <OverviewDashboard />;\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Mobile Menu Overlay */}\n      {isMobileMenuOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={handleOverlayClick}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`\n        fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-lg transform transition-transform duration-300 ease-in-out\n        md:translate-x-0 md:static md:z-0\n        ${isMobileMenuOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        {/* Logo/Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n              Bhumi Admin\n            </h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n              Management Dashboard\n            </p>\n          </div>\n          {/* Close button for mobile */}\n          <button\n            onClick={() => setIsMobileMenuOpen(false)}\n            className=\"md:hidden p-2 rounded-lg text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700\"\n            data-testid=\"button-close-menu\"\n          >\n            <X className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            return (\n              <button\n                key={item.id}\n                onClick={() => handleNavigationClick(item.id)}\n                data-testid={`nav-${item.id}`}\n                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n                  activeSection === item.id\n                    ? 'bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400'\n                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n              >\n                <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                <span className=\"font-medium\">{item.label}</span>\n              </button>\n            );\n          })}\n        </nav>\n\n        {/* Logout */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800\">\n          <button\n            onClick={handleLogout}\n            data-testid=\"button-logout\"\n            className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n          >\n            <LogOut className=\"h-5 w-5 flex-shrink-0\" />\n            <span className=\"font-medium\">Sign Out</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col md:ml-0\">\n        {/* Top Header */}\n        <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 lg:px-8 py-4 sm:py-6\">\n          <div className=\"flex items-center justify-between\">\n            {/* Mobile menu button */}\n            <button\n              onClick={() => setIsMobileMenuOpen(true)}\n              className=\"md:hidden p-2 rounded-lg text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 mr-4\"\n              data-testid=\"button-hamburger\"\n            >\n              <Menu className=\"h-6 w-6\" />\n            </button>\n\n            <div className=\"flex-1\">\n              <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 dark:text-white\">\n                {navigationItems.find(item => item.id === activeSection)?.label || 'Dashboard'}\n              </h2>\n              <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 mt-1\">\n                Manage your {activeSection === 'overview' ? 'business overview' : activeSection}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Page Content */}\n        <div className=\"flex-1 p-4 sm:p-6 lg:p-8 overflow-auto\">\n          {renderActiveContent()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Overview Dashboard Component\nfunction OverviewDashboard() {\n  // Query data for overview\n  const { data: services } = useQuery<{ data: Service[] }>({\n    queryKey: ['/api/services'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  const { data: participants } = useQuery<{ data: Participant[] }>({\n    queryKey: ['/api/participants'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  const { data: certificates } = useQuery<{ data: Certificate[] }>({\n    queryKey: ['/api/certificates'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  const { data: contacts } = useQuery<{ data: Contact[] }>({\n    queryKey: ['/api/contacts'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  return (\n    <div className=\"space-y-6 sm:space-y-8\">\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center\">\n              <Building2 className=\"h-6 w-6 sm:h-8 sm:w-8 opacity-80 flex-shrink-0\" />\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <p className=\"text-blue-100 text-xs sm:text-sm\">Services</p>\n                <p className=\"text-xl sm:text-2xl font-bold\">{services?.data?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center\">\n              <GraduationCap className=\"h-6 w-6 sm:h-8 sm:w-8 opacity-80 flex-shrink-0\" />\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <p className=\"text-green-100 text-xs sm:text-sm\">Training Programs</p>\n                <p className=\"text-xl sm:text-2xl font-bold\">{programs?.data?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-6 w-6 sm:h-8 sm:w-8 opacity-80 flex-shrink-0\" />\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <p className=\"text-purple-100 text-xs sm:text-sm\">Participants</p>\n                <p className=\"text-xl sm:text-2xl font-bold\">{participants?.data?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex items-center\">\n              <Award className=\"h-6 w-6 sm:h-8 sm:w-8 opacity-80 flex-shrink-0\" />\n              <div className=\"ml-3 sm:ml-4 min-w-0\">\n                <p className=\"text-orange-100 text-xs sm:text-sm\">Certificates</p>\n                <p className=\"text-xl sm:text-2xl font-bold\">{certificates?.data?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold\">Recent Contacts</CardTitle>\n            <CardDescription>Latest contact form submissions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {contacts?.data?.slice(0, 5).map((contact: Contact) => (\n                <div key={contact.id} className=\"flex items-center space-x-4\">\n                  <div className=\"flex-shrink-0\">\n                    <MessageSquare className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                      {contact.fullName}\n                    </p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                      {contact.subject}\n                    </p>\n                  </div>\n                  <div className=\"flex-shrink-0 text-xs text-gray-400\">\n                    {formatDate(contact.createdAt)}\n                  </div>\n                </div>\n              )) || (\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">No recent contacts</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold\">Recent Training Programs</CardTitle>\n            <CardDescription>Latest training programs added</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {programs?.data?.slice(0, 5).map((program: TrainingProgram) => (\n                <div key={program.id} className=\"flex items-center space-x-4\">\n                  <div className=\"flex-shrink-0\">\n                    <GraduationCap className=\"h-5 w-5 text-gray-400\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                      {program.title}\n                    </p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                      {program.category} • {program.duration}\n                    </p>\n                  </div>\n                  <div className=\"flex-shrink-0 text-sm text-green-600 font-medium\">\n                    ₹{program.online_price || program.price}\n                  </div>\n                </div>\n              )) || (\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">No training programs yet</p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Quick Actions</CardTitle>\n          <CardDescription>Common management tasks</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n            <Link href=\"/admin/services/create\">\n              <Button variant=\"outline\" className=\"flex items-center justify-center space-x-2 h-12 w-full\">\n                <Plus className=\"h-4 w-4 flex-shrink-0\" />\n                <span className=\"text-sm\">Add Service</span>\n              </Button>\n            </Link>\n            <Link href=\"/admin/training-programs/create\">\n              <Button variant=\"outline\" className=\"flex items-center justify-center space-x-2 h-12 w-full\">\n                <Plus className=\"h-4 w-4 flex-shrink-0\" />\n                <span className=\"text-sm\">Add Program</span>\n              </Button>\n            </Link>\n            <Link href=\"/admin/participants/create\">\n              <Button variant=\"outline\" className=\"flex items-center justify-center space-x-2 h-12 w-full\">\n                <Users className=\"h-4 w-4 flex-shrink-0\" />\n                <span className=\"text-sm\">Add Participant</span>\n              </Button>\n            </Link>\n            <Link href=\"/admin/certificates/create\">\n              <Button variant=\"outline\" className=\"flex items-center justify-center space-x-2 h-12 w-full\">\n                <Award className=\"h-4 w-4 flex-shrink-0\" />\n                <span className=\"text-sm\">Certificate</span>\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Services Manager Component\nfunction ServiceManager() {\n  const { toast } = useToast();\n\n  // Query services\n  const { data: services, isLoading } = useQuery<{ data: Service[] }>({\n    queryKey: ['/api/services'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Delete service mutation\n  const deleteServiceMutation = useMutation({\n    mutationFn: deleteService,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/services'] });\n      toast({\n        title: \"Service deleted\",\n        description: \"The service has been successfully deleted\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting service\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center py-10\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Manage Services</h2>\n        <Link href=\"/admin/services/create\">\n          <Button data-testid=\"button-add-service\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Service\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {services?.data?.map((service: Service) => (\n          <Card key={service.id} className=\"overflow-hidden\">\n            <CardHeader>\n              <CardTitle className=\"flex justify-between items-start\">\n                <span>{service.title}</span>\n                <div className=\"flex space-x-2\">\n                  <Link href={`/admin/services/edit/${service.id}`}>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid={`button-edit-service-${service.id}`}>\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link href={`/admin/delete/service/${service.id}`}>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid={`button-delete-service-${service.id}`}>\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </Link>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-500 truncate\">{service.description}</p>\n              <div className=\"mt-2\">\n                <h4 className=\"text-sm font-medium\">Features:</h4>\n                <ul className=\"text-sm pl-5 list-disc mt-1\">\n                  {Array.isArray(service.features) \n                    ? service.features.slice(0, 3).map((feature, index) => (\n                        <li key={index}>{feature}</li>\n                      ))\n                    : typeof service.features === 'string' &&\n                      JSON.parse(service.features as string).slice(0, 3).map((feature: string, index: number) => (\n                        <li key={index}>{feature}</li>\n                      ))\n                  }\n                  {((Array.isArray(service.features) && service.features.length > 3) ||\n                    (typeof service.features === 'string' && JSON.parse(service.features as string).length > 3)) && (\n                    <li>...</li>\n                  )}\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Training Programs Manager Component - NO DIALOGS, FULL PAGE NAVIGATION\nfunction TrainingProgramManager() {\n  const { toast } = useToast();\n\n  // Query training programs\n  const { data: programs, isLoading } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Delete training program mutation\n  const deleteProgramMutation = useMutation({\n    mutationFn: deleteTrainingProgram,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/training-programs'] });\n      toast({\n        title: \"Training program deleted\",\n        description: \"The training program has been successfully deleted\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting training program\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center py-10\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Manage Training Programs</h2>\n        <Link href=\"/admin/training-programs/create\">\n          <Button data-testid=\"button-add-program\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Program\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {programs?.data?.map((program: TrainingProgram) => (\n          <Card key={program.id} className=\"overflow-hidden\">\n            <CardHeader>\n              <CardTitle className=\"flex justify-between items-start\">\n                <span>{program.title}</span>\n                <div className=\"flex space-x-2\">\n                  <Link href={`/admin/training-programs/edit/${program.id}`}>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid={`button-edit-program-${program.id}`}>\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link href={`/admin/delete/training-program/${program.id}`}>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid={`button-delete-program-${program.id}`}>\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </Link>\n                </div>\n              </CardTitle>\n              <CardDescription>{program.category}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-500 truncate\">{program.description}</p>\n              <div className=\"mt-2 space-y-1\">\n                <p className=\"text-sm\"><span className=\"font-medium\">Duration:</span> {program.duration}</p>\n                <p className=\"text-sm\"><span className=\"font-medium\">Online:</span> ₹{program.online_price || program.price}</p>\n                {program.offline_price && (\n                  <p className=\"text-sm\"><span className=\"font-medium\">Offline:</span> ₹{program.offline_price}</p>\n                )}\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <Badge variant={program.delivery_mode === 'online' ? 'default' : 'secondary'}>\n                    {program.delivery_mode === 'online' ? 'Online Only' : \n                     program.delivery_mode === 'offline' ? 'Offline Only' : 'Both'}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Participant Manager Component - NO DIALOGS, FULL PAGE NAVIGATION\nfunction ParticipantManager() {\n  const { toast } = useToast();\n\n  // Query participants\n  const { data: participants, isLoading: isLoadingParticipants } = useQuery<{ data: Participant[] }>({\n    queryKey: ['/api/participants'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Query training programs for the dropdown\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Delete participant mutation\n  const deleteParticipantMutation = useMutation({\n    mutationFn: deleteParticipant,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/participants'] });\n      toast({\n        title: \"Participant deleted\",\n        description: \"The participant has been successfully deleted\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting participant\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Get training program name by ID\n  const getTrainingProgramName = (id: number): string => {\n    const program = programs?.data?.find(p => p.id === id);\n    return program ? program.title : `Program #${id}`;\n  };\n\n  // Render status badge with appropriate color\n  const renderStatusBadge = (status: string) => {\n    const statusColors: Record<string, string> = {\n      active: 'bg-green-100 text-green-800',\n      completed: 'bg-blue-100 text-blue-800',\n      paused: 'bg-yellow-100 text-yellow-800',\n      withdrawn: 'bg-red-100 text-red-800',\n    };\n\n    return (\n      <Badge className={statusColors[status] || 'bg-gray-100'}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  // Loading state\n  if (isLoadingParticipants) {\n    return (\n      <div className=\"flex justify-center py-10\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Manage Participants</h2>\n        <Link href=\"/admin/participants/create\">\n          <Button data-testid=\"button-add-participant\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Participant\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b\">\n              <th className=\"text-left py-3 px-4\">ID</th>\n              <th className=\"text-left py-3 px-4\">Name</th>\n              <th className=\"text-left py-3 px-4\">Training Program</th>\n              <th className=\"text-left py-3 px-4\">Enrollment Date</th>\n              <th className=\"text-left py-3 px-4\">Status</th>\n              <th className=\"text-right py-3 px-4\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {participants?.data?.map((participant: any) => (\n              <tr key={participant.id} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-3 px-4\">{participant.participantId || participant.participant_id}</td>\n                <td className=\"py-3 px-4\">\n                  <div>\n                    {participant.fullName || participant.full_name}\n                    <div className=\"text-xs text-gray-500\">{participant.email}</div>\n                  </div>\n                </td>\n                <td className=\"py-3 px-4\">{participant.training_program_name || getTrainingProgramName(participant.trainingProgramId || participant.training_program_id)}</td>\n                <td className=\"py-3 px-4\">{formatDate(participant.enrollmentDate || participant.enrollment_date)}</td>\n                <td className=\"py-3 px-4\">{renderStatusBadge(participant.status)}</td>\n                <td className=\"py-3 px-4 text-right\">\n                  <div className=\"flex justify-end space-x-2\">\n                    <Link href={`/admin/participants/edit/${participant.id}`}>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`button-edit-participant-${participant.id}`}>\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                    </Link>\n                    <Link href={`/admin/delete/participant/${participant.id}`}>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`button-delete-participant-${participant.id}`}>\n                        <Trash2 className=\"h-4 w-4 text-red-500\" />\n                      </Button>\n                    </Link>\n                  </div>\n                </td>\n              </tr>\n            ))}\n            {(!participants?.data || participants.data.length === 0) && (\n              <tr>\n                <td colSpan={6} className=\"py-6 text-center text-gray-500\">\n                  No participants found. Add one to get started.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n// Certificate Manager Component - NO DIALOGS, FULL PAGE NAVIGATION\nfunction CertificateManager() {\n  const { toast } = useToast();\n\n  // Query certificates\n  const { data: certificates, isLoading: isLoadingCertificates } = useQuery<{ data: Certificate[] }>({\n    queryKey: ['/api/certificates'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Query participants for dropdown\n  const { data: participants } = useQuery<{ data: Participant[] }>({\n    queryKey: ['/api/participants'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Query training programs for the dropdown\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n  });\n\n  // Delete certificate mutation\n  const deleteCertificateMutation = useMutation({\n    mutationFn: deleteCertificate,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/certificates'] });\n      toast({\n        title: \"Certificate deleted\",\n        description: \"The certificate has been successfully deleted\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting certificate\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Download certificate mutation\n  const downloadCertificateMutation = useMutation({\n    mutationFn: downloadCertificate,\n    onSuccess: (response) => {\n      if (response.success && response.data?.url) {\n        window.open(response.data.url, '_blank');\n      } else {\n        toast({\n          title: \"Download failed\",\n          description: \"Certificate could not be downloaded\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error downloading certificate\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Handler for downloading a certificate\n  const handleDownloadCertificate = (certificateId: string) => {\n    downloadCertificateMutation.mutate(certificateId);\n  };\n\n  // Get participant name by ID\n  const getParticipantName = (id: number): string => {\n    const participant = participants?.data?.find(p => p.id === id);\n    return participant ? participant.fullName : `Participant #${id}`;\n  };\n\n  // Get training program name by ID\n  const getTrainingProgramName = (id: number): string => {\n    const program = programs?.data?.find(p => p.id === id);\n    return program ? program.title : `Program #${id}`;\n  };\n\n  // Check if certificate is expired\n  const isCertificateExpired = (expiryDate: Date | string | null): boolean => {\n    if (!expiryDate) return false;\n    const expiryDateTime = expiryDate instanceof Date ? expiryDate : new Date(expiryDate);\n    return expiryDateTime < new Date();\n  };\n\n  // Loading state\n  if (isLoadingCertificates) {\n    return (\n      <div className=\"flex justify-center py-10\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Manage Certificates</h2>\n        <Link href=\"/admin/certificates/create\">\n          <Button data-testid=\"button-add-certificate\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Certificate\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"border-b\">\n              <th className=\"text-left py-3 px-4\">Certificate ID</th>\n              <th className=\"text-left py-3 px-4\">Participant</th>\n              <th className=\"text-left py-3 px-4\">Training Program</th>\n              <th className=\"text-left py-3 px-4\">Issue Date</th>\n              <th className=\"text-left py-3 px-4\">Expiry Date</th>\n              <th className=\"text-right py-3 px-4\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {certificates?.data?.map((certificate: any) => (\n              <tr key={certificate.id} className=\"border-b hover:bg-gray-50\">\n                <td className=\"py-3 px-4\">{certificate.certificateId || certificate.certificate_id}</td>\n                <td className=\"py-3 px-4\">{certificate.participant_name || getParticipantName(certificate.participantId || certificate.participant_id)}</td>\n                <td className=\"py-3 px-4\">{certificate.training_program_name || getTrainingProgramName(certificate.trainingProgramId || certificate.training_program_id)}</td>\n                <td className=\"py-3 px-4\">{formatDate(certificate.issueDate || certificate.issue_date)}</td>\n                <td className=\"py-3 px-4\">\n                  {certificate.expiryDate || certificate.expiry_date ? (\n                    <span className={isCertificateExpired(certificate.expiryDate || certificate.expiry_date) ? 'text-red-500' : ''}>\n                      {formatDate(certificate.expiryDate || certificate.expiry_date)}\n                    </span>\n                  ) : (\n                    <span className=\"text-gray-500\">No expiry</span>\n                  )}\n                </td>\n                <td className=\"py-3 px-4 text-right\">\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\" \n                      onClick={() => handleDownloadCertificate(certificate.certificateId || certificate.certificate_id)}\n                      title=\"Download Certificate\"\n                      data-testid={`button-download-certificate-${certificate.id}`}\n                    >\n                      <Download className=\"h-4 w-4 text-blue-500\" />\n                    </Button>\n                    <Link href={`/admin/certificates/edit/${certificate.id}`}>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`button-edit-certificate-${certificate.id}`}>\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                    </Link>\n                    <Link href={`/admin/delete/certificate/${certificate.id}`}>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`button-delete-certificate-${certificate.id}`}>\n                        <Trash2 className=\"h-4 w-4 text-red-500\" />\n                      </Button>\n                    </Link>\n                  </div>\n                </td>\n              </tr>\n            ))}\n            {(!certificates?.data || certificates.data.length === 0) && (\n              <tr>\n                <td colSpan={6} className=\"py-6 text-center text-gray-500\">\n                  No certificates found. Add one to get started.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n// Contact Manager Component - NO DIALOGS, FULL PAGE NAVIGATION  \nfunction ContactManager() {\n  const { toast } = useToast();\n\n  // Query contacts\n  const { data: contacts, isLoading: isLoadingContacts } = useQuery<{ data: Contact[] }>({\n    queryKey: ['/api/contacts'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Delete contact mutation\n  const deleteContactMutation = useMutation({\n    mutationFn: deleteContact,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n      toast({\n        title: \"Contact deleted\",\n        description: \"The contact has been successfully deleted\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting contact\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update contact status mutation\n  const updateContactStatusMutation = useMutation({\n    mutationFn: ({ id, status }: { id: number, status: string }) => updateContactStatus(id, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n      toast({\n        title: \"Contact status updated\",\n        description: \"The contact status has been successfully updated\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating contact status\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Handler for updating contact status\n  const handleUpdateStatus = (id: number, status: string) => {\n    updateContactStatusMutation.mutate({ id, status });\n  };\n\n  // Render status badge with appropriate color\n  const renderStatusBadge = (status: string) => {\n    const statusColors: Record<string, string> = {\n      pending: 'bg-yellow-100 text-yellow-800',\n      contacted: 'bg-blue-100 text-blue-800',\n      resolved: 'bg-green-100 text-green-800',\n      archived: 'bg-gray-100 text-gray-800',\n    };\n\n    return (\n      <Badge className={statusColors[status] || 'bg-gray-100'}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  // Render status update buttons\n  const renderStatusButtons = (contact: Contact) => {\n    const statuses = ['pending', 'contacted', 'resolved', 'archived'];\n    return (\n      <div className=\"flex space-x-2\">\n        {statuses.map((status) => (\n          <Button\n            key={status}\n            variant={contact.status === status ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => handleUpdateStatus(contact.id, status)}\n            disabled={updateContactStatusMutation.isPending}\n            data-testid={`button-status-${status}-${contact.id}`}\n          >\n            {status.charAt(0).toUpperCase() + status.slice(1)}\n          </Button>\n        ))}\n      </div>\n    );\n  };\n\n  // Loading state\n  if (isLoadingContacts) {\n    return (\n      <div className=\"flex justify-center py-10\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Manage Contacts</h2>\n      </div>\n\n      <div className=\"space-y-4\">\n        {contacts?.data?.map((contact: Contact) => (\n          <Card key={contact.id} className=\"overflow-hidden\">\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"text-lg\">{contact.fullName}</CardTitle>\n                  <p className=\"text-sm text-gray-600\">{contact.email}</p>\n                  {contact.phone && <p className=\"text-sm text-gray-600\">{contact.phone}</p>}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {renderStatusBadge(contact.status)}\n                  <Link href={`/admin/delete/contact/${contact.id}`}>\n                    <Button variant=\"ghost\" size=\"icon\" data-testid={`button-delete-contact-${contact.id}`}>\n                      <Trash2 className=\"h-4 w-4 text-red-500\" />\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-sm\">Subject:</h4>\n                <p className=\"text-sm\">{contact.subject}</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-sm\">Message:</h4>\n                <p className=\"text-sm text-gray-700\">{contact.message}</p>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <p className=\"text-xs text-gray-500\">\n                  Received: {formatDateTime(contact.createdAt)}\n                </p>\n                <div>\n                  {renderStatusButtons(contact)}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n\n        {(!contacts?.data || contacts.data.length === 0) && (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <MessageSquare className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-4 text-sm font-medium text-gray-900\">No contacts found</h3>\n              <p className=\"mt-2 text-sm text-gray-500\">\n                Contact submissions will appear here when received.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":42635},"client/src/pages/contact.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, Mail, Phone, Clock, Facebook, Twitter, Linkedin, Instagram, Loader2, CheckCircle } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Spinner, SuccessCheck } from \"@/components/ui/loading-animation\";\nimport SEO from \"@/components/SEO/SEO\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Form state\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name || !email || !subject || !message) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const res = await apiRequest('POST', '/api/contact', {\n        name,\n        email,\n        phone,\n        subject,\n        message\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        toast({\n          title: \"Message Sent\",\n          description: \"Thank you for your message. We will get back to you soon!\",\n        });\n        \n        // Reset form\n        setName(\"\");\n        setEmail(\"\");\n        setPhone(\"\");\n        setSubject(\"\");\n        setMessage(\"\");\n      } else {\n        toast({\n          title: \"Submission Failed\",\n          description: data.error || \"There was a problem sending your message\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Scroll to top when navigating to this page\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  // Animation variants\n  const fadeIn = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.6 }\n    }\n  };\n\n  const staggerContainer = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  // Social media hover animation variants\n  const socialIconVariants = {\n    hover: { scale: 1.2, rotate: 10 },\n    tap: { scale: 0.95 }\n  };\n\n  // Success state\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  // Enhanced submit handler with animation\n  const enhancedSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name || !email || !subject || !message) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const res = await apiRequest('POST', '/api/contact', {\n        name,\n        email,\n        phone,\n        subject,\n        message\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        // Show success animation\n        setShowSuccess(true);\n        \n        // Hide success animation after 2 seconds\n        setTimeout(() => {\n          setShowSuccess(false);\n          \n          toast({\n            title: \"Message Sent\",\n            description: \"Thank you for your message. We will get back to you soon!\",\n          });\n          \n          // Reset form\n          setName(\"\");\n          setEmail(\"\");\n          setPhone(\"\");\n          setSubject(\"\");\n          setMessage(\"\");\n        }, 2000);\n      } else {\n        toast({\n          title: \"Submission Failed\",\n          description: data.error || \"There was a problem sending your message\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"py-10 sm:py-12 bg-gray-50\">\n      {/* SEO for Contact page */}\n      <SEO\n        title=\"Contact Us | Bhumi Consultancy Services\"\n        description=\"Get in touch with Bhumi Consultancy Services. Contact our team to discuss your business needs, training programs, or certification services.\"\n        keywords=\"contact bhumi consultancy, business consulting contact, training programs contact, bhumi contact form, certificate verification assistance\"\n        canonicalUrl=\"https://bhumiconsultancy.in/contact\"\n        structuredData={{\n          type: 'organization',\n          data: {\n            name: 'Bhumi Consultancy Services',\n            url: 'https://bhumiconsultancy.in',\n            contactPoint: {\n              '@type': 'ContactPoint',\n              telephone: '+91 7827284027',\n              contactType: 'customer support',\n              areaServed: 'IN',\n              availableLanguage: ['en', 'hi']\n            },\n            address: {\n              '@type': 'PostalAddress',\n              streetAddress: 'MCF-6503, Sanjay Colony, Sector-23, 33 Feet Road, Near Rana Aata Chakki',\n              addressLocality: 'Faridabad',\n              addressRegion: 'Haryana',\n              postalCode: '121005',\n              addressCountry: 'IN'\n            }\n          }\n        }}\n      />\n      \n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <motion.div \n          className=\"max-w-4xl mx-auto text-center mb-8 sm:mb-12\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.7 }}\n        >\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-primary mb-3 sm:mb-4\">Contact Us</h1>\n          <p className=\"text-base sm:text-lg text-gray-600\">\n            Get in touch with our team to discuss your business needs and how we can help you succeed.\n          </p>\n        </motion.div>\n        \n        <div className=\"grid md:grid-cols-5 gap-6 md:gap-8\">\n          {/* Contact Information */}\n          <motion.div \n            className=\"md:col-span-2\"\n            initial={{ opacity: 0, x: -30 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <Card className=\"h-full\">\n              <CardContent className=\"p-6 sm:p-8\">\n                <h3 className=\"text-xl font-bold text-primary mb-4 md:mb-6\">Our Information</h3>\n                \n                <motion.div \n                  className=\"space-y-6\"\n                  variants={staggerContainer}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                >\n                  <motion.div \n                    className=\"flex items-start\"\n                    variants={fadeIn}\n                    whileHover={{ x: 5 }}\n                  >\n                    <motion.div \n                      className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-[40px] h-[40px]\"\n                      whileHover={{ scale: 1.1 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n                    >\n                      <MapPin size={22} />\n                    </motion.div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800 mb-1\">Location</h4>\n                      <p className=\"text-gray-600\">\n                        <a \n                          href=\"https://maps.app.goo.gl/q8xTrJTi7XNRbT7Z8\" \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"hover:text-primary hover:underline transition-colors\"\n                        >\n                          MCF-6503, Sanjay Colony, Sector-23, 33 Feet Road<br/>\n                          Near Rana Aata Chakki, Faridabad, Haryana 121005\n                        </a>\n                      </p>\n                    </div>\n                  </motion.div>\n                  \n                  <motion.div \n                    className=\"flex items-start\"\n                    variants={fadeIn}\n                    whileHover={{ x: 5 }}\n                  >\n                    <motion.div \n                      className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-[40px] h-[40px]\"\n                      whileHover={{ scale: 1.1 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n                    >\n                      <Mail size={22} />\n                    </motion.div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800 mb-1\">Email</h4>\n                      <p className=\"text-gray-600\">\n                        <a \n                          href=\"mailto:bcs04062013@gmail.com\" \n                          className=\"hover:text-primary hover:underline transition-colors\"\n                        >\n                          bcs04062013@gmail.com\n                        </a>\n                        <br/>\n                        <a \n                          href=\"mailto:varjunupadhyay@gmail.com\" \n                          className=\"hover:text-primary hover:underline transition-colors\"\n                        >\n                          varjunupadhyay@gmail.com\n                        </a>\n                      </p>\n                    </div>\n                  </motion.div>\n                  \n                  <motion.div \n                    className=\"flex items-start\"\n                    variants={fadeIn}\n                    whileHover={{ x: 5 }}\n                  >\n                    <motion.div \n                      className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-[40px] h-[40px]\"\n                      whileHover={{ scale: 1.1 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n                    >\n                      <Phone size={22} />\n                    </motion.div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800 mb-1\">Phone</h4>\n                      <p className=\"text-gray-600\">\n                        <a \n                          href=\"tel:+917827284027\" \n                          className=\"hover:text-primary hover:underline transition-colors\"\n                        >\n                          +91 7827284027\n                        </a>\n                        <br/>\n                        <a \n                          href=\"tel:+918700761218\" \n                          className=\"hover:text-primary hover:underline transition-colors\"\n                        >\n                          +91 8700761218\n                        </a>\n                      </p>\n                    </div>\n                  </motion.div>\n                  \n                  <motion.div \n                    className=\"flex items-start\"\n                    variants={fadeIn}\n                    whileHover={{ x: 5 }}\n                  >\n                    <motion.div \n                      className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-[40px] h-[40px]\"\n                      whileHover={{ scale: 1.1 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n                    >\n                      <Clock size={22} />\n                    </motion.div>\n                    <div>\n                      <h4 className=\"font-medium text-gray-800 mb-1\">Business Hours</h4>\n                      <p className=\"text-gray-600\">Monday - Friday: 9:00 AM - 6:00 PM<br/>Saturday: 10:00 AM - 2:00 PM</p>\n                    </div>\n                  </motion.div>\n                </motion.div>\n                \n                <motion.div \n                  className=\"mt-8\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.6, duration: 0.5 }}\n                >\n                  <h4 className=\"font-medium text-gray-800 mb-3\">Follow Us</h4>\n                  <div className=\"flex space-x-4\">\n                    <motion.a \n                      href=\"https://www.facebook.com/share/19gk3NuZ5F/\"\n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"bg-blue-500 p-2 rounded-full text-white hover:bg-blue-600 transition duration-300 flex items-center justify-center w-[36px] h-[36px]\"\n                      whileHover={socialIconVariants.hover}\n                      whileTap={socialIconVariants.tap}\n                    >\n                      <Facebook size={20} />\n                    </motion.a>\n                    <motion.a \n                      href=\"https://x.com/veerupyy?t=3j_t11dcqUTDxbptxjEw_w&s=09\"\n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"bg-blue-400 p-2 rounded-full text-white hover:bg-blue-500 transition duration-300 flex items-center justify-center w-[36px] h-[36px]\"\n                      whileHover={socialIconVariants.hover}\n                      whileTap={socialIconVariants.tap}\n                    >\n                      <Twitter size={20} />\n                    </motion.a>\n                    <motion.a \n                      href=\"https://www.linkedin.com/in/veerarjun-upadhyay-a41001313?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app\"\n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"bg-blue-700 p-2 rounded-full text-white hover:bg-blue-800 transition duration-300 flex items-center justify-center w-[36px] h-[36px]\"\n                      whileHover={socialIconVariants.hover}\n                      whileTap={socialIconVariants.tap}\n                    >\n                      <Linkedin size={20} />\n                    </motion.a>\n                    <motion.a \n                      href=\"https://www.instagram.com/veerarjunupadhyay?igsh=MXA5bmtkNHZlbmV5eg==\"\n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"bg-pink-500 p-2 rounded-full text-white hover:bg-pink-600 transition duration-300 flex items-center justify-center w-[36px] h-[36px]\"\n                      whileHover={socialIconVariants.hover}\n                      whileTap={socialIconVariants.tap}\n                    >\n                      <Instagram size={20} />\n                    </motion.a>\n                  </div>\n                </motion.div>\n              </CardContent>\n            </Card>\n          </motion.div>\n          \n          {/* Contact Form */}\n          <motion.div \n            className=\"md:col-span-3\"\n            initial={{ opacity: 0, x: 30 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <Card className=\"h-full\">\n              <CardContent className=\"p-6 sm:p-8 relative\">\n                {/* Success overlay */}\n                {showSuccess && (\n                  <motion.div \n                    className=\"absolute inset-0 bg-white bg-opacity-90 z-10 flex flex-col items-center justify-center\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <SuccessCheck className=\"mb-4\" />\n                    <motion.p \n                      className=\"text-xl font-medium text-green-600\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.2, duration: 0.3 }}\n                    >\n                      Message Sent Successfully!\n                    </motion.p>\n                  </motion.div>\n                )}\n              \n                <motion.h3 \n                  className=\"text-xl font-bold text-primary mb-4 md:mb-6\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.5 }}\n                >\n                  Send Us a Message\n                </motion.h3>\n                \n                <form className=\"space-y-4\" onSubmit={enhancedSubmit}>\n                  <motion.div \n                    className=\"grid md:grid-cols-2 gap-4\"\n                    variants={staggerContainer}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                  >\n                    <motion.div variants={fadeIn}>\n                      <Label htmlFor=\"name\">Full Name</Label>\n                      <Input \n                        id=\"name\" \n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        className=\"mt-1\" \n                        placeholder=\"Your full name\"\n                      />\n                    </motion.div>\n                    <motion.div variants={fadeIn}>\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input \n                        id=\"email\" \n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        className=\"mt-1\" \n                        placeholder=\"Your email address\"\n                      />\n                    </motion.div>\n                  </motion.div>\n                  \n                  <motion.div \n                    variants={fadeIn}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                  >\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input \n                      id=\"phone\" \n                      type=\"tel\"\n                      value={phone}\n                      onChange={(e) => setPhone(e.target.value)}\n                      className=\"mt-1\" \n                      placeholder=\"Your phone number\"\n                    />\n                  </motion.div>\n                  \n                  <motion.div \n                    variants={fadeIn}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    transition={{ delay: 0.2 }}\n                  >\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Select value={subject} onValueChange={setSubject}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a subject\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Consultancy Services\">Consultancy Services</SelectItem>\n                        <SelectItem value=\"Audit Preparation\">Audit Preparation</SelectItem>\n                        <SelectItem value=\"Training Programs\">Training Programs</SelectItem>\n                        <SelectItem value=\"Certificate Verification\">Certificate Verification</SelectItem>\n                        <SelectItem value=\"Other Inquiry\">Other Inquiry</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </motion.div>\n                  \n                  <motion.div \n                    variants={fadeIn}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    transition={{ delay: 0.3 }}\n                  >\n                    <Label htmlFor=\"message\">Message</Label>\n                    <Textarea \n                      id=\"message\" \n                      rows={4}\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      className=\"mt-1\" \n                      placeholder=\"Your message\"\n                    />\n                  </motion.div>\n                  \n                  <motion.div \n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.4, duration: 0.5 }}\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-primary hover:bg-accent\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? (\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <Spinner size=\"small\" />\n                          <span>Sending...</span>\n                        </div>\n                      ) : (\n                        \"Send Message\"\n                      )}\n                    </Button>\n                  </motion.div>\n                </form>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n        \n        {/* Map Section */}\n        <motion.div \n          className=\"mt-8 sm:mt-12\"\n          initial={{ opacity: 0, y: 40 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5, duration: 0.8 }}\n        >\n          <div className=\"rounded-lg overflow-hidden shadow-md h-64 sm:h-96\">\n            <iframe \n              src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3509.4694845126133!2d77.31289427578356!3d28.401350097525867!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x390cdbeec33b1511%3A0x4e4d143b706aedd9!2sBhumi%20consultancy%20services!5e0!3m2!1sen!2sin!4v1712688123559!5m2!1sen!2sin\" \n              width=\"100%\" \n              height=\"100%\" \n              style={{ border: 0 }} \n              allowFullScreen \n              loading=\"lazy\" \n              referrerPolicy=\"no-referrer-when-downgrade\"\n              title=\"Bhumi Consultancy Services Location\"\n              className=\"rounded-lg\"\n            />\n          </div>\n          <div className=\"mt-2 text-center\">\n            <a \n              href=\"https://maps.app.goo.gl/q8xTrJTi7XNRbT7Z8\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-primary hover:text-primary-dark text-sm font-medium hover:underline transition-colors\"\n            >\n              Open in Google Maps\n            </a>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23011},"client/src/pages/home.tsx":{"content":"import HeroBanner from \"@/components/home/HeroBanner\";\nimport ServicesSection from \"@/components/home/ServicesSection\";\nimport TrainingSection from \"@/components/home/TrainingSection\";\nimport VerifySection from \"@/components/home/VerifySection\";\nimport ContactSection from \"@/components/home/ContactSection\";\nimport SEO from \"@/components/SEO/SEO\";\n\nexport default function Home() {\n  // Organization structured data for homepage\n  const organizationData = {\n    type: 'organization' as const,\n    data: {\n      name: 'Bhumi Consultancy Services',\n      url: 'https://bhumiconsultancy.in',\n      logo: 'https://bhumiconsultancy.in/favicon.png',\n      description: 'Professional business consulting, training programs, and certification services to help your business grow.',\n      address: {\n        '@type': 'PostalAddress',\n        streetAddress: 'MCF-6503, Sanjay Colony, Sector-23, 33 Feet Road, Near Rana Aata Chakki',\n        addressLocality: 'Faridabad',\n        addressRegion: 'Haryana',\n        postalCode: '121005',\n        addressCountry: 'IN'\n      },\n      telephone: '+91 7827284027',\n      email: 'bcs04062013@gmail.com',\n      socialLinks: [\n        'https://www.facebook.com/share/19gk3NuZ5F/',\n        'https://x.com/veerupyy?t=3j_t11dcqUTDxbptxjEw_w&s=09',\n        'https://www.linkedin.com/in/veerarjun-upadhyay-a41001313',\n        'https://www.instagram.com/veerarjunupadhyay?igsh=MXA5bmtkNHZlbmV5eg=='\n      ]\n    }\n  };\n\n  return (\n    <div>\n      {/* SEO Component */}\n      <SEO\n        title=\"Bhumi Consultancy Services | Professional Business Solutions\"\n        description=\"Bhumi Consultancy offers professional business consulting, training programs, and certification services to help businesses achieve their full potential.\"\n        keywords=\"business consulting, training programs, certification, audit services, bhumi consultancy\"\n        structuredData={organizationData}\n      />\n      \n      <HeroBanner />\n      <ServicesSection />\n      <TrainingSection />\n      <VerifySection />\n      <ContactSection />\n    </div>\n  );\n}\n","size_bytes":2063},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/service-details.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ConsultationDialog } from \"@/components/ui/consultation-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Check } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Service } from \"@shared/schema\";\nimport SEO from \"@/components/SEO/SEO\";\nimport Breadcrumbs, { generateBreadcrumbs } from \"@/components/SEO/Breadcrumbs\";\nimport RelatedContent from \"@/components/SEO/RelatedContent\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nexport default function ServiceDetails() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [consultationDialogOpen, setConsultationDialogOpen] = useState(false);\n  \n  // Get the service ID from the URL\n  const serviceId = location.split('/').pop();\n  \n  console.log(\"Current location:\", location);\n  console.log(\"Service ID extracted:\", serviceId);\n  \n  // Fetch the service details\n  const { data: serviceResponse, isLoading, error } = useQuery<{ success: boolean; data: Service }>({\n    queryKey: [`/api/services/${serviceId}`],\n    enabled: !!serviceId,\n  });\n  \n  console.log(\"Service Response:\", serviceResponse);\n  console.log(\"Loading State:\", isLoading);\n  console.log(\"Error:\", error);\n  \n  const service = serviceResponse?.data;\n  \n  useEffect(() => {\n    if (serviceResponse && !serviceResponse.success) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load service details. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [serviceResponse, toast]);\n\n  // Function to handle \"Back to Services\" button\n  const handleBack = () => {\n    setLocation('/#services');\n  };\n  \n  // Function to open consultation dialog\n  const openConsultationDialog = () => {\n    setConsultationDialogOpen(true);\n  };\n\n  // Service structured data for this specific service\n  const generateServiceStructuredData = (service: Service) => {\n    return {\n      type: 'service' as const,\n      data: {\n        serviceType: service.title,\n        provider: {\n          name: 'Bhumi Consultancy Services',\n          url: 'https://bhumiconsultancy.in'\n        },\n        description: service.description,\n        areaServed: 'Worldwide',\n        price: 'Contact for pricing',\n        priceCurrency: 'INR'\n      }\n    };\n  };\n\n  return (\n    <main className=\"container mx-auto px-4 py-6 sm:py-12\">\n      {/* SEO for service details page */}\n      {service && (\n        <SEO\n          title={`${service.title} | Bhumi Consultancy Services`}\n          description={service.description}\n          keywords={`${service.title.toLowerCase()}, consultancy services, business consulting, bhumi consultancy`}\n          canonicalUrl={`https://bhumiconsultancy.in/services/${service.id}`}\n          structuredData={generateServiceStructuredData(service)}\n        />\n      )}\n      \n      {/* Breadcrumbs */}\n      {service && (\n        <Breadcrumbs \n          items={generateBreadcrumbs.serviceDetail(service.title, service.id.toString())}\n          className=\"mb-4\"\n        />\n      )}\n      \n      <Button \n        variant=\"ghost\" \n        className=\"mb-4 sm:mb-6 flex items-center\"\n        onClick={handleBack}\n        size=\"sm\"\n      >\n        <ArrowLeft className=\"mr-1.5 h-3.5 w-3.5 sm:h-4 sm:w-4\" />\n        <span className=\"text-sm sm:text-base\">Back to Services</span>\n      </Button>\n      \n      {isLoading ? (\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-10 sm:h-12 w-3/4\" />\n          <Skeleton className=\"h-5 sm:h-6 w-full\" />\n          <Skeleton className=\"h-36 sm:h-48 w-full\" />\n          <Skeleton className=\"h-5 sm:h-6 w-1/2\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6 sm:mt-8\">\n            <Skeleton className=\"h-20 sm:h-24 w-full\" />\n            <Skeleton className=\"h-20 sm:h-24 w-full\" />\n          </div>\n        </div>\n      ) : service ? (\n        <>\n          <div className=\"mb-6 sm:mb-8\">\n            <h1 className=\"text-2xl sm:text-3xl md:text-4xl font-bold mb-4\">{service.title}</h1>\n          </div>\n          \n          <Card className=\"mb-6 sm:mb-8 bg-white shadow-md\">\n            <CardHeader className=\"pb-2 sm:pb-4\">\n              <CardTitle className=\"text-xl sm:text-2xl\">Description</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"prose prose-lg max-w-none text-gray-700 leading-relaxed\">\n                <ReactMarkdown \n                  remarkPlugins={[remarkGfm]}\n                  components={{\n                    h1: ({node, ...props}) => <h1 className=\"text-3xl font-bold text-gray-900 mb-4 mt-6\" {...props} />,\n                    h2: ({node, ...props}) => <h2 className=\"text-2xl font-semibold text-gray-800 mb-3 mt-5\" {...props} />,\n                    h3: ({node, ...props}) => <h3 className=\"text-xl font-semibold text-gray-800 mb-2 mt-4\" {...props} />,\n                    h4: ({node, ...props}) => <h4 className=\"text-lg font-semibold text-gray-700 mb-2 mt-3\" {...props} />,\n                    h5: ({node, ...props}) => <h5 className=\"text-base font-semibold text-gray-700 mb-1 mt-2\" {...props} />,\n                    h6: ({node, ...props}) => <h6 className=\"text-sm font-semibold text-gray-600 mb-1 mt-2\" {...props} />,\n                    p: ({node, ...props}) => <p className=\"mb-4 text-base sm:text-lg leading-7\" {...props} />,\n                    ul: ({node, ...props}) => <ul className=\"mb-4 ml-6 list-disc space-y-2\" {...props} />,\n                    ol: ({node, ...props}) => <ol className=\"mb-4 ml-6 list-decimal space-y-2\" {...props} />,\n                    li: ({node, ...props}) => <li className=\"text-base leading-6\" {...props} />,\n                    blockquote: ({node, ...props}) => <blockquote className=\"border-l-4 border-primary pl-4 italic text-gray-600 my-4\" {...props} />,\n                    code: ({node, ...props}) => <code className=\"bg-gray-100 px-1 py-0.5 rounded text-sm font-mono\" {...props} />,\n                    pre: ({node, ...props}) => <pre className=\"bg-gray-100 p-3 rounded-lg overflow-x-auto my-4\" {...props} />,\n                    strong: ({node, ...props}) => <strong className=\"font-semibold\" {...props} />,\n                    em: ({node, ...props}) => <em className=\"italic\" {...props} />,\n                    a: ({node, ...props}) => <a className=\"text-primary hover:underline\" {...props} />,\n                    hr: ({node, ...props}) => <hr className=\"my-6 border-gray-300\" {...props} />\n                  }}\n                >\n                  {service.description}\n                </ReactMarkdown>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Separator className=\"my-6 sm:my-8\" />\n          \n          <div className=\"mt-6 sm:mt-8\">\n            <h2 className=\"text-xl sm:text-2xl font-semibold mb-4 sm:mb-6\">Key Features</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6\">\n              {Array.isArray(service.features) ? \n                service.features.map((feature: string, index: number) => (\n                  <Card key={index} className=\"h-full border-l-4 border-l-primary\">\n                    <CardHeader className=\"py-3 px-4 sm:pb-2 sm:px-6\">\n                      <CardTitle className=\"text-base sm:text-xl flex items-center\">\n                        <Check className=\"mr-2 h-4 w-4 sm:h-5 sm:w-5 text-primary flex-shrink-0\" />\n                        <span className=\"leading-tight\">{feature}</span>\n                      </CardTitle>\n                    </CardHeader>\n                  </Card>\n                ))\n              : <p>No features available for this service.</p>}\n            </div>\n          </div>\n          \n          <div className=\"mt-8 sm:mt-12 text-center\">\n            <Button \n              size=\"lg\" \n              onClick={openConsultationDialog}\n              className=\"w-full sm:w-auto bg-primary hover:bg-primary/90\"\n            >\n              Get a Consultation\n            </Button>\n          </div>\n          \n          {/* Consultation Dialog */}\n          {service && (\n            <ConsultationDialog \n              open={consultationDialogOpen}\n              onOpenChange={setConsultationDialogOpen}\n              serviceTitle={service.title}\n              serviceId={service.id}\n            />\n          )}\n          \n          {/* Related Content for Internal Linking */}\n          <RelatedContent \n            currentId={service.id}\n            currentType=\"service\"\n            className=\"mt-8\"\n          />\n        </>\n      ) : (\n        <div className=\"text-center py-12\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Service not found</h2>\n          <p className=\"mb-8\">The service you're looking for doesn't exist or has been removed.</p>\n          <Button asChild>\n            <Link href=\"/#services\">View All Services</Link>\n          </Button>\n        </div>\n      )}\n    </main>\n  );\n}","size_bytes":9260},"client/src/pages/training-program-details.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { EnrollmentDialog } from \"@/components/ui/enrollment-dialog\";\nimport { ArrowLeft, Clock, Calendar, Award, Banknote } from \"lucide-react\";\nimport { TrainingProgram } from \"@shared/schema\";\nimport { motion } from \"framer-motion\";\nimport SEO from \"@/components/SEO/SEO\";\nimport Breadcrumbs, { generateBreadcrumbs } from \"@/components/SEO/Breadcrumbs\";\nimport FAQSchema, { commonFAQs } from \"@/components/SEO/FAQSchema\";\nimport RelatedContent from \"@/components/SEO/RelatedContent\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\n// Map of category names to badge colors\nconst categoryColors: Record<string, string> = {\n  'Business': 'bg-blue-100 text-primary',\n  'Finance': 'bg-green-100 text-green-800',\n  'Leadership': 'bg-yellow-100 text-yellow-800',\n  'Marketing': 'bg-purple-100 text-purple-800',\n  'Technology': 'bg-cyan-100 text-cyan-800'\n};\n\nexport default function TrainingProgramDetails() {\n  const [enrollDialogOpen, setEnrollDialogOpen] = useState(false);\n  \n  // Get the program identifier from the URL (could be ID or slug)\n  const params = useParams();\n  const identifier = params.id; // This could be a numeric ID or a slug\n  \n  // Fetch the training program data\n  const { data: programResponse, isLoading, error } = useQuery<{ success: boolean; data: TrainingProgram }>({\n    queryKey: [`/api/training-programs/${identifier}`],\n    // Only run the query if we have a valid identifier\n    enabled: !!identifier,\n  });\n  \n  const program = programResponse?.data;\n  \n  const handleEnrollClick = () => {\n    setEnrollDialogOpen(true);\n  };\n  \n  if (isLoading) {\n    return (\n      <div className=\"py-12 bg-gray-50 min-h-screen\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Loading skeleton */}\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 w-24 bg-gray-300 rounded mb-4\"></div>\n              <div className=\"h-12 w-3/4 bg-gray-300 rounded mb-6\"></div>\n              <div className=\"w-full h-72 bg-gray-300 rounded-lg mb-8\"></div>\n              <div className=\"space-y-3\">\n                <div className=\"h-4 bg-gray-300 rounded w-full\"></div>\n                <div className=\"h-4 bg-gray-300 rounded w-5/6\"></div>\n                <div className=\"h-4 bg-gray-300 rounded w-4/6\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  if (error || !program) {\n    return (\n      <div className=\"py-12 bg-gray-50 min-h-screen\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Program Not Found</h1>\n            <p className=\"text-gray-600 mb-6\">The training program you're looking for could not be found.</p>\n            <Link href=\"/training-programs\">\n              <Button>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to All Programs\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n  // Generate structured data for training program\n  const generateTrainingCourseStructuredData = (program: TrainingProgram) => {\n    return {\n      type: 'trainingCourse' as const,\n      data: {\n        name: program.title,\n        description: program.description,\n        provider: {\n          '@type': 'Organization',\n          name: 'Bhumi Consultancy Services',\n          sameAs: 'https://bhumiconsultancy.in'\n        },\n        offers: {\n          '@type': 'Offer',\n          price: program.price.toString(),\n          priceCurrency: 'INR',\n          availability: 'https://schema.org/InStock',\n          validFrom: new Date().toISOString().split('T')[0]\n        },\n        coursePrerequisites: 'No specific prerequisites',\n        educationalCredentialAwarded: 'Professional Certificate',\n        hasCourseInstance: {\n          '@type': 'CourseInstance',\n          courseMode: 'ONLINE',\n          duration: program.duration,\n          inLanguage: 'en'\n        }\n      }\n    };\n  };\n\n  return (\n    <div className=\"py-12 bg-gray-50 min-h-screen\">\n      {/* SEO for training program details */}\n      {program && (\n        <SEO\n          title={`${program.title} | Training Programs | Bhumi Consultancy`}\n          description={program.description}\n          keywords={`${program.title.toLowerCase()}, ${program.category.toLowerCase()}, professional training, certificate program, bhumi consultancy`}\n          canonicalUrl={`https://bhumiconsultancy.in/training-programs/${program.slug || program.id}`}\n          ogImage={program.image_path ? program.image_path : undefined}\n          structuredData={generateTrainingCourseStructuredData(program)}\n        />\n      )}\n      \n      {/* Breadcrumbs */}\n      {program && (\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <Breadcrumbs \n            items={generateBreadcrumbs.trainingProgramDetail(program.title, program.slug || program.id.toString())}\n            className=\"max-w-4xl mx-auto\"\n          />\n        </div>\n      )}\n      \n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Back button */}\n          <Link href=\"/training-programs\">\n            <Button variant=\"ghost\" className=\"mb-6 hover:bg-transparent hover:text-primary\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to All Programs\n            </Button>\n          </Link>\n          \n          {/* Program details */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4 }}\n          >\n            <Badge className={`${categoryColors[program.category] || 'bg-gray-100 text-gray-800'} mb-4 font-medium text-sm`}>\n              {program.category}\n            </Badge>\n            \n            <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-6\">{program.title}</h1>\n            \n            {/* Featured image - Blur background effect for both mobile and desktop */}\n            <div className=\"mb-8\">\n              {/* Mobile view - blur background with clear overlay */}\n              <div className=\"block md:hidden relative rounded-lg overflow-hidden shadow-md h-64\">\n                {/* Blurred background */}\n                <div \n                  className=\"absolute inset-0 w-full h-full bg-cover bg-center filter blur-sm scale-110\"\n                  style={{\n                    backgroundImage: `url(${program.image_path || `https://source.unsplash.com/random/1200x600?business,${program.category.toLowerCase()}`})`\n                  }}\n                ></div>\n                \n                {/* Dark overlay for better contrast */}\n                <div className=\"absolute inset-0 bg-black bg-opacity-30\"></div>\n                \n                {/* Clear image overlay - mobile optimized */}\n                <div className=\"absolute inset-0 flex items-center justify-center p-4\">\n                  <img \n                    src={program.image_path || `https://source.unsplash.com/random/1200x600?business,${program.category.toLowerCase()}`}\n                    alt={program.title} \n                    className=\"max-w-full max-h-48 object-cover object-center rounded-lg shadow-lg\"\n                  />\n                </div>\n              </div>\n              \n              {/* Desktop view - blur background with clear overlay */}\n              <div className=\"hidden md:block relative rounded-lg overflow-hidden shadow-md h-80\">\n                {/* Blurred background */}\n                <div \n                  className=\"absolute inset-0 w-full h-full bg-cover bg-center filter blur-sm scale-110\"\n                  style={{\n                    backgroundImage: `url(${program.image_path || `https://source.unsplash.com/random/1200x600?business,${program.category.toLowerCase()}`})`\n                  }}\n                ></div>\n                \n                {/* Dark overlay for better contrast */}\n                <div className=\"absolute inset-0 bg-black bg-opacity-30\"></div>\n                \n                {/* Clear image overlay */}\n                <div className=\"absolute inset-0 flex items-center justify-center p-8\">\n                  <img \n                    src={program.image_path || `https://source.unsplash.com/random/1200x600?business,${program.category.toLowerCase()}`}\n                    alt={program.title} \n                    className=\"max-w-md max-h-64 object-cover object-center rounded-lg shadow-lg\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            {/* Program details card */}\n            <Card className=\"mb-8 bg-white shadow-md\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-3\">\n                    <Banknote className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                    <h3 className=\"text-sm font-medium text-gray-500 mb-3\">Price</h3>\n                    {program.delivery_mode === 'online' ? (\n                      <div>\n                        <p className=\"text-xs text-gray-600 mb-1\">Online</p>\n                        <p className=\"text-base font-semibold text-primary\">₹{(program.online_price || program.price).toLocaleString()} <span className=\"text-xs text-gray-500\">+GST</span></p>\n                      </div>\n                    ) : program.delivery_mode === 'offline' ? (\n                      <div>\n                        <p className=\"text-xs text-gray-600 mb-1\">Offline</p>\n                        <p className=\"text-base font-semibold text-gray-900\">₹{(program.offline_price || program.price).toLocaleString()} <span className=\"text-xs text-gray-500\">+GST</span></p>\n                      </div>\n                    ) : (\n                      <div className=\"flex gap-2\">\n                        <div className=\"bg-primary/5 rounded-lg p-2 flex-1\">\n                          <div className=\"text-center\">\n                            <span className=\"text-xs font-medium text-gray-700 block mb-1\">Online</span>\n                            <span className=\"text-sm font-bold text-primary\">₹{(program.online_price || program.price).toLocaleString()}</span>\n                            <span className=\"text-xs text-gray-500 block\">+GST</span>\n                          </div>\n                        </div>\n                        <div className=\"bg-gray-50 rounded-lg p-2 flex-1\">\n                          <div className=\"text-center\">\n                            <span className=\"text-xs font-medium text-gray-700 block mb-1\">Offline</span>\n                            <span className=\"text-sm font-bold text-gray-900\">₹{(program.offline_price || program.online_price || program.price).toLocaleString()}</span>\n                            <span className=\"text-xs text-gray-500 block\">+GST</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"text-center p-3\">\n                    <Clock className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                    <h3 className=\"text-sm font-medium text-gray-500\">Duration</h3>\n                    <p className=\"text-base font-semibold text-gray-900\">{program.duration}</p>\n                  </div>\n                  \n                  <div className=\"text-center p-3\">\n                    <Calendar className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                    <h3 className=\"text-sm font-medium text-gray-500\">Category</h3>\n                    <p className=\"text-base font-semibold text-gray-900\">{program.category}</p>\n                  </div>\n                  \n                  <div className=\"text-center p-3\">\n                    <Award className=\"w-6 h-6 mx-auto text-primary mb-2\" />\n                    <h3 className=\"text-sm font-medium text-gray-500\">Certification</h3>\n                    <p className=\"text-base font-semibold text-gray-900\">Included</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Program description */}\n            <div className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Program Description</h2>\n              <div className=\"prose prose-lg max-w-none text-gray-700 leading-relaxed\">\n                <ReactMarkdown \n                  remarkPlugins={[remarkGfm]}\n                  components={{\n                    h1: ({node, ...props}) => <h1 className=\"text-2xl font-bold mb-4 text-gray-900\" {...props} />,\n                    h2: ({node, ...props}) => <h2 className=\"text-xl font-semibold mb-3 text-gray-900\" {...props} />,\n                    h3: ({node, ...props}) => <h3 className=\"text-lg font-medium mb-2 text-gray-900\" {...props} />,\n                    p: ({node, ...props}) => <p className=\"mb-4 text-base sm:text-lg leading-7 text-gray-700\" {...props} />,\n                    ul: ({node, ...props}) => <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-700\" {...props} />,\n                    ol: ({node, ...props}) => <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-700\" {...props} />,\n                    li: ({node, ...props}) => <li className=\"text-base sm:text-lg leading-7\" {...props} />,\n                    blockquote: ({node, ...props}) => <blockquote className=\"border-l-4 border-primary pl-4 italic mb-4 text-gray-600\" {...props} />,\n                    code: ({node, ...props}: any) => \n                      <code className=\"bg-gray-100 text-gray-800 px-1 py-0.5 rounded text-sm font-mono\" {...props} />,\n                    strong: ({node, ...props}) => <strong className=\"font-semibold text-gray-900\" {...props} />,\n                    em: ({node, ...props}) => <em className=\"italic\" {...props} />,\n                    a: ({node, ...props}) => <a className=\"text-primary hover:underline\" {...props} />,\n                    hr: ({node, ...props}) => <hr className=\"my-6 border-gray-300\" {...props} />\n                  }}\n                >\n                  {program.description}\n                </ReactMarkdown>\n              </div>\n            </div>\n            \n            <Separator className=\"my-8\" />\n            \n            {/* FAQ Section */}\n            <FAQSchema \n              faqs={commonFAQs.trainingProgram(program.title, program.duration, program.price)}\n              className=\"mb-8\"\n            />\n            \n            <Separator className=\"my-8\" />\n            \n            {/* Related Content for Internal Linking */}\n            <RelatedContent \n              currentId={program.id}\n              currentType=\"training\"\n              currentCategory={program.category}\n              className=\"mb-8\"\n            />\n            \n            <Separator className=\"my-8\" />\n            \n            {/* Call to action */}\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Ready to Enroll?</h2>\n              <p className=\"text-gray-600 mb-6\">Join our program and take the next step in your professional development.</p>\n              <Button size=\"lg\" className=\"px-8\" onClick={handleEnrollClick}>\n                Enroll Now\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n      \n      {/* Enrollment Dialog */}\n      {program && (\n        <EnrollmentDialog\n          open={enrollDialogOpen}\n          onOpenChange={setEnrollDialogOpen}\n          programName={program.title}\n          programId={program.id}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":16175},"client/src/pages/training-programs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Clock, Search } from \"lucide-react\";\nimport { TrainingProgram } from \"@shared/schema\";\nimport { EnrollmentDialog } from \"@/components/ui/enrollment-dialog\";\nimport SEO from \"@/components/SEO/SEO\";\n\n// Utility function to strip markdown formatting for card previews\nconst stripMarkdown = (text: string): string => {\n  return text\n    .replace(/#+\\s/g, '') // Remove headers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic\n    .replace(/`(.*?)`/g, '$1') // Remove inline code\n    .replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, '$1') // Remove links\n    .replace(/\\n+/g, ' ') // Replace newlines with space\n    .trim();\n};\n\n// Map of category names to badge colors\nconst categoryColors: Record<string, string> = {\n  'Business': 'bg-blue-100 text-primary',\n  'Finance': 'bg-green-100 text-green-800',\n  'Leadership': 'bg-yellow-100 text-yellow-800',\n  'Marketing': 'bg-purple-100 text-purple-800',\n  'Technology': 'bg-cyan-100 text-cyan-800'\n};\n\nexport default function TrainingPrograms() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [enrollDialogOpen, setEnrollDialogOpen] = useState(false);\n  const [selectedProgram, setSelectedProgram] = useState<TrainingProgram | null>(null);\n  \n  const { data: trainingsResponse, isLoading } = useQuery<{ success: boolean; data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n  });\n  \n  const trainings = trainingsResponse?.data || [];\n  \n  // Filter trainings based on search term and category\n  const filteredTrainings = trainings.filter(program => {\n    const matchesSearch = program.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                          program.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || program.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n  \n  // Get unique categories for filter\n  const categories = trainings\n    .map(program => program.category)\n    .filter((category, index, self) => self.indexOf(category) === index);\n    \n  const handleEnrollClick = (program: TrainingProgram) => {\n    setSelectedProgram(program);\n    setEnrollDialogOpen(true);\n  };\n\n  return (\n    <div className=\"py-12 bg-gray-50\">\n      {/* SEO for Training Programs listing page */}\n      <SEO\n        title=\"Professional Training Programs | Bhumi Consultancy Services\"\n        description=\"Explore our comprehensive range of professional training programs designed to enhance your business skills and professional development.\"\n        keywords=\"training programs, professional development, business skills, certification, bhumi consultancy\"\n        canonicalUrl=\"https://bhumiconsultancy.in/training-programs\"\n        structuredData={{\n          type: 'organization',\n          data: {\n            name: 'Bhumi Consultancy Services',\n            description: 'Professional training programs and certification services',\n            url: 'https://bhumiconsultancy.in/training-programs',\n            services: trainings.map(program => program.title)\n          }\n        }}\n      />\n      \n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-primary mb-4\">Training Programs</h1>\n          <p className=\"text-lg text-gray-600\">\n            Explore our comprehensive training programs designed to enhance your business skills and professional development.\n          </p>\n        </div>\n        \n        {/* Search and Filter */}\n        <div className=\"max-w-4xl mx-auto mb-12\">\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search training programs...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              </div>\n            </div>\n            <div>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        \n        {/* Training Programs List */}\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {isLoading ? (\n            // Loading state\n            Array(6).fill(0).map((_, index) => (\n              <Card key={index} className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition duration-300 animate-pulse\">\n                <div className=\"w-full h-48 bg-gray-300\"></div>\n                <CardContent className=\"p-6\">\n                  <div className=\"w-16 h-6 bg-gray-300 rounded-full mb-2\"></div>\n                  <div className=\"w-48 h-6 bg-gray-300 rounded mb-2\"></div>\n                  <div className=\"w-full h-4 bg-gray-300 rounded mb-4\"></div>\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <div className=\"w-24 h-4 bg-gray-300 rounded\"></div>\n                    <div className=\"w-16 h-4 bg-gray-300 rounded\"></div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <div className=\"bg-gray-300 h-10 rounded flex-1\"></div>\n                    <div className=\"bg-gray-300 h-10 rounded flex-1\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : filteredTrainings.length === 0 ? (\n            <div className=\"col-span-3 text-center py-12\">\n              <h3 className=\"text-xl font-medium text-gray-600\">No training programs found</h3>\n              <p className=\"text-gray-500 mt-2\">Try adjusting your search criteria</p>\n              <Button \n                variant=\"outline\" \n                className=\"mt-4\"\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setCategoryFilter(\"all\");\n                }}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            filteredTrainings.map((program) => (\n              <Card key={program.id} className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition duration-300\">\n                <img \n                  src={program.image_path || `https://source.unsplash.com/random/600x400?business,${program.category.toLowerCase()}`} \n                  alt={program.title} \n                  className=\"w-full h-48 object-cover object-center\"\n                />\n                <CardContent className=\"p-6\">\n                  <Badge className={`${categoryColors[program.category] || 'bg-gray-100 text-gray-800'} mb-2 font-medium`}>\n                    {program.category}\n                  </Badge>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">{program.title}</h3>\n                  <p className=\"text-gray-600 mb-4 overflow-hidden\" style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical', maxHeight: '3rem' }}>{stripMarkdown(program.description)}</p>\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <span className=\"text-sm text-gray-500 flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1\" /> {program.duration}\n                    </span>\n                    <span className=\"text-sm text-primary font-semibold\">₹{(program.online_price || program.price).toLocaleString()} <span className=\"text-xs text-gray-500\">+GST</span></span>\n                  </div>\n                </CardContent>\n                <CardFooter className=\"px-6 pb-6 pt-0 flex gap-2\">\n                  <Button \n                    className=\"flex-1 w-full\" \n                    onClick={() => handleEnrollClick(program)}\n                  >\n                    Enroll\n                  </Button>\n                  <Link href={`/training-programs/${program.slug || program.id}`}>\n                    <Button variant=\"outline\" className=\"flex-1\">Details</Button>\n                  </Link>\n                </CardFooter>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n      \n      {/* Enrollment Dialog */}\n      {selectedProgram && (\n        <EnrollmentDialog\n          open={enrollDialogOpen}\n          onOpenChange={setEnrollDialogOpen}\n          programName={selectedProgram.title}\n          programId={selectedProgram.id}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9509},"client/src/pages/verify-certificate.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { CertificateCard } from \"@/components/ui/certificate-card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CertificateVerificationResult, ParticipantStatusResult } from \"@shared/cloudflare-api\";\nimport { Clock, Download, CheckCircle, XCircle } from \"lucide-react\";\nimport SEO from \"@/components/SEO/SEO\";\n\nexport default function VerifyCertificate() {\n  const [activeTab, setActiveTab] = useState(\"verify\");\n  const [isVerifyLoading, setIsVerifyLoading] = useState(false);\n  const [isStatusLoading, setIsStatusLoading] = useState(false);\n  const [verificationResult, setVerificationResult] = useState<CertificateVerificationResult | null>(null);\n  const [statusResult, setStatusResult] = useState<ParticipantStatusResult | null>(null);\n  const { toast } = useToast();\n\n  // Form state\n  const [certificateId, setCertificateId] = useState(\"\");\n  const [participantName, setParticipantName] = useState(\"\");\n  const [participantId, setParticipantId] = useState(\"\");\n  const [participantEmail, setParticipantEmail] = useState(\"\");\n\n  const handleVerifyCertificate = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!certificateId || !participantName) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsVerifyLoading(true);\n    setVerificationResult(null);\n    \n    try {\n      const res = await apiRequest('POST', '/api/verify-certificate', {\n        certificateId,\n        participantName\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        setVerificationResult(data.data);\n      } else {\n        toast({\n          title: \"Verification Failed\",\n          description: data.error || \"Certificate could not be verified\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsVerifyLoading(false);\n    }\n  };\n  \n  const handleCheckStatus = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!participantId || !participantEmail) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsStatusLoading(true);\n    setStatusResult(null);\n    \n    try {\n      const res = await apiRequest('POST', '/api/check-status', {\n        participantId,\n        email: participantEmail\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        setStatusResult(data.data);\n      } else {\n        toast({\n          title: \"Status Check Failed\",\n          description: data.error || \"Participant not found\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsStatusLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"py-12 bg-gradient-to-b from-blue-50 to-gray-50 min-h-screen\">\n      {/* SEO for verification page */}\n      <SEO\n        title=\"Certificate Verification | Check Training Status | Bhumi Consultancy\"\n        description=\"Verify the authenticity of certificates issued by Bhumi Consultancy or check your training program status with our secure verification tool.\"\n        keywords=\"certificate verification, training program status, credential verification, check certificate, bhumi consultancy\"\n        canonicalUrl=\"https://bhumiconsultancy.in/verify-certificate\"\n        structuredData={{\n          type: 'organization',\n          data: {\n            name: 'Bhumi Consultancy Services',\n            url: 'https://bhumiconsultancy.in/verify-certificate',\n            description: 'Official certificate verification tool for Bhumi Consultancy training programs.',\n            serviceType: 'Certificate Verification Service'\n          }\n        }}\n      />\n      \n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-3xl mx-auto\">\n          <div className=\"text-center mb-10 fade-in\">\n            <h1 className=\"text-4xl font-bold text-primary mb-4\">Certificate & Status Verification</h1>\n            <p className=\"text-lg text-gray-600\">\n              Check the authenticity of your certificate or view your training status.\n            </p>\n          </div>\n          \n          <Card className=\"shadow-card transition-medium\">\n            <CardContent className=\"p-6 sm:p-8\">\n              <Tabs defaultValue=\"verify\" value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2 mb-8\">\n                  <TabsTrigger value=\"verify\" className=\"text-base py-3\">Verify Certificate</TabsTrigger>\n                  <TabsTrigger value=\"status\" className=\"text-base py-3\">Check Status</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"verify\" className=\"slide-up\">\n                  <Card className=\"shadow-sm border-blue-100\">\n                    <CardHeader className=\"bg-blue-50 bg-opacity-50\">\n                      <CardTitle className=\"text-xl text-primary\">Certificate Verification</CardTitle>\n                      <CardDescription className=\"text-gray-600\">\n                        Enter your certificate ID and full name to verify the authenticity of your certificate.\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"p-6\">\n                      <form className=\"space-y-6\" onSubmit={handleVerifyCertificate}>\n                        <div>\n                          <Label htmlFor=\"certificate-id\" className=\"text-base font-medium\">Certificate ID</Label>\n                          <Input \n                            id=\"certificate-id\" \n                            value={certificateId}\n                            onChange={(e) => setCertificateId(e.target.value)}\n                            placeholder=\"Enter your certificate ID\"\n                            className=\"mt-2 h-12\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"participant-name\" className=\"text-base font-medium\">Full Name</Label>\n                          <Input \n                            id=\"participant-name\" \n                            value={participantName}\n                            onChange={(e) => setParticipantName(e.target.value)}\n                            placeholder=\"Enter your full name as on certificate\"\n                            className=\"mt-2 h-12\"\n                          />\n                        </div>\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full h-12 text-base shadow-sm hover:shadow-md transition-all\"\n                          disabled={isVerifyLoading}\n                        >\n                          {isVerifyLoading ? \"Verifying...\" : \"Verify Certificate\"}\n                        </Button>\n                      </form>\n                    </CardContent>\n                  </Card>\n                  \n                  {verificationResult && (\n                    <div className=\"mt-8 slide-up\">\n                      <CertificateCard \n                        certificate={verificationResult.certificate}\n                        participant={verificationResult.participant}\n                        training={verificationResult.training}\n                      />\n                    </div>\n                  )}\n                </TabsContent>\n                \n                <TabsContent value=\"status\" className=\"slide-up\">\n                  <Card className=\"shadow-sm border-blue-100\">\n                    <CardHeader className=\"bg-blue-50 bg-opacity-50\">\n                      <CardTitle className=\"text-xl text-primary\">Training Status Check</CardTitle>\n                      <CardDescription className=\"text-gray-600\">\n                        Enter your participant ID and email to check your training status and certificates.\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"p-6\">\n                      <form className=\"space-y-6\" onSubmit={handleCheckStatus}>\n                        <div>\n                          <Label htmlFor=\"participant-id\" className=\"text-base font-medium\">Participant ID</Label>\n                          <Input \n                            id=\"participant-id\" \n                            value={participantId}\n                            onChange={(e) => setParticipantId(e.target.value)}\n                            placeholder=\"Enter your participant ID\"\n                            className=\"mt-2 h-12\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"participant-email\" className=\"text-base font-medium\">Email Address</Label>\n                          <Input \n                            id=\"participant-email\" \n                            type=\"email\"\n                            value={participantEmail}\n                            onChange={(e) => setParticipantEmail(e.target.value)}\n                            placeholder=\"Enter your email address\"\n                            className=\"mt-2 h-12\"\n                          />\n                        </div>\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full h-12 text-base shadow-sm hover:shadow-md transition-all\"\n                          disabled={isStatusLoading}\n                        >\n                          {isStatusLoading ? \"Checking...\" : \"Check Status\"}\n                        </Button>\n                      </form>\n                    </CardContent>\n                  </Card>\n                  \n                  {statusResult && (\n                    <div className=\"mt-8 slide-up\">\n                      <Card className=\"mb-6 shadow-soft border-blue-100 overflow-hidden\">\n                        <div className=\"bg-blue-50 p-4 border-b border-blue-100\">\n                          <h3 className=\"text-xl font-bold text-primary\">Participant Information</h3>\n                        </div>\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center gap-4 mb-5\">\n                            <div className=\"bg-blue-100 p-3 rounded-full shadow-sm\">\n                              <CheckCircle className=\"text-primary h-6 w-6\" />\n                            </div>\n                            <div>\n                              <div className=\"text-lg font-bold text-gray-800\">{statusResult.participant.name}</div>\n                              <div className=\"text-sm text-gray-600 flex items-center gap-1\">\n                                <span>ID:</span> \n                                <code className=\"bg-gray-100 px-2 py-0.5 rounded font-mono text-sm\">\n                                  {statusResult.participant.participantId}\n                                </code>\n                              </div>\n                            </div>\n                            <div className=\"ml-auto\">\n                              <Badge className={`px-3 py-1 text-sm ${\n                                statusResult.participant.status === 'active'\n                                  ? 'bg-green-100 text-green-800 border-green-200' \n                                  : statusResult.participant.status === 'completed'\n                                  ? 'bg-blue-100 text-blue-800 border-blue-200'\n                                  : 'bg-yellow-100 text-yellow-800 border-yellow-200'\n                              }`}>\n                                <span className={`h-2 w-2 rounded-full mr-1.5 inline-block ${\n                                  statusResult.participant.status === 'active'\n                                    ? 'bg-green-600 animate-pulse' \n                                    : statusResult.participant.status === 'completed'\n                                    ? 'bg-blue-600'\n                                    : 'bg-yellow-600'\n                                }`}></span>\n                                {statusResult.participant.status.charAt(0).toUpperCase() + statusResult.participant.status.slice(1)}\n                              </Badge>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                      <div className=\"mb-4 flex items-center\">\n                        <h3 className=\"text-xl font-bold text-gray-800\">Enrolled Programs</h3>\n                        <Badge className=\"ml-3 bg-blue-50 text-blue-800 border-blue-200\">\n                          {statusResult.enrolledPrograms.length} {statusResult.enrolledPrograms.length === 1 ? 'Program' : 'Programs'}\n                        </Badge>\n                      </div>\n                      \n                      {statusResult.enrolledPrograms.length === 0 ? (\n                        <Card className=\"shadow-soft border-gray-100\">\n                          <CardContent className=\"p-10 text-center\">\n                            <XCircle className=\"h-14 w-14 text-gray-400 mx-auto mb-3\" />\n                            <p className=\"text-gray-600 text-lg\">No enrolled programs found</p>\n                          </CardContent>\n                        </Card>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {statusResult.enrolledPrograms.map((program, index) => (\n                            <Card key={index} className=\"shadow-card shadow-card-hover transition-medium border-gray-100\">\n                              <CardContent className=\"p-6\">\n                                <div className=\"flex flex-wrap md:flex-nowrap justify-between items-start gap-3 mb-4\">\n                                  <h3 className=\"text-lg font-bold text-gray-800\">{program.name}</h3>\n                                  {program.certificateId ? (\n                                    <Badge className=\"bg-green-100 text-green-800 border-green-200 px-3 py-1\">\n                                      <span className=\"h-2 w-2 rounded-full bg-green-600 mr-1.5 inline-block\"></span> \n                                      Completed\n                                    </Badge>\n                                  ) : (\n                                    <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200 px-3 py-1\">\n                                      <span className=\"h-2 w-2 rounded-full bg-yellow-600 mr-1.5 inline-block animate-pulse\"></span> \n                                      In Progress\n                                    </Badge>\n                                  )}\n                                </div>\n                                \n                                {program.completionDate && (\n                                  <div className=\"flex items-center text-gray-600 mb-4 text-sm bg-gray-50 p-2 rounded-md inline-block\">\n                                    <Clock className=\"h-4 w-4 mr-2 text-gray-500\" /> \n                                    Completed on: <span className=\"font-medium ml-1\">{new Date(program.completionDate).toLocaleDateString('en-US', {\n                                      year: 'numeric',\n                                      month: 'long',\n                                      day: 'numeric'\n                                    })}</span>\n                                  </div>\n                                )}\n                                \n                                {program.certificateId && (\n                                  <div className=\"mt-4\">\n                                    <Button \n                                      className=\"gap-2 shadow-md hover:shadow-lg transition-all duration-300\"\n                                      onClick={async () => {\n                                        // Use the downloadPublicCertificate function instead of direct access\n                                        if (program.certificateId) {\n                                          toast({\n                                            description: \"Downloading certificate...\",\n                                            duration: 3000\n                                          });\n                                          \n                                          try {\n                                            const response = await apiRequest('GET', `/api/certificates/download/${program.certificateId}`, undefined, false);\n                                            // Parse the response as JSON\n                                            const responseData = await response.json();\n                                            \n                                            console.log(\"Certificate download response:\", responseData);\n                                            \n                                            // Check if the response is successful and contains data\n                                            if (responseData.success && responseData.data) {\n                                              // Try to find a URL in the response - either downloadUrl or url property\n                                              const downloadUrl = responseData.data.downloadUrl || responseData.data.url;\n                                              \n                                              if (downloadUrl) {\n                                                // Open the actual download URL in a new tab\n                                                window.open(downloadUrl, '_blank');\n                                              } else {\n                                                console.log(\"Download response data:\", responseData.data);\n                                                throw new Error(\"No download URL found in response\");\n                                              }\n                                            } else {\n                                              throw new Error(\"Failed to get download URL\");\n                                            }\n                                          } catch (error) {\n                                            toast({\n                                              variant: \"destructive\",\n                                              title: \"Download failed\",\n                                              description: \"Could not download the certificate. Please try again.\",\n                                              duration: 3000\n                                            });\n                                          }\n                                        }\n                                      }}\n                                    >\n                                      <Download size={18} /> Download Certificate\n                                    </Button>\n                                    <div className=\"mt-2 text-xs text-gray-500\">\n                                      Certificate ID: <code className=\"bg-gray-100 px-1.5 py-0.5 rounded font-mono\">{program.certificateId}</code>\n                                    </div>\n                                  </div>\n                                )}\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20479},"client/src/components/SEO/SEO.tsx":{"content":"import { Helmet } from 'react-helmet';\nimport StructuredData from './StructuredData';\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  keywords?: string;\n  canonicalUrl?: string;\n  ogImage?: string;\n  robots?: string;\n  lang?: string;\n  structuredData?: {\n    type: 'organization' | 'localBusiness' | 'service' | 'trainingCourse';\n    data: Record<string, any>;\n  };\n}\n\nexport default function SEO({\n  title = 'Bhumi Consultancy Services | Professional Business Solutions',\n  description = 'Bhumi Consultancy offers professional business consulting, training programs, and certification services to help businesses achieve their full potential.',\n  keywords = 'business consulting, training programs, certification, audit services, bhumi consultancy',\n  canonicalUrl = import.meta.env.VITE_DOMAIN || 'https://bhumiconsultancy.in',\n  ogImage = '/images/og-image.jpg',\n  robots = 'index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1',\n  lang = 'en',\n  structuredData\n}: SEOProps) {\n  \n  // Base title for the company\n  const baseTitle = 'Bhumi Consultancy Services';\n  \n  // Format the title - if it doesn't already contain the base title, append it\n  const formattedTitle = title.includes(baseTitle) \n    ? title \n    : `${title} | ${baseTitle}`;\n  \n  return (\n    <>\n      <Helmet>\n        {/* Basic Meta Tags */}\n        <title>{formattedTitle}</title>\n        <meta name=\"description\" content={description} />\n        <meta name=\"keywords\" content={keywords} />\n        <meta name=\"robots\" content={robots} />\n        <meta name=\"language\" content={lang} />\n        <meta name=\"author\" content=\"Bhumi Consultancy Services\" />\n        <meta name=\"generator\" content=\"React + Vite\" />\n        <meta name=\"rating\" content=\"general\" />\n        \n        {/* Geographic Location */}\n        <meta name=\"geo.region\" content=\"IN-HR\" />\n        <meta name=\"geo.placename\" content=\"Faridabad, Haryana, India\" />\n        <meta name=\"geo.position\" content=\"28.4089;77.3178\" />\n        <meta name=\"ICBM\" content=\"28.4089, 77.3178\" />\n        \n        {/* Mobile Optimization */}\n        <meta name=\"theme-color\" content=\"#1a365d\" />\n        <meta name=\"msapplication-TileColor\" content=\"#1a365d\" />\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n        \n        {/* HTTP-Equiv Tags */}\n        <meta httpEquiv=\"Content-Language\" content={lang} />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        \n        {/* Canonical Link */}\n        <link rel=\"canonical\" href={canonicalUrl} />\n        \n        {/* DNS Prefetch for external domains */}\n        <link rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com\" />\n        <link rel=\"dns-prefetch\" href=\"https://source.unsplash.com\" />\n        \n        {/* Preconnect to external domains for performance */}\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        \n        {/* Resource Hints for Performance */}\n        <link rel=\"preload\" href=\"/favicon.png\" as=\"image\" type=\"image/png\" />\n        \n        {/* Prefetch likely next pages for faster navigation */}\n        <link rel=\"prefetch\" href=\"/training-programs\" />\n        <link rel=\"prefetch\" href=\"/about\" />\n        <link rel=\"prefetch\" href=\"/contact\" />\n        \n        {/* Performance and Loading Hints */}\n        <meta name=\"format-detection\" content=\"telephone=no\" />\n        <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"application-name\" content=\"Bhumi Consultancy\" />\n        \n        {/* Image loading optimization hint */}\n        <meta name=\"image-src\" content=\"self https://source.unsplash.com https://bhumiconsultancy.in\" />\n        \n        {/* Critical resource hints */}\n        <link rel=\"modulepreload\" href=\"/src/main.tsx\" />\n        <link rel=\"preload\" href=\"/src/index.css\" as=\"style\" />\n        \n        {/* Open Graph / Facebook */}\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content={canonicalUrl} />\n        <meta property=\"og:title\" content={formattedTitle} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={ogImage} />\n        \n        {/* Twitter */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:url\" content={canonicalUrl} />\n        <meta name=\"twitter:title\" content={formattedTitle} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={ogImage} />\n      </Helmet>\n      \n      {/* Add JSON-LD structured data if provided */}\n      {structuredData && (\n        <StructuredData \n          type={structuredData.type} \n          data={structuredData.data} \n        />\n      )}\n    </>\n  );\n}","size_bytes":5016},"client/src/components/SEO/StructuredData.tsx":{"content":"import { useEffect } from 'react';\n\ninterface StructuredDataProps {\n  type: 'organization' | 'localBusiness' | 'service' | 'trainingCourse';\n  data: Record<string, any>;\n}\n\nexport default function StructuredData({ type, data }: StructuredDataProps) {\n  useEffect(() => {\n    // Create the JSON-LD script element\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    \n    // Generate appropriate JSON-LD schema based on type\n    let jsonLd = {};\n    \n    if (type === 'organization') {\n      jsonLd = {\n        '@context': 'https://schema.org',\n        '@type': 'Organization',\n        name: data.name,\n        url: data.url,\n        logo: data.logo,\n        description: data.description,\n        address: data.address,\n        contactPoint: {\n          '@type': 'ContactPoint',\n          telephone: data.telephone,\n          contactType: 'customer service',\n          email: data.email\n        },\n        sameAs: data.socialLinks\n      };\n    } else if (type === 'localBusiness') {\n      jsonLd = {\n        '@context': 'https://schema.org',\n        '@type': 'LocalBusiness',\n        name: data.name,\n        image: data.image,\n        url: data.url,\n        telephone: data.telephone,\n        address: {\n          '@type': 'PostalAddress',\n          streetAddress: data.address.street,\n          addressLocality: data.address.locality,\n          addressRegion: data.address.region,\n          postalCode: data.address.postalCode,\n          addressCountry: data.address.country\n        },\n        geo: {\n          '@type': 'GeoCoordinates',\n          latitude: data.geo.latitude,\n          longitude: data.geo.longitude\n        },\n        openingHoursSpecification: data.openingHours.map((hours: any) => ({\n          '@type': 'OpeningHoursSpecification',\n          dayOfWeek: hours.dayOfWeek,\n          opens: hours.opens,\n          closes: hours.closes\n        })),\n        priceRange: data.priceRange\n      };\n    } else if (type === 'service') {\n      jsonLd = {\n        '@context': 'https://schema.org',\n        '@type': 'Service',\n        serviceType: data.serviceType,\n        provider: {\n          '@type': 'Organization',\n          name: data.provider.name,\n          url: data.provider.url\n        },\n        description: data.description,\n        areaServed: data.areaServed,\n        offers: {\n          '@type': 'Offer',\n          availability: 'https://schema.org/InStock',\n          price: data.price,\n          priceCurrency: data.priceCurrency\n        }\n      };\n    } else if (type === 'trainingCourse') {\n      jsonLd = {\n        '@context': 'https://schema.org',\n        '@type': 'Course',\n        name: data.name,\n        description: data.description,\n        provider: {\n          '@type': 'Organization',\n          name: data.provider.name,\n          url: data.provider.url\n        },\n        educationalCredentialAwarded: data.credential,\n        timeRequired: data.duration,\n        offers: {\n          '@type': 'Offer',\n          price: data.price,\n          priceCurrency: data.priceCurrency\n        }\n      };\n    }\n    \n    script.innerHTML = JSON.stringify(jsonLd);\n    document.head.appendChild(script);\n    \n    // Cleanup function to remove the script when component unmounts\n    return () => {\n      document.head.removeChild(script);\n    };\n  }, [type, data]); // Re-run if type or data changes\n  \n  // This component doesn't render anything visually\n  return null;\n}","size_bytes":3444},"client/src/components/home/ContactSection.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, Mail, Phone, Clock, Facebook, Twitter, Linkedin, Instagram } from \"lucide-react\";\n\nexport default function ContactSection() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Form state\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name || !email || !subject || !message) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const res = await apiRequest('POST', '/api/contact', {\n        name,\n        email,\n        phone,\n        subject,\n        message\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        toast({\n          title: \"Message Sent\",\n          description: \"Thank you for your message. We will get back to you soon!\",\n        });\n        \n        // Reset form\n        setName(\"\");\n        setEmail(\"\");\n        setPhone(\"\");\n        setSubject(\"\");\n        setMessage(\"\");\n      } else {\n        toast({\n          title: \"Submission Failed\",\n          description: data.error || \"There was a problem sending your message\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <section id=\"contact\" className=\"section-spacing bg-gray-50\">\n      <div className=\"mx-responsive\">\n        <div className=\"text-center content-spacing\">\n          <h2 className=\"heading-responsive font-bold text-primary mb-4\">Contact Us</h2>\n          <p className=\"subtitle-responsive max-w-3xl mx-auto\">\n            Get in touch with our team to discuss your business needs.\n          </p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-5 gap-8 lg:gap-10 max-w-content-md md:max-w-none mx-auto\">\n          {/* Contact Information - optimized for mobile */}\n          <Card className=\"lg:col-span-2 shadow-card h-full\">\n            <CardContent className=\"p-6 md:p-8\">\n              <h3 className=\"text-xl md:text-2xl font-bold text-primary mb-6 md:mb-8\">Our Information</h3>\n              \n              <div className=\"space-y-6\">\n                {/* Location with better tap target */}\n                <div className=\"flex items-start\">\n                  <div className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-12 h-12 flex-shrink-0\">\n                    <MapPin size={24} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-800 mb-2 text-base md:text-lg\">Location</h4>\n                    <p className=\"text-gray-600 text-sm md:text-base\">\n                      <a \n                        href=\"https://maps.app.goo.gl/q8xTrJTi7XNRbT7Z8\" \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"hover:text-primary hover:underline transition-colors block py-1\"\n                      >\n                        MCF-6503, Sanjay Colony, Sector-23, 33 Feet Road<br/>\n                        Near Rana Aata Chakki, Faridabad, Haryana 121005\n                      </a>\n                    </p>\n                  </div>\n                </div>\n                \n                {/* Email with better tap target */}\n                <div className=\"flex items-start\">\n                  <div className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-12 h-12 flex-shrink-0\">\n                    <Mail size={24} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-800 mb-2 text-base md:text-lg\">Email</h4>\n                    <div className=\"text-gray-600 text-sm md:text-base\">\n                      <a \n                        href=\"mailto:bcs04062013@gmail.com\" \n                        className=\"hover:text-primary hover:underline transition-colors block py-1\"\n                      >\n                        bcs04062013@gmail.com\n                      </a>\n                      <a \n                        href=\"mailto:varjunupadhyay@gmail.com\" \n                        className=\"hover:text-primary hover:underline transition-colors block py-1\"\n                      >\n                        varjunupadhyay@gmail.com\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Phone with better tap target */}\n                <div className=\"flex items-start\">\n                  <div className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-12 h-12 flex-shrink-0\">\n                    <Phone size={24} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-800 mb-2 text-base md:text-lg\">Phone</h4>\n                    <div className=\"text-gray-600 text-sm md:text-base\">\n                      <a \n                        href=\"tel:+917827284027\" \n                        className=\"hover:text-primary hover:underline transition-colors block py-1\"\n                      >\n                        +91 7827284027\n                      </a>\n                      <a \n                        href=\"tel:+918700761218\" \n                        className=\"hover:text-primary hover:underline transition-colors block py-1\"\n                      >\n                        +91 8700761218\n                      </a>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Business Hours with better tap target */}\n                <div className=\"flex items-start\">\n                  <div className=\"bg-yellow-500 p-3 rounded-full mr-4 text-white flex items-center justify-center w-12 h-12 flex-shrink-0\">\n                    <Clock size={24} />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-800 mb-2 text-base md:text-lg\">Business Hours</h4>\n                    <p className=\"text-gray-600 text-sm md:text-base\">\n                      Monday - Friday: 9:00 AM - 6:00 PM<br/>\n                      Saturday: 10:00 AM - 2:00 PM\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Social Media with better tap targets */}\n              <div className=\"mt-10\">\n                <h4 className=\"font-medium text-gray-800 mb-4 text-base md:text-lg\">Follow Us</h4>\n                <div className=\"flex space-x-4\">\n                  <a href=\"https://www.facebook.com/share/19gk3NuZ5F/\" target=\"_blank\" rel=\"noopener noreferrer\" \n                     className=\"bg-blue-500 p-2.5 rounded-full text-white hover:bg-blue-600 transition-medium shadow-sm hover:shadow-md flex items-center justify-center w-10 h-10 md:w-11 md:h-11\">\n                    <Facebook size={22} />\n                  </a>\n                  <a href=\"https://x.com/veerupyy?t=3j_t11dcqUTDxbptxjEw_w&s=09\" target=\"_blank\" rel=\"noopener noreferrer\" \n                     className=\"bg-blue-400 p-2.5 rounded-full text-white hover:bg-blue-500 transition-medium shadow-sm hover:shadow-md flex items-center justify-center w-10 h-10 md:w-11 md:h-11\">\n                    <Twitter size={22} />\n                  </a>\n                  <a href=\"https://www.linkedin.com/in/veerarjun-upadhyay-a41001313?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app\" target=\"_blank\" rel=\"noopener noreferrer\" \n                     className=\"bg-blue-700 p-2.5 rounded-full text-white hover:bg-blue-800 transition-medium shadow-sm hover:shadow-md flex items-center justify-center w-10 h-10 md:w-11 md:h-11\">\n                    <Linkedin size={22} />\n                  </a>\n                  <a href=\"https://www.instagram.com/veerarjunupadhyay?igsh=MXA5bmtkNHZlbmV5eg==\" target=\"_blank\" rel=\"noopener noreferrer\" \n                     className=\"bg-pink-500 p-2.5 rounded-full text-white hover:bg-pink-600 transition-medium shadow-sm hover:shadow-md flex items-center justify-center w-10 h-10 md:w-11 md:h-11\">\n                    <Instagram size={22} />\n                  </a>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Contact Form - optimized for mobile */}\n          <Card className=\"lg:col-span-3 shadow-card\">\n            <CardContent className=\"p-6 md:p-8\">\n              <h3 className=\"text-xl md:text-2xl font-bold text-primary mb-6 md:mb-7\">Send Us a Message</h3>\n              \n              <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                <div className=\"grid sm:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-base font-medium mb-2 block\">Full Name</Label>\n                    <Input \n                      id=\"name\" \n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                      className=\"h-12 text-base\" \n                      placeholder=\"Your full name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-base font-medium mb-2 block\">Email Address</Label>\n                    <Input \n                      id=\"email\" \n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"h-12 text-base\" \n                      placeholder=\"Your email address\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"phone\" className=\"text-base font-medium mb-2 block\">Phone Number</Label>\n                  <Input \n                    id=\"phone\" \n                    type=\"tel\"\n                    value={phone}\n                    onChange={(e) => setPhone(e.target.value)}\n                    className=\"h-12 text-base\" \n                    placeholder=\"Your phone number\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"subject\" className=\"text-base font-medium mb-2 block\">Subject</Label>\n                  <Select value={subject} onValueChange={setSubject}>\n                    <SelectTrigger className=\"h-12 text-base\">\n                      <SelectValue placeholder=\"Select a subject\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Consultancy Services\">Consultancy Services</SelectItem>\n                      <SelectItem value=\"Audit Preparation\">Audit Preparation</SelectItem>\n                      <SelectItem value=\"Training Programs\">Training Programs</SelectItem>\n                      <SelectItem value=\"Certificate Verification\">Certificate Verification</SelectItem>\n                      <SelectItem value=\"Other Inquiry\">Other Inquiry</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"message\" className=\"text-base font-medium mb-2 block\">Message</Label>\n                  <Textarea \n                    id=\"message\" \n                    rows={5}\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    className=\"resize-none min-h-[140px] text-base\" \n                    placeholder=\"Your message\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary hover:bg-accent h-12 text-base shadow-md hover:shadow-lg transition-all font-medium\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":13022},"client/src/components/home/HeroBanner.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\nimport { ArrowRight, CheckCircle, BarChart, Target } from \"lucide-react\";\n\nexport default function HeroBanner() {\n  return (\n    <section id=\"home\" className=\"section-spacing bg-gradient-to-br from-primary to-primary-dark text-white overflow-hidden relative\">\n      {/* Background pattern overlay */}\n      <div className=\"absolute inset-0 bg-grid-white/[0.05] bg-[length:20px_20px]\"></div>\n      \n      {/* Accent Circles - symmetrically placed */}\n      <div className=\"absolute -top-24 -right-24 w-64 h-64 bg-blue-400 opacity-10 rounded-full blur-3xl\"></div>\n      <div className=\"absolute -top-24 -left-24 w-64 h-64 bg-blue-400 opacity-10 rounded-full blur-3xl\"></div>\n      <div className=\"absolute -bottom-24 -right-24 w-96 h-96 bg-blue-500 opacity-5 rounded-full blur-3xl\"></div>\n      <div className=\"absolute -bottom-24 -left-24 w-96 h-96 bg-blue-500 opacity-5 rounded-full blur-3xl\"></div>\n      \n      <div className=\"mx-responsive py-responsive relative\">\n        <div className=\"symmetrical-grid-2 items-center\">\n          <motion.div \n            className=\"order-2 md:order-1 flex flex-col justify-center\"\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ \n              duration: 0.7,\n              ease: \"easeOut\"\n            }}\n          >\n            <motion.div\n              className=\"mb-4 inline-block\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.1, duration: 0.7 }}\n            >\n              <span className=\"bg-blue-500 bg-opacity-30 px-4 py-1.5 rounded-full text-sm sm:text-base font-medium tracking-wide text-blue-100\">\n                Trusted Business Partner\n              </span>\n            </motion.div>\n            \n            <motion.h1 \n              className=\"heading-responsive font-bold leading-tight mb-4 sm:mb-6 tracking-tight\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2, duration: 0.7 }}\n            >\n              Professional <span className=\"text-blue-300\">Consultancy</span> Services for Your Business\n            </motion.h1>\n            \n            <motion.p \n              className=\"text-responsive mb-6 sm:mb-8 text-blue-100 max-w-xl leading-relaxed\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.7 }}\n            >\n              Expert audit preparation, business training programs, and comprehensive consultancy services to help your business thrive in today's competitive market.\n            </motion.p>\n            \n            <motion.div\n              className=\"space-y-4 mb-8 md:pr-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.5, duration: 0.7 }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle size={18} className=\"text-blue-300 flex-shrink-0\" />\n                <span className=\"text-blue-100 text-responsive\">ISO certification and compliance solutions</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle size={18} className=\"text-blue-300 flex-shrink-0\" />\n                <span className=\"text-blue-100 text-responsive\">Specialized industry training programs</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle size={18} className=\"text-blue-300 flex-shrink-0\" />\n                <span className=\"text-blue-100 text-responsive\">Strategic business consulting services</span>\n              </div>\n            </motion.div>\n            \n            <motion.div \n              className=\"flex flex-wrap gap-4\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.6, duration: 0.7 }}\n            >\n              <Link href=\"/about\">\n                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                  <Button className=\"font-medium shadow-lg text-sm sm:text-base rounded-md px-6 py-6 h-auto gap-2 bg-blue-600 hover:bg-blue-700\">\n                    Explore Our Services\n                    <ArrowRight size={16} />\n                  </Button>\n                </motion.div>\n              </Link>\n              <Link href=\"/contact\">\n                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                  <Button variant=\"outline\" className=\"bg-primary bg-opacity-50 border-blue-400 text-white hover:bg-primary-dark hover:bg-opacity-80 font-medium shadow-lg text-sm sm:text-base rounded-md px-6 py-6 h-auto\">\n                    Contact Us\n                  </Button>\n                </motion.div>\n              </Link>\n            </motion.div>\n          </motion.div>\n          \n          <motion.div \n            className=\"order-1 md:order-2 flex justify-center md:justify-end mb-8 md:mb-0 relative\"\n            initial={{ opacity: 0, x: 50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.7 }}\n          >\n            {/* Image frame with shadow and effect */}\n            <div className=\"relative z-10 w-full max-w-md mx-auto md:mx-0\">\n              <div className=\"absolute -inset-1 bg-gradient-to-tr from-blue-400 to-blue-600 rounded-lg blur opacity-30\"></div>\n              <motion.div\n                className=\"relative\"\n                whileHover={{ scale: 1.02 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 10 }}\n              >\n                <img \n                  src=\"https://replit.com/cdn-cgi/image/format=auto/https://huggingface.co/Aman6u5/ddddttyyuu/resolve/main/veer%20arjum.png?download=true\" \n                  alt=\"Managing Director - Veer Arjun Upadhyay\" \n                  className=\"rounded-lg shadow-xl w-full h-auto relative z-10\"\n                />\n                \n                {/* Decorative elements */}\n                <div className=\"absolute -bottom-5 -right-5 bg-white bg-opacity-90 p-3 rounded-lg shadow-lg z-20\">\n                  <BarChart className=\"text-primary w-6 h-6 sm:w-8 sm:h-8\" />\n                </div>\n                \n                <div className=\"absolute -top-5 -left-5 bg-white bg-opacity-90 p-3 rounded-lg shadow-lg z-20\">\n                  <Target className=\"text-primary w-6 h-6 sm:w-8 sm:h-8\" />\n                </div>\n              </motion.div>\n            </div>\n            \n            {/* Decorative background pattern */}\n            <div className=\"absolute -z-10 w-full h-full scale-110 bg-blue-500 opacity-5 rounded-full blur-2xl\"></div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6967},"client/src/components/home/ServicesSection.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { BarChart3, FileText, CheckCircle, Building2, ClipboardCheck, Users, Award, Target, TrendingUp, Briefcase, Settings } from \"lucide-react\";\nimport { Service } from \"@shared/schema\";\nimport { motion } from \"framer-motion\";\nimport { GridSkeleton } from \"@/components/ui/loading-animation\";\n\nexport default function ServicesSection() {\n  const { data: services, isLoading } = useQuery<{ success: boolean; data: Service[] }>({\n    queryKey: ['/api/services'],\n  });\n\n  // Mapping of icon names to Lucide icons\n  const iconMap: Record<string, React.ReactNode> = {\n    'chart-line': <BarChart3 className=\"text-white text-2xl\" />,\n    'file-invoice': <FileText className=\"text-white text-2xl\" />,\n    'building': <Building2 className=\"text-white text-2xl\" />,\n    'clipboard-check': <ClipboardCheck className=\"text-white text-2xl\" />,\n    'users': <Users className=\"text-white text-2xl\" />,\n    'award': <Award className=\"text-white text-2xl\" />,\n    'target': <Target className=\"text-white text-2xl\" />,\n    'trending-up': <TrendingUp className=\"text-white text-2xl\" />,\n    'briefcase': <Briefcase className=\"text-white text-2xl\" />,\n    'settings': <Settings className=\"text-white text-2xl\" />\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 12\n      }\n    }\n  };\n\n  return (\n    <section id=\"services\" className=\"section-spacing bg-white\">\n      <div className=\"mx-responsive\">\n        <motion.div \n          className=\"text-center content-spacing\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <h2 className=\"heading-responsive font-bold text-primary mb-3 md:mb-4\">Our Services</h2>\n          <p className=\"subtitle-responsive max-w-3xl mx-auto\">\n            We provide comprehensive business solutions tailored to your specific needs.\n          </p>\n        </motion.div>\n        \n        {isLoading ? (\n          <GridSkeleton count={2} className=\"symmetrical-grid-2\" />\n        ) : (\n          <motion.div \n            className=\"symmetrical-grid-2\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            {services?.data.map((service) => (\n              <motion.div\n                key={service.id}\n                variants={itemVariants}\n                whileHover={{ scale: 1.02 }}\n                transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n              >\n                <Card className=\"bg-gray-50 rounded-lg shadow-card shadow-card-hover transition-medium border-t-4 border-primary h-full\">\n                  <CardContent className=\"p-5 sm:p-6 md:p-8 h-full flex flex-col\">\n                    <div className=\"flex items-start mb-4 md:mb-5\">\n                      <motion.div \n                        className=\"bg-yellow-500 p-3 rounded-full mr-4 flex items-center justify-center w-[44px] h-[44px] sm:w-[52px] sm:h-[52px]\"\n                        whileHover={{ rotate: [0, -10, 10, -10, 0] }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        {iconMap[service.icon] || <Briefcase className=\"text-white text-2xl\" />}\n                      </motion.div>\n                      <h3 className=\"text-xl md:text-2xl font-bold text-primary pt-1.5\">{service.title}</h3>\n                    </div>\n                    \n                    {/* Show the features list with improved spacing and sizing */}\n                    <div className=\"mb-6\">\n                      <h4 className=\"text-sm sm:text-base font-semibold mb-3\">Key Features:</h4>\n                      <ul className=\"text-sm sm:text-base text-gray-700 space-y-2 list-none\">\n                        {Array.isArray(service.features) && service.features.map((feature, idx) => (\n                          <li key={idx} className=\"flex items-start\">\n                            <CheckCircle className=\"h-4 w-4 sm:h-5 sm:w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                            <span>{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    <motion.div \n                      className=\"mt-auto\"\n                      whileHover={{ x: 5 }}\n                      transition={{ type: \"spring\", stiffness: 400, damping: 10 }}\n                    >\n                      <Link \n                        href={`/services/${service.id}`} \n                        className=\"inline-flex items-center text-primary font-medium hover:text-accent transition-medium text-base\"\n                      >\n                        Learn more <span className=\"ml-2\">→</span>\n                      </Link>\n                    </motion.div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5400},"client/src/components/home/TrainingSection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { Clock } from \"lucide-react\";\nimport { TrainingProgram } from \"@shared/schema\";\nimport { EnrollmentDialog } from \"@/components/ui/enrollment-dialog\";\n\n// Utility function to strip markdown formatting for card previews\nconst stripMarkdown = (text: string): string => {\n  return text\n    .replace(/#+\\s/g, '') // Remove headers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic\n    .replace(/`(.*?)`/g, '$1') // Remove inline code\n    .replace(/\\[([^\\]]+)\\]\\([^\\)]+\\)/g, '$1') // Remove links\n    .replace(/\\n+/g, ' ') // Replace newlines with space\n    .trim();\n};\n\n// Map of category names to badge colors\nconst categoryColors: Record<string, string> = {\n  'Business': 'bg-blue-100 text-primary',\n  'Finance': 'bg-green-100 text-green-800',\n  'Leadership': 'bg-yellow-100 text-yellow-800',\n  'Marketing': 'bg-purple-100 text-purple-800',\n  'Technology': 'bg-cyan-100 text-cyan-800'\n};\n\nexport default function TrainingSection() {\n  const [enrollDialogOpen, setEnrollDialogOpen] = useState(false);\n  const [selectedProgram, setSelectedProgram] = useState<TrainingProgram | null>(null);\n  \n  const { data: trainings, isLoading } = useQuery<{ success: boolean; data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n  });\n  \n  const handleEnrollClick = (program: TrainingProgram) => {\n    setSelectedProgram(program);\n    setEnrollDialogOpen(true);\n  };\n\n  return (\n    <section id=\"training\" className=\"section-spacing bg-gray-50\">\n      <div className=\"mx-responsive\">\n        <div className=\"text-center content-spacing\">\n          <h2 className=\"heading-responsive font-bold text-primary mb-3 md:mb-4\">Training Programs</h2>\n          <p className=\"subtitle-responsive max-w-3xl mx-auto\">\n            Develop your team's skills with our industry-leading training programs.\n          </p>\n        </div>\n        \n        <div className=\"symmetrical-grid\">\n          {isLoading ? (\n            // Loading state with symmetrical layout\n            Array(3).fill(0).map((_, index) => (\n              <Card key={index} className=\"bg-white rounded-lg shadow-card overflow-hidden transition-medium animate-pulse\">\n                <div className=\"w-full h-48 sm:h-52 bg-gray-300\"></div>\n                <CardContent className=\"p-5 sm:p-6 md:p-7\">\n                  <div className=\"w-20 h-6 bg-gray-300 rounded-full mb-3\"></div>\n                  <div className=\"w-3/4 h-7 bg-gray-300 rounded mb-3\"></div>\n                  <div className=\"w-full h-4 bg-gray-300 rounded mb-2\"></div>\n                  <div className=\"w-5/6 h-4 bg-gray-300 rounded mb-5\"></div>\n                  <div className=\"flex justify-between items-center mb-5\">\n                    <div className=\"w-24 h-4 bg-gray-300 rounded\"></div>\n                    <div className=\"w-16 h-4 bg-gray-300 rounded\"></div>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"bg-gray-300 h-10 rounded flex-1\"></div>\n                    <div className=\"bg-gray-300 h-10 rounded flex-1\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            trainings?.data.slice(0, 3).map((program) => (\n              <Card key={program.id} className=\"bg-white rounded-lg shadow-card shadow-card-hover overflow-hidden transition-medium\">\n                <div className=\"relative\">\n                  <img \n                    src={program.image_path || `https://source.unsplash.com/random/600x400?business,${program.category.toLowerCase()}`} \n                    alt={program.title} \n                    className=\"w-full h-48 sm:h-52 object-cover object-center\"\n                  />\n                  <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-b from-transparent to-black opacity-10\"></div>\n                </div>\n                <CardContent className=\"p-5 sm:p-6 md:p-7\">\n                  <Badge className={`${categoryColors[program.category] || 'bg-gray-100 text-gray-800'} mb-2 font-medium px-3 py-1`}>\n                    {program.category}\n                  </Badge>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2 line-clamp-2\">{program.title}</h3>\n                  <p className=\"text-gray-600 mb-5 line-clamp-2\">{stripMarkdown(program.description)}</p>\n                  <div className=\"flex justify-between items-center mb-5\">\n                    <span className=\"text-sm sm:text-base text-gray-500 flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1.5\" /> {program.duration}\n                    </span>\n                    <span className=\"text-sm sm:text-base text-primary font-semibold\">₹{(program.online_price || program.price).toLocaleString()} <span className=\"text-xs text-gray-500\">+GST</span></span>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Button \n                      className=\"flex-1 w-full text-sm sm:text-base py-2\" \n                      onClick={() => handleEnrollClick(program)}\n                    >\n                      Enroll Now\n                    </Button>\n                    <Link href={`/training-programs/${program.slug || program.id}`} className=\"flex-1\">\n                      <Button variant=\"outline\" className=\"w-full text-sm sm:text-base py-2\">Details</Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n        \n        <div className=\"text-center mt-10 sm:mt-12\">\n          <Link href=\"/training-programs\">\n            <Button variant=\"outline\" \n              className=\"inline-flex items-center border-primary text-primary hover:bg-primary hover:text-white text-base sm:text-lg py-2 px-5 sm:py-3 sm:px-7 transition-all\"\n            >\n              View All Training Programs <span className=\"ml-2\">→</span>\n            </Button>\n          </Link>\n        </div>\n      </div>\n      \n      {/* Enrollment Dialog */}\n      {selectedProgram && (\n        <EnrollmentDialog\n          open={enrollDialogOpen}\n          onOpenChange={setEnrollDialogOpen}\n          programName={selectedProgram.title}\n          programId={selectedProgram.id}\n        />\n      )}\n    </section>\n  );\n}\n","size_bytes":6574},"client/src/components/home/VerifySection.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { CertificateCard } from \"@/components/ui/certificate-card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CertificateVerificationResult } from \"@shared/cloudflare-api\";\n\nexport default function VerifySection() {\n  const [activeTab, setActiveTab] = useState<'verify' | 'status'>('verify');\n  const [isLoading, setIsLoading] = useState(false);\n  const [verificationResult, setVerificationResult] = useState<CertificateVerificationResult | null>(null);\n  const { toast } = useToast();\n\n  // Form state\n  const [certificateId, setCertificateId] = useState(\"\");\n  const [participantName, setParticipantName] = useState(\"\");\n  const [participantId, setParticipantId] = useState(\"\");\n  const [participantEmail, setParticipantEmail] = useState(\"\");\n\n  const handleVerifyCertificate = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!certificateId || !participantName) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    setVerificationResult(null);\n    \n    try {\n      const res = await apiRequest('POST', '/api/verify-certificate', {\n        certificateId,\n        fullName: participantName\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        setVerificationResult(data.data);\n      } else {\n        toast({\n          title: \"Verification Failed\",\n          description: data.error || \"Certificate could not be verified\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleCheckStatus = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!participantId || !participantEmail) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const res = await apiRequest('POST', '/api/check-status', {\n        participantId,\n        email: participantEmail\n      });\n      \n      const data = await res.json();\n      \n      if (data.success) {\n        toast({\n          title: \"Status Check Successful\",\n          description: `Status: ${data.data.participant.status}`,\n        });\n        \n        // Redirect to full verify page with the data\n        // This is a simplified implementation for the homepage section\n      } else {\n        toast({\n          title: \"Status Check Failed\",\n          description: data.error || \"Participant not found\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <section id=\"verify\" className=\"section-spacing bg-white\">\n      <div className=\"mx-responsive\">\n        <div className=\"max-w-3xl mx-auto\">\n          <div className=\"text-center content-spacing\">\n            <h2 className=\"heading-responsive font-bold text-primary mb-3 md:mb-4\">Verify Certificate</h2>\n            <p className=\"subtitle-responsive max-w-2xl mx-auto\">\n              Check the authenticity of your certificate or view your training status.\n            </p>\n          </div>\n          \n          <Card className=\"shadow-card transition-medium\">\n            <CardContent className=\"p-5 sm:p-6 md:p-8\">\n              <div className=\"mb-6 sm:mb-8\">\n                <div className=\"flex justify-center mb-5 sm:mb-6\">\n                  <div className=\"flex space-x-2 sm:space-x-4 w-full sm:w-auto\">\n                    <Button\n                      variant={activeTab === 'verify' ? 'default' : 'outline'}\n                      onClick={() => setActiveTab('verify')}\n                      className={`flex-1 sm:flex-none px-4 py-2 sm:px-5 sm:py-2.5 text-sm sm:text-base ${\n                        activeTab === 'verify' \n                          ? 'bg-primary text-white' \n                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                      }`}\n                    >\n                      Verify Certificate\n                    </Button>\n                    <Button\n                      variant={activeTab === 'status' ? 'default' : 'outline'}\n                      onClick={() => setActiveTab('status')}\n                      className={`flex-1 sm:flex-none px-4 py-2 sm:px-5 sm:py-2.5 text-sm sm:text-base ${\n                        activeTab === 'status' \n                          ? 'bg-primary text-white'\n                          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                      }`}\n                    >\n                      Check Status\n                    </Button>\n                  </div>\n                </div>\n                \n                {/* Verify Certificate Form */}\n                {activeTab === 'verify' && (\n                  <Card className=\"shadow-sm border border-gray-200\">\n                    <CardContent className=\"p-4 sm:p-6\">\n                      <form className=\"space-y-5\" onSubmit={handleVerifyCertificate}>\n                        <div>\n                          <Label htmlFor=\"certificate-id\" className=\"text-base font-medium mb-1.5 block\">\n                            Certificate ID\n                          </Label>\n                          <Input \n                            id=\"certificate-id\" \n                            value={certificateId}\n                            onChange={(e) => setCertificateId(e.target.value)}\n                            placeholder=\"Enter your certificate ID\"\n                            className=\"h-10 sm:h-11\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"participant-name\" className=\"text-base font-medium mb-1.5 block\">\n                            Full Name\n                          </Label>\n                          <Input \n                            id=\"participant-name\" \n                            value={participantName}\n                            onChange={(e) => setParticipantName(e.target.value)}\n                            placeholder=\"Enter your full name\"\n                            className=\"h-10 sm:h-11\"\n                          />\n                        </div>\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full bg-primary hover:bg-accent h-10 sm:h-11 text-sm sm:text-base\"\n                          disabled={isLoading}\n                        >\n                          {isLoading ? \"Verifying...\" : \"Verify Certificate\"}\n                        </Button>\n                      </form>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                {/* Check Status Form */}\n                {activeTab === 'status' && (\n                  <Card className=\"shadow-sm border border-gray-200\">\n                    <CardContent className=\"p-4 sm:p-6\">\n                      <form className=\"space-y-5\" onSubmit={handleCheckStatus}>\n                        <div>\n                          <Label htmlFor=\"participant-id\" className=\"text-base font-medium mb-1.5 block\">\n                            Participant ID\n                          </Label>\n                          <Input \n                            id=\"participant-id\" \n                            value={participantId}\n                            onChange={(e) => setParticipantId(e.target.value)}\n                            placeholder=\"Enter your participant ID\"\n                            className=\"h-10 sm:h-11\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"participant-email\" className=\"text-base font-medium mb-1.5 block\">\n                            Email Address\n                          </Label>\n                          <Input \n                            id=\"participant-email\" \n                            type=\"email\"\n                            value={participantEmail}\n                            onChange={(e) => setParticipantEmail(e.target.value)}\n                            placeholder=\"Enter your email address\"\n                            className=\"h-10 sm:h-11\"\n                          />\n                        </div>\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full bg-primary hover:bg-accent h-10 sm:h-11 text-sm sm:text-base\"\n                          disabled={isLoading}\n                        >\n                          {isLoading ? \"Checking...\" : \"Check Status\"}\n                        </Button>\n                      </form>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n              \n              {/* Results Section */}\n              {verificationResult && (\n                <div className=\"mt-6 sm:mt-8 fade-in\">\n                  <CertificateCard \n                    certificate={verificationResult.certificate}\n                    participant={verificationResult.participant}\n                    training={verificationResult.training}\n                  />\n                </div>\n              )}\n              \n              <div className=\"mt-5 sm:mt-7 text-center\">\n                <Link href=\"/verify-certificate\">\n                  <Button variant=\"link\" className=\"text-primary text-sm sm:text-base\">\n                    Go to full verification page →\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10369},"client/src/components/layout/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Facebook, Twitter, Linkedin, Instagram, Mail, ChevronRight, Phone, MapPin } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { ReactNode } from \"react\";\nimport logoImage from \"@assets/bcslogo (3)_1756309053901.png\";\n\nconst quickLinks = [\n  { href: \"/\", label: \"Home\" },\n  { href: \"/about\", label: \"About Us\" },\n  { href: \"/training-programs\", label: \"Training Programs\" },\n  { href: \"/verify-certificate\", label: \"Verify Certificate\" },\n  { href: \"/contact\", label: \"Contact\" }\n];\n\nconst serviceLinks = [\n  { href: \"#consultancy\", label: \"Consultancy Services\" },\n  { href: \"#audit\", label: \"Audit Preparation\" },\n  { href: \"/training-programs\", label: \"Training Programs\" },\n  { href: \"/verify-certificate\", label: \"Certificate Verification\" },\n  { href: \"#strategy\", label: \"Business Strategy\" }\n];\n\ninterface ContactItemProps {\n  icon: React.ComponentType<any>;\n  children: ReactNode;\n}\n\nconst ContactItem = ({ icon: Icon, children }: ContactItemProps) => (\n  <div className=\"flex items-start space-x-2 sm:space-x-3 mb-3 sm:mb-4\">\n    <div className=\"mt-0.5 sm:mt-1 flex-shrink-0\">\n      <Icon size={14} className=\"sm:w-[18px] sm:h-[18px] text-blue-200\" />\n    </div>\n    <div className=\"flex-1 text-blue-100 leading-snug\">{children}</div>\n  </div>\n);\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-primary text-white pt-10 sm:pt-16 pb-6 sm:pb-8\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Mobile-optimized grid layout */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 gap-y-10 mb-8 sm:mb-12\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4 sm:mb-6\">\n              <img \n                src={logoImage} \n                alt=\"Bhumi Consultancy Services\" \n                className=\"h-10 w-auto object-contain transition-transform hover:scale-105\"\n              />\n              <h3 className=\"text-lg sm:text-xl font-bold tracking-tight\">Bhumi Consultancy Services</h3>\n            </div>\n            <p className=\"text-blue-100 mb-5 sm:mb-6 text-sm leading-relaxed\">\n              Professional consultancy services dedicated to helping businesses grow, optimize operations, and achieve sustainable success through expert guidance and tailored solutions.\n            </p>\n            <div className=\"flex space-x-3\">\n              <a href=\"https://www.facebook.com/share/19gk3NuZ5F/\" target=\"_blank\" rel=\"noopener noreferrer\" \n                 className=\"w-9 h-9 rounded-full bg-black bg-opacity-20 flex items-center justify-center text-blue-200 hover:text-white hover:bg-opacity-30 transition duration-300\">\n                <Facebook size={18} />\n              </a>\n              <a href=\"https://x.com/veerupyy?t=3j_t11dcqUTDxbptxjEw_w&s=09\" target=\"_blank\" rel=\"noopener noreferrer\" \n                 className=\"w-9 h-9 rounded-full bg-black bg-opacity-20 flex items-center justify-center text-blue-200 hover:text-white hover:bg-opacity-30 transition duration-300\">\n                <Twitter size={18} />\n              </a>\n              <a href=\"https://www.linkedin.com/in/veerarjun-upadhyay-a41001313?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app\" \n                 target=\"_blank\" rel=\"noopener noreferrer\" \n                 className=\"w-9 h-9 rounded-full bg-black bg-opacity-20 flex items-center justify-center text-blue-200 hover:text-white hover:bg-opacity-30 transition duration-300\">\n                <Linkedin size={18} />\n              </a>\n              <a href=\"https://www.instagram.com/veerarjunupadhyay?igsh=MXA5bmtkNHZlbmV5eg==\" target=\"_blank\" rel=\"noopener noreferrer\" \n                 className=\"w-9 h-9 rounded-full bg-black bg-opacity-20 flex items-center justify-center text-blue-200 hover:text-white hover:bg-opacity-30 transition duration-300\">\n                <Instagram size={18} />\n              </a>\n            </div>\n          </div>\n          \n          {/* Quick Links - better touch targets for mobile */}\n          <div>\n            <h4 className=\"text-base sm:text-lg font-semibold mb-4 sm:mb-5 tracking-tight\">Quick Links</h4>\n            <ul className=\"space-y-3\">\n              {quickLinks.map((link) => (\n                <li key={link.href} className=\"group\">\n                  <Link href={link.href} className=\"text-blue-100 group-hover:text-white transition duration-300 flex items-center text-sm py-1\">\n                    <ChevronRight size={14} className=\"mr-2 transform group-hover:translate-x-1 transition-transform\" />\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Services - better touch targets for mobile */}\n          <div>\n            <h4 className=\"text-base sm:text-lg font-semibold mb-4 sm:mb-5 tracking-tight\">Our Services</h4>\n            <ul className=\"space-y-3\">\n              {serviceLinks.map((link, index) => (\n                <li key={index} className=\"group\">\n                  <Link href={link.href} className=\"text-blue-100 group-hover:text-white transition duration-300 flex items-center text-sm py-1\">\n                    <ChevronRight size={14} className=\"mr-2 transform group-hover:translate-x-1 transition-transform\" />\n                    {link.label}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          \n          {/* Contact - optimized for mobile */}\n          <div className=\"col-span-1 sm:col-span-2 lg:col-span-1\">\n            <h4 className=\"text-base sm:text-lg font-semibold mb-4 sm:mb-5 tracking-tight\">Stay Updated</h4>\n            <p className=\"text-blue-100 mb-4 text-sm\">Subscribe to our newsletter for exclusive updates and insights.</p>\n            \n            <form className=\"space-y-3 mb-6\" onSubmit={(e) => e.preventDefault()}>\n              <div className=\"relative\">\n                <Input \n                  type=\"email\" \n                  className=\"w-full pl-4 pr-24 py-2 border-0 bg-black bg-opacity-20 rounded-md text-white placeholder:text-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-300 text-sm\" \n                  placeholder=\"Your email address\" \n                />\n                <Button \n                  type=\"submit\" \n                  size=\"sm\"\n                  className=\"absolute right-1 top-1 h-8 px-3 text-sm bg-blue-500 hover:bg-blue-600 text-white font-medium\"\n                >\n                  Subscribe\n                </Button>\n              </div>\n            </form>\n            \n            <div className=\"space-y-4\">\n              <ContactItem icon={Mail}>\n                <a href=\"mailto:bcs04062013@gmail.com\" className=\"hover:text-white transition-colors text-sm block\">\n                  bcs04062013@gmail.com\n                </a>\n                <a href=\"mailto:varjunupadhyay@gmail.com\" className=\"hover:text-white transition-colors text-sm block\">\n                  varjunupadhyay@gmail.com\n                </a>\n              </ContactItem>\n              <ContactItem icon={Phone}>\n                <a href=\"tel:+917827284027\" className=\"hover:text-white transition-colors text-sm block\">\n                  +91 7827284027\n                </a>\n                <a href=\"tel:+918700761218\" className=\"hover:text-white transition-colors text-sm block\">\n                  +91 8700761218\n                </a>\n              </ContactItem>\n              <ContactItem icon={MapPin}>\n                <a href=\"https://maps.app.goo.gl/q8xTrJTi7XNRbT7Z8\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"hover:text-white transition-colors text-sm\">\n                  MCF-6503, Sanjay Colony, Sector-23,<br/> \n                  33 Feet Road, Near Rana Aata Chakki,<br/>\n                  Faridabad, Haryana 121005\n                </a>\n              </ContactItem>\n            </div>\n          </div>\n        </div>\n        \n        {/* Better mobile layout for copyright section */}\n        <div className=\"pt-6 sm:pt-8 border-t border-blue-800\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-blue-200 text-sm mb-4 md:mb-0 text-center md:text-left\">&copy; {new Date().getFullYear()} Bhumi Consultancy Services. All rights reserved.</p>\n            <div className=\"flex flex-wrap justify-center gap-x-4 gap-y-2 text-sm text-blue-200\">\n              <a href=\"#\" className=\"hover:text-white transition-colors py-1\">Privacy Policy</a>\n              <span className=\"hidden sm:inline self-center\">•</span>\n              <a href=\"#\" className=\"hover:text-white transition-colors py-1\">Terms of Service</a>\n              <span className=\"hidden sm:inline self-center\">•</span>\n              <a href=\"#\" className=\"hover:text-white transition-colors py-1\">Cookie Policy</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":9075},"client/src/components/layout/Header.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport logoImage from \"@assets/bcslogo (3)_1756309053901.png\";\n\nconst navLinks = [\n  { href: \"/\", label: \"Home\" },\n  { href: \"/about\", label: \"About Us\" },\n  { href: \"/training-programs\", label: \"Training Programs\" },\n  { href: \"/verify-certificate\", label: \"Verify Certificate\" },\n  { href: \"/contact\", label: \"Contact\" }\n];\n\nexport default function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const [scrolled, setScrolled] = useState(false);\n  const isMobile = useIsMobile();\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when route changes\n  useEffect(() => {\n    setIsMenuOpen(false);\n  }, [location]);\n\n  // Handle scrolling effects\n  useEffect(() => {\n    const handleScroll = () => {\n      const isScrolled = window.scrollY > 10;\n      if (isScrolled !== scrolled) {\n        setScrolled(isScrolled);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [scrolled]);\n\n  // Handle clicks outside the menu to close it\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (isMenuOpen && menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setIsMenuOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleOutsideClick);\n    return () => document.removeEventListener(\"mousedown\", handleOutsideClick);\n  }, [isMenuOpen]);\n\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const closeMenu = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <header className={cn(\n      \"sticky top-0 z-50 w-full transition-all duration-300\",\n      scrolled \n        ? \"bg-white bg-opacity-95 backdrop-blur-sm shadow-md\" \n        : \"bg-white shadow-sm\"\n    )}>\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-2\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <img \n              src={logoImage} \n              alt=\"Bhumi Consultancy Services\" \n              className=\"h-16 w-auto object-contain transition-transform hover:scale-105\"\n            />\n            <div>\n              <h1 className=\"text-primary text-xl font-bold tracking-tight\">Bhumi Consultancy Services</h1>\n              <p className=\"text-xs text-gray-600 font-medium\">Professional Business Solutions</p>\n            </div>\n          </Link>\n          \n          {/* Desktop Nav */}\n          <nav className=\"hidden md:flex items-center space-x-1 lg:space-x-2\">\n            {navLinks.map((link) => (\n              <Link \n                key={link.href} \n                href={link.href}\n                className={cn(\n                  \"px-3 py-2 rounded-md font-medium text-sm transition-all duration-300\",\n                  location === link.href \n                    ? \"text-primary bg-primary/5 font-semibold\" \n                    : \"text-gray-700 hover:text-primary hover:bg-gray-50\"\n                )}\n              >\n                {link.label}\n              </Link>\n            ))}\n            <Button \n              className=\"ml-2 font-medium shadow-sm\"\n              size=\"sm\"\n            >\n              Get Started\n            </Button>\n          </nav>\n          \n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={toggleMenu}\n              aria-label=\"Toggle menu\"\n              className={cn(\n                \"text-gray-700 hover:bg-gray-100\",\n                isMenuOpen && \"bg-gray-100\"\n              )}\n            >\n              {isMenuOpen ? <X size={24} /> : <Menu size={24} />}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Mobile Nav - with smooth animation */}\n        <div \n          ref={menuRef}\n          className={cn(\n            \"md:hidden overflow-hidden transition-all duration-300 border-t border-gray-100\",\n            isMenuOpen \n              ? \"max-h-96 opacity-100\" \n              : \"max-h-0 opacity-0 border-t-0\"\n          )}\n        >\n          <div className=\"flex flex-col space-y-1 py-4\">\n            {navLinks.map((link) => (\n              <Link \n                key={link.href} \n                href={link.href}\n                className={cn(\n                  \"px-4 py-3 rounded-md font-medium transition-colors duration-200\",\n                  location === link.href \n                    ? \"text-primary bg-primary/5 font-semibold\" \n                    : \"text-gray-700 hover:text-primary hover:bg-gray-50\"\n                )}\n                onClick={closeMenu}\n              >\n                {link.label}\n              </Link>\n            ))}\n            <div className=\"pt-2 pb-1 px-4\">\n              <Button className=\"w-full font-medium shadow-sm\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5299},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/certificate-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Download } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { downloadPublicCertificate } from \"@/lib/cloudflare-api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CertificateCardProps {\n  participant: {\n    name: string;\n    id: number;\n  };\n  training: {\n    name: string;\n    id: number;\n  };\n  certificate: {\n    certificateId: string;\n    issueDate: string;\n    status: 'active' | 'expired' | 'revoked';\n    certificatePath?: string;\n  };\n}\n\nexport function CertificateCard({ participant, training, certificate }: CertificateCardProps) {\n  const [isDownloading, setIsDownloading] = useState(false);\n  const { toast } = useToast();\n\n  const handleDownload = async () => {\n    setIsDownloading(true);\n\n    try {\n      // First try to use direct certificate path if available\n      if (certificate.certificatePath) {\n        window.open(certificate.certificatePath, '_blank');\n        setIsDownloading(false);\n        return;\n      }\n\n      // Otherwise, call the API to get the download URL\n      const response = await fetch(`/api/certificates/download/${certificate.certificateId}`);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch certificate: ${response.statusText}`);\n      }\n      \n      const responseData = await response.json();\n      console.log(\"Certificate card download response:\", responseData);\n      \n      if (responseData.success && responseData.data) {\n        // Try to find a URL in the response data - check both downloadUrl and url properties\n        const downloadUrl = responseData.data.downloadUrl || responseData.data.url;\n        \n        if (downloadUrl) {\n          window.open(downloadUrl, '_blank');\n        } else {\n          console.log(\"Download response data:\", responseData.data);\n          throw new Error(\"No download URL found in response\");\n        }\n      } else {\n        throw new Error(responseData.error || \"Certificate could not be downloaded\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Error downloading certificate\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  // Format the issue date for better display\n  const formatDate = (dateString: string) => {\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    } catch (e) {\n      return dateString;\n    }\n  };\n\n  return (\n    <Card className=\"border-2 border-green-200 bg-green-50 shadow-soft transition-fast hover:shadow-md\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center mb-6\">\n          <div className=\"bg-green-100 p-3 rounded-full mr-3 shadow-sm\">\n            <Check className=\"text-green-600 h-6 w-6\" />\n          </div>\n          <h3 className=\"text-2xl font-bold text-green-800\">Certificate Verified</h3>\n        </div>\n        \n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-y-3 gap-x-4 bg-white p-4 rounded-lg border border-green-100\">\n            <div className=\"text-gray-600 font-medium\">Participant Name:</div>\n            <div className=\"font-bold text-gray-800\">{participant.name}</div>\n            \n            <div className=\"text-gray-600 font-medium\">Training Program:</div>\n            <div className=\"font-bold text-gray-800\">{training.name}</div>\n            \n            <div className=\"text-gray-600 font-medium\">Issue Date:</div>\n            <div className=\"font-bold text-gray-800\">{formatDate(certificate.issueDate)}</div>\n            \n            <div className=\"text-gray-600 font-medium\">Certificate ID:</div>\n            <div className=\"font-bold text-gray-800 font-mono tracking-tight\">{certificate.certificateId}</div>\n            \n            <div className=\"text-gray-600 font-medium\">Status:</div>\n            <div className=\"font-bold\">\n              {certificate.status === 'expired' ? (\n                <Badge variant=\"outline\" className=\"bg-red-100 text-red-800 hover:bg-red-200 px-3 py-1\">\n                  <span className=\"h-2 w-2 rounded-full bg-red-600 mr-2 inline-block\"></span> \n                  Expired\n                </Badge>\n              ) : certificate.status === 'revoked' ? (\n                <Badge variant=\"outline\" className=\"bg-gray-100 text-gray-800 hover:bg-gray-200 px-3 py-1\">\n                  <span className=\"h-2 w-2 rounded-full bg-gray-600 mr-2 inline-block\"></span> \n                  Revoked\n                </Badge>\n              ) : (\n                <Badge variant=\"outline\" className=\"bg-green-100 text-green-800 hover:bg-green-200 px-3 py-1\">\n                  <span className=\"h-2 w-2 rounded-full bg-green-600 mr-2 inline-block animate-pulse\"></span> \n                  Active\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center pt-2\">\n            <Button \n              className=\"gap-2 shadow-md hover:shadow-lg transition-all duration-300 px-6 py-2\"\n              onClick={handleDownload}\n              disabled={isDownloading}\n            >\n              <Download size={18} /> {isDownloading ? \"Downloading...\" : \"Download Certificate\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5598},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/consultation-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { contactFormSchema, type ContactForm } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ConsultationDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  serviceTitle: string;\n  serviceId: number;\n}\n\nexport function ConsultationDialog({\n  open,\n  onOpenChange,\n  serviceTitle,\n  serviceId,\n}: ConsultationDialogProps) {\n  const { toast } = useToast();\n  const [submitted, setSubmitted] = useState(false);\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      message: `I'm interested in learning more about the \"${serviceTitle}\" service.`,\n      subject: `Consultation Request: ${serviceTitle}`,\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: (data: ContactForm) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Consultation request sent!\",\n        description: \"We'll get back to you soon to schedule your consultation.\",\n      });\n      setSubmitted(true);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send consultation request\",\n        description: error.message || \"Please try again later\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  function onSubmit(data: ContactForm) {\n    submitMutation.mutate(data);\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"px-1 sm:px-2\">\n          <DialogTitle className=\"text-lg sm:text-xl\">Request a Consultation</DialogTitle>\n          <DialogDescription className=\"text-sm sm:text-base\">\n            Fill out this form to request a consultation for our {serviceTitle} service. Our team will contact you shortly.\n          </DialogDescription>\n        </DialogHeader>\n\n        {submitted ? (\n          <div className=\"py-4 sm:py-6 text-center space-y-3 sm:space-y-4\">\n            <div className=\"text-center text-xl sm:text-2xl mb-2\">Thank you!</div>\n            <p className=\"text-sm sm:text-base\">\n              Your consultation request has been received. We'll contact you soon to discuss how our \"{serviceTitle}\" service can help your business.\n            </p>\n            <Button onClick={() => onOpenChange(false)} className=\"mt-3 sm:mt-4\">\n              Close\n            </Button>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-3 sm:space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Your name\" {...field} className=\"text-sm sm:text-base\" />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Email</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"your.email@example.com\" {...field} className=\"text-sm sm:text-base\" />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"+91 9876543210\" {...field} className=\"text-sm sm:text-base\" />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Your Requirements</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Please describe your requirements or ask any questions you have about our services...\"\n                        className=\"min-h-[80px] sm:min-h-[100px] text-sm sm:text-base\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <input type=\"hidden\" name=\"subject\" value={form.getValues().subject} />\n\n              <DialogFooter className=\"pt-3 sm:pt-4 gap-2 sm:gap-3 flex-col sm:flex-row\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => onOpenChange(false)} \n                  className=\"w-full sm:w-auto order-2 sm:order-1 text-sm sm:text-base\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={submitMutation.isPending} \n                  className=\"w-full sm:w-auto order-1 sm:order-2 text-sm sm:text-base\"\n                >\n                  {submitMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-3.5 w-3.5 sm:h-4 sm:w-4 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    \"Request Consultation\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/enrollment-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { contactFormSchema, type ContactForm } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface EnrollmentDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  programName: string;\n  programId: number;\n}\n\nexport function EnrollmentDialog({\n  open,\n  onOpenChange,\n  programName,\n  programId,\n}: EnrollmentDialogProps) {\n  const { toast } = useToast();\n  const [submitted, setSubmitted] = useState(false);\n\n  const form = useForm<ContactForm>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      message: `I'd like to enroll in the \"${programName}\" training program.`,\n      subject: `Enrollment Request: ${programName}`,\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: (data: ContactForm) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Enrollment request sent!\",\n        description: \"We'll get back to you soon regarding your enrollment.\",\n      });\n      setSubmitted(true);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to send enrollment request\",\n        description: error.message || \"Please try again later\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  function onSubmit(data: ContactForm) {\n    submitMutation.mutate(data);\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-[95vw] max-w-[500px] max-h-[90vh] overflow-y-auto p-4 sm:p-6\">\n        <DialogHeader className=\"text-left\">\n          <DialogTitle className=\"text-lg sm:text-xl font-semibold\">\n            Enroll in {programName}\n          </DialogTitle>\n          <DialogDescription className=\"text-sm sm:text-base text-gray-600 mt-2\">\n            Fill out this form to request enrollment in this training program. Our team will contact you shortly.\n          </DialogDescription>\n        </DialogHeader>\n\n        {submitted ? (\n          <div className=\"py-4 sm:py-6 text-center space-y-3 sm:space-y-4\">\n            <div className=\"text-xl sm:text-2xl font-bold text-green-600 mb-2\">\n              Thank you!\n            </div>\n            <p className=\"text-sm sm:text-base text-gray-700 leading-relaxed px-2\">\n              Your enrollment request has been received. We'll contact you soon with the next steps for joining the \"{programName}\" program.\n            </p>\n            <Button \n              onClick={() => onOpenChange(false)} \n              className=\"mt-4 w-full sm:w-auto px-6 py-2 h-10\"\n            >\n              Close\n            </Button>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 sm:space-y-5\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base font-medium\">\n                      Full Name\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Your name\" \n                        className=\"h-10 sm:h-11 text-sm sm:text-base\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base font-medium\">\n                      Email\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"your.email@example.com\" \n                        className=\"h-10 sm:h-11 text-sm sm:text-base\"\n                        type=\"email\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base font-medium\">\n                      Phone Number\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"+91 9876543210\" \n                        className=\"h-10 sm:h-11 text-sm sm:text-base\"\n                        type=\"tel\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base font-medium\">\n                      Additional Information\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Any specific requirements or questions...\"\n                        className=\"min-h-[80px] sm:min-h-[100px] text-sm sm:text-base resize-none\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <input type=\"hidden\" name=\"subject\" value={form.getValues().subject} />\n\n              <DialogFooter className=\"pt-4 sm:pt-6 flex-col sm:flex-row gap-3 sm:gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => onOpenChange(false)}\n                  className=\"w-full sm:w-auto order-2 sm:order-1 h-10 sm:h-11\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={submitMutation.isPending}\n                  className=\"w-full sm:w-auto order-1 sm:order-2 h-10 sm:h-11\"\n                >\n                  {submitMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending...\n                    </>\n                  ) : (\n                    \"Submit Enrollment Request\"\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7622},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-animation.tsx":{"content":"import React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Loader2, CheckCircle2 } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\n// Animated Spinner\nexport function Spinner({ className, size = \"default\" }: { className?: string; size?: \"small\" | \"default\" | \"large\" }) {\n  const sizeClass = {\n    small: \"h-4 w-4\",\n    default: \"h-8 w-8\",\n    large: \"h-12 w-12\"\n  };\n\n  return (\n    <motion.div\n      className={cn(\"flex items-center justify-center\", className)}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <motion.div\n        animate={{ rotate: 360 }}\n        transition={{ duration: 1.5, repeat: Infinity, ease: \"linear\" }}\n      >\n        <Loader2 className={cn(\"text-primary\", sizeClass[size])} />\n      </motion.div>\n    </motion.div>\n  );\n}\n\n// Animated Success Check\nexport function SuccessCheck({ className }: { className?: string }) {\n  return (\n    <motion.div\n      className={cn(\"flex items-center justify-center\", className)}\n      initial={{ scale: 0 }}\n      animate={{ scale: 1 }}\n      transition={{ type: \"spring\", stiffness: 260, damping: 20 }}\n    >\n      <CheckCircle2 className=\"text-green-600 h-8 w-8\" />\n    </motion.div>\n  );\n}\n\n// Animated Pulse Card Skeleton\nexport function CardSkeleton({ className }: { className?: string }) {\n  return (\n    <motion.div\n      className={cn(\"rounded-lg bg-white shadow-md p-6\", className)}\n      initial={{ opacity: 0.6 }}\n      animate={{ opacity: [0.6, 0.8, 0.6] }}\n      transition={{ duration: 1.5, repeat: Infinity, ease: \"easeInOut\" }}\n    >\n      <div className=\"h-6 w-2/3 bg-gray-200 rounded-md mb-4\" />\n      <div className=\"h-4 w-full bg-gray-200 rounded-md mb-2\" />\n      <div className=\"h-4 w-5/6 bg-gray-200 rounded-md mb-2\" />\n      <div className=\"h-4 w-4/6 bg-gray-200 rounded-md mb-4\" />\n      <div className=\"h-8 w-1/3 bg-gray-200 rounded-md\" />\n    </motion.div>\n  );\n}\n\n// Animated Grid Skeleton with staggered entrance\nexport function GridSkeleton({ count = 3, className }: { count?: number; className?: string }) {\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    show: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    show: { opacity: 1, y: 0 }\n  };\n\n  return (\n    <motion.div\n      className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", className)}\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"show\"\n    >\n      {Array(count)\n        .fill(0)\n        .map((_, idx) => (\n          <motion.div key={idx} variants={itemVariants}>\n            <CardSkeleton />\n          </motion.div>\n        ))}\n    </motion.div>\n  );\n}\n\n// Animated Text Skeleton\nexport function TextSkeleton({ lines = 3, className }: { lines?: number; className?: string }) {\n  return (\n    <motion.div \n      className={cn(\"space-y-2\", className)}\n      initial={{ opacity: 0.6 }}\n      animate={{ opacity: [0.6, 0.8, 0.6] }}\n      transition={{ duration: 1.5, repeat: Infinity, ease: \"easeInOut\" }}\n    >\n      {Array(lines)\n        .fill(0)\n        .map((_, idx) => (\n          <div \n            key={idx} \n            className={`h-4 bg-gray-200 rounded-md ${idx === lines - 1 ? \"w-4/6\" : \"w-full\"}`}\n          />\n        ))}\n    </motion.div>\n  );\n}\n\n// Loading Button - Shows spinner while loading\nexport function LoadingButton({ \n  children, \n  isLoading, \n  loadingText = \"Loading...\",\n  className \n}: { \n  children: React.ReactNode; \n  isLoading: boolean; \n  loadingText?: string;\n  className?: string;\n}) {\n  return (\n    <button\n      className={cn(\n        \"relative px-4 py-2 rounded-md bg-primary text-white font-medium transition-all\",\n        isLoading ? \"bg-primary/80\" : \"hover:bg-primary/90\",\n        className\n      )}\n      disabled={isLoading}\n    >\n      {isLoading ? (\n        <motion.div \n          className=\"flex items-center justify-center space-x-2\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        >\n          <Spinner size=\"small\" />\n          <span>{loadingText}</span>\n        </motion.div>\n      ) : (\n        children\n      )}\n    </button>\n  );\n}\n\n// Bouncing Dots Animation\nexport function BouncingDotsLoader({ className }: { className?: string }) {\n  const containerVariants = {\n    animate: {\n      transition: {\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const dotVariants = {\n    initial: { y: 0 },\n    animate: {\n      y: [0, -10, 0],\n      transition: {\n        repeat: Infinity,\n        duration: 0.8\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      className={cn(\"flex space-x-2 justify-center items-center\", className)}\n      variants={containerVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n    >\n      {[1, 2, 3].map(i => (\n        <motion.div\n          key={i}\n          className=\"w-3 h-3 bg-primary rounded-full\"\n          variants={dotVariants}\n        />\n      ))}\n    </motion.div>\n  );\n}\n\n// Page Loading Animation\nexport function PageLoadingAnimation() {\n  return (\n    <div className=\"min-h-[300px] w-full flex flex-col items-center justify-center\">\n      <Spinner size=\"large\" className=\"mb-4\" />\n      <motion.p \n        className=\"text-lg text-primary font-medium\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.3 }}\n      >\n        Loading content...\n      </motion.p>\n      <BouncingDotsLoader className=\"mt-2\" />\n    </div>\n  );\n}","size_bytes":5532},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/pages/admin/create-certificate.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { createCertificate } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft } from 'lucide-react';\nimport type { TrainingProgram, Participant, Certificate } from '@shared/schema';\n\nexport default function CreateCertificate() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [certificateData, setCertificateData] = useState({\n    certificateId: `CERT${new Date().getFullYear()}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(Math.floor(Math.random() * 9000) + 1000)}`,\n    participantId: null as number | null,\n    trainingProgramId: null as number | null,\n    issueDate: new Date().toISOString().split('T')[0],\n    expiryDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)).toISOString().split('T')[0], // Default 1 year later\n    certificatePath: ''\n  });\n\n  // Query participants for dropdown\n  const { data: participants } = useQuery<{ data: Participant[] }>({\n    queryKey: ['/api/participants'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Query training programs for the dropdown\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Create certificate mutation\n  const createCertificateMutation = useMutation({\n    mutationFn: (data: Omit<Certificate, 'id'>) => createCertificate(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/certificates'] });\n      toast({\n        title: \"Certificate created\",\n        description: \"The certificate has been successfully created\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating certificate\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!certificateData.participantId || !certificateData.trainingProgramId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select both a participant and training program\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Additional validation: Check if selected participant has completed status\n    const selectedParticipant = participants?.data?.find((p: any) => p.id === certificateData.participantId) as any;\n    if (selectedParticipant?.status !== 'completed') {\n      toast({\n        title: \"Cannot create certificate\",\n        description: \"Certificates can only be created for participants who have completed their training program. Current status: \" + (selectedParticipant?.status || 'Unknown'),\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const submissionData = {\n      ...certificateData,\n      participantId: Number(certificateData.participantId),\n      trainingProgramId: Number(certificateData.trainingProgramId),\n      issueDate: new Date(certificateData.issueDate),\n      expiryDate: certificateData.expiryDate ? new Date(certificateData.expiryDate) : null\n    };\n    \n    createCertificateMutation.mutate(submissionData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Create Certificate</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Issue a new certificate for a participant.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Certificate Details</CardTitle>\n            <CardDescription>Fill in the details for the new certificate</CardDescription>\n            <div className=\"mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n              <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                <strong>Note:</strong> Certificates can only be created for participants who have <span className=\"font-semibold\">completed</span> their training program.\n              </p>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"certificateId\">Certificate ID *</Label>\n                  <Input\n                    id=\"certificateId\"\n                    value={certificateData.certificateId}\n                    onChange={(e) => setCertificateData({ ...certificateData, certificateId: e.target.value })}\n                    placeholder=\"Certificate ID\"\n                    required\n                    data-testid=\"input-certificate-id\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"participant\">Participant *</Label>\n                  <Select \n                    value={certificateData.participantId ? certificateData.participantId.toString() : undefined} \n                    onValueChange={(value) => {\n                      const selectedParticipant = participants?.data?.find((p: any) => p.id === parseInt(value)) as any;\n                      \n                      // Check if participant has completed status\n                      if (selectedParticipant?.status !== 'completed') {\n                        toast({\n                          title: \"Cannot create certificate\",\n                          description: \"Certificates can only be created for participants who have completed their training program.\",\n                          variant: \"destructive\",\n                        });\n                        return;\n                      }\n                      \n                      const trainingProgramId = selectedParticipant?.training_program_id || selectedParticipant?.trainingProgramId;\n                      setCertificateData({ \n                        ...certificateData, \n                        participantId: parseInt(value),\n                        trainingProgramId: trainingProgramId || null\n                      });\n                    }}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-participant\">\n                      <SelectValue placeholder=\"Select a participant\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {participants?.data?.filter(participant => participant.id > 0).map((participant: any) => {\n                        const isCompleted = participant.status === 'completed';\n                        return (\n                          <SelectItem \n                            key={participant.id} \n                            value={participant.id.toString()}\n                            disabled={!isCompleted}\n                          >\n                            {participant.full_name || participant.fullName} ({participant.participant_id || participant.participantId})\n                            {!isCompleted && <span className=\"text-red-500 ml-2\">- Not Completed</span>}\n                            {isCompleted && <span className=\"text-green-500 ml-2\">- Completed</span>}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"trainingProgram\">Training Program *</Label>\n                  <Select \n                    value={certificateData.trainingProgramId ? certificateData.trainingProgramId.toString() : undefined} \n                    onValueChange={(value) => setCertificateData({ ...certificateData, trainingProgramId: parseInt(value) })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-training-program\">\n                      <SelectValue placeholder=\"Select a training program\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {programs?.data?.filter(program => program.id > 0).map((program) => (\n                        <SelectItem key={program.id} value={program.id.toString()}>\n                          {program.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"issueDate\">Issue Date *</Label>\n                  <Input\n                    id=\"issueDate\"\n                    type=\"date\"\n                    value={certificateData.issueDate}\n                    onChange={(e) => setCertificateData({ ...certificateData, issueDate: e.target.value })}\n                    required\n                    data-testid=\"input-issue-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"expiryDate\">Expiry Date</Label>\n                  <Input\n                    id=\"expiryDate\"\n                    type=\"date\"\n                    value={certificateData.expiryDate}\n                    onChange={(e) => setCertificateData({ ...certificateData, expiryDate: e.target.value })}\n                    data-testid=\"input-expiry-date\"\n                  />\n                  <p className=\"text-sm text-gray-500\">Leave empty for certificates that don't expire</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"certificatePath\">Certificate Path</Label>\n                  <Input\n                    id=\"certificatePath\"\n                    value={certificateData.certificatePath}\n                    onChange={(e) => setCertificateData({ ...certificateData, certificatePath: e.target.value })}\n                    placeholder=\"Path to certificate file (optional)\"\n                    data-testid=\"input-certificate-path\"\n                  />\n                  <p className=\"text-sm text-gray-500\">URL or path to the certificate document</p>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={createCertificateMutation.isPending}\n                  data-testid=\"button-create-certificate\"\n                >\n                  {createCertificateMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Create Certificate\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11863},"client/src/pages/admin/create-participant.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { createParticipant } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft } from 'lucide-react';\nimport type { TrainingProgram, Participant } from '@shared/schema';\n\nexport default function CreateParticipant() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [participantData, setParticipantData] = useState({\n    participantId: `BHM${new Date().getFullYear()}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(Math.floor(Math.random() * 9000) + 1000)}`,\n    fullName: '',\n    email: '',\n    phone: '',\n    trainingProgramId: 0,\n    enrollmentDate: new Date().toISOString().split('T')[0],\n    status: 'active'\n  });\n\n  // Query training programs for the dropdown\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Create participant mutation\n  const createParticipantMutation = useMutation({\n    mutationFn: (data: Omit<Participant, 'id'>) => createParticipant(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/participants'] });\n      toast({\n        title: \"Participant created\",\n        description: \"The participant has been successfully created\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating participant\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submissionData = {\n      ...participantData,\n      trainingProgramId: Number(participantData.trainingProgramId),\n      enrollmentDate: new Date(participantData.enrollmentDate)\n    };\n    \n    createParticipantMutation.mutate(submissionData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Create Participant</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Add a new participant to the training program.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Participant Details</CardTitle>\n            <CardDescription>Fill in the details for the new participant</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"participantId\">Participant ID *</Label>\n                  <Input\n                    id=\"participantId\"\n                    value={participantData.participantId}\n                    onChange={(e) => setParticipantData({ ...participantData, participantId: e.target.value })}\n                    placeholder=\"Participant ID\"\n                    required\n                    data-testid=\"input-participant-id\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full Name *</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={participantData.fullName}\n                    onChange={(e) => setParticipantData({ ...participantData, fullName: e.target.value })}\n                    placeholder=\"Enter participant's full name\"\n                    required\n                    data-testid=\"input-full-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={participantData.email}\n                    onChange={(e) => setParticipantData({ ...participantData, email: e.target.value })}\n                    placeholder=\"Enter email address\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number *</Label>\n                  <Input\n                    id=\"phone\"\n                    value={participantData.phone}\n                    onChange={(e) => setParticipantData({ ...participantData, phone: e.target.value })}\n                    placeholder=\"Enter phone number\"\n                    required\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"trainingProgram\">Training Program *</Label>\n                  <Select \n                    value={participantData.trainingProgramId.toString()} \n                    onValueChange={(value) => setParticipantData({ ...participantData, trainingProgramId: parseInt(value) })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-training-program\">\n                      <SelectValue placeholder=\"Select a training program\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {programs?.data?.map((program) => (\n                        <SelectItem key={program.id} value={program.id.toString()}>\n                          {program.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"enrollmentDate\">Enrollment Date *</Label>\n                  <Input\n                    id=\"enrollmentDate\"\n                    type=\"date\"\n                    value={participantData.enrollmentDate}\n                    onChange={(e) => setParticipantData({ ...participantData, enrollmentDate: e.target.value })}\n                    required\n                    data-testid=\"input-enrollment-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status *</Label>\n                  <Select \n                    value={participantData.status} \n                    onValueChange={(value) => setParticipantData({ ...participantData, status: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"paused\">Paused</SelectItem>\n                      <SelectItem value=\"withdrawn\">Withdrawn</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={createParticipantMutation.isPending}\n                  data-testid=\"button-create-participant\"\n                >\n                  {createParticipantMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Create Participant\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8650},"client/src/pages/admin/create-service.tsx":{"content":"\nimport { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useMutation } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport { createService } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft, BarChart3, FileText, Building2, ClipboardCheck, Users, Award, Target, TrendingUp, Briefcase, Settings } from 'lucide-react';\nimport type { Service } from '@shared/schema';\n\nconst iconOptions = [\n  { value: 'chart-line', label: 'Chart Line', icon: <BarChart3 className=\"h-4 w-4\" /> },\n  { value: 'file-invoice', label: 'File Invoice', icon: <FileText className=\"h-4 w-4\" /> },\n  { value: 'building', label: 'Building', icon: <Building2 className=\"h-4 w-4\" /> },\n  { value: 'clipboard-check', label: 'Clipboard Check', icon: <ClipboardCheck className=\"h-4 w-4\" /> },\n  { value: 'users', label: 'Users', icon: <Users className=\"h-4 w-4\" /> },\n  { value: 'award', label: 'Award', icon: <Award className=\"h-4 w-4\" /> },\n  { value: 'target', label: 'Target', icon: <Target className=\"h-4 w-4\" /> },\n  { value: 'trending-up', label: 'Trending Up', icon: <TrendingUp className=\"h-4 w-4\" /> },\n  { value: 'briefcase', label: 'Briefcase', icon: <Briefcase className=\"h-4 w-4\" /> },\n  { value: 'settings', label: 'Settings', icon: <Settings className=\"h-4 w-4\" /> }\n];\n\nexport default function CreateService() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [serviceData, setServiceData] = useState({\n    title: '',\n    description: '',\n    icon: '',\n    features: ''\n  });\n\n  // Create service mutation\n  const createServiceMutation = useMutation({\n    mutationFn: (data: Omit<Service, 'id'>) => createService(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/services'] });\n      toast({\n        title: \"Service created\",\n        description: \"The service has been successfully created\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating service\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!serviceData.title || !serviceData.description || !serviceData.icon) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Parse features from comma-separated string to array\n    const featuresArray = serviceData.features\n      .split(',')\n      .map(feature => feature.trim())\n      .filter(feature => feature.length > 0);\n    \n    const submissionData = {\n      title: serviceData.title,\n      description: serviceData.description,\n      icon: serviceData.icon,\n      features: featuresArray\n    };\n    \n    createServiceMutation.mutate(submissionData);\n  };\n\n  const getSelectedIcon = (value: string) => {\n    const option = iconOptions.find(opt => opt.value === value);\n    return option ? option.icon : <Briefcase className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Create Service</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Add a new service to your offerings.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Service Details</CardTitle>\n            <CardDescription>Fill in the details for the new service</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Service Title *</Label>\n                  <Input\n                    id=\"title\"\n                    value={serviceData.title}\n                    onChange={(e) => setServiceData({ ...serviceData, title: e.target.value })}\n                    placeholder=\"Enter service title\"\n                    required\n                    data-testid=\"input-service-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"icon\">Icon *</Label>\n                  <Select \n                    value={serviceData.icon} \n                    onValueChange={(value) => setServiceData({ ...serviceData, icon: value })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-service-icon\">\n                      <SelectValue placeholder=\"Select an icon\">\n                        {serviceData.icon && (\n                          <div className=\"flex items-center\">\n                            {getSelectedIcon(serviceData.icon)}\n                            <span className=\"ml-2\">\n                              {iconOptions.find(opt => opt.value === serviceData.icon)?.label}\n                            </span>\n                          </div>\n                        )}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent>\n                      {iconOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          <div className=\"flex items-center\">\n                            {option.icon}\n                            <span className=\"ml-2\">{option.label}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-sm text-gray-500\">Choose an icon that represents your service</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={serviceData.description}\n                  onChange={(e) => setServiceData({ ...serviceData, description: e.target.value })}\n                  placeholder=\"Enter service description\"\n                  rows={4}\n                  required\n                  data-testid=\"textarea-service-description\"\n                />\n                <p className=\"text-sm text-gray-500\">Provide a detailed description of the service</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"features\">Features</Label>\n                <Textarea\n                  id=\"features\"\n                  value={serviceData.features}\n                  onChange={(e) => setServiceData({ ...serviceData, features: e.target.value })}\n                  placeholder=\"Enter features separated by commas (e.g., Feature 1, Feature 2, Feature 3)\"\n                  rows={3}\n                  data-testid=\"textarea-service-features\"\n                />\n                <p className=\"text-sm text-gray-500\">List key features separated by commas</p>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={createServiceMutation.isPending}\n                  data-testid=\"button-create-service\"\n                >\n                  {createServiceMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Create Service\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8598},"client/src/pages/admin/create-training-program.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { useMutation } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport { createTrainingProgram } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft } from 'lucide-react';\nimport { generateSlug, isValidSlug } from '@/lib/slug-utils';\nimport type { TrainingProgram } from '@shared/schema';\n\nexport default function CreateTrainingProgram() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [programData, setProgramData] = useState({\n    title: '',\n    slug: '',\n    description: '',\n    duration: '',\n    category: '',\n    price: 0,\n    online_price: 0,\n    offline_price: 0,\n    delivery_mode: 'both',\n    image_path: ''\n  });\n\n  const [isSlugManual, setIsSlugManual] = useState(false);\n\n  // Auto-generate slug from title when title changes\n  useEffect(() => {\n    if (!isSlugManual && programData.title) {\n      const autoSlug = generateSlug(programData.title);\n      setProgramData(prev => ({ ...prev, slug: autoSlug }));\n    }\n  }, [programData.title, isSlugManual]);\n\n  // Create training program mutation\n  const createProgramMutation = useMutation({\n    mutationFn: (data: Omit<TrainingProgram, 'id'>) => createTrainingProgram(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/training-programs'] });\n      toast({\n        title: \"Training program created\",\n        description: \"The training program has been successfully created\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating training program\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submissionData = {\n      ...programData,\n      price: programData.offline_price || programData.online_price || 0 // Set price for backward compatibility\n    };\n    \n    createProgramMutation.mutate(submissionData);\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Create Training Program</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Fill in the details to create a new training program.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Training Program Details</CardTitle>\n            <CardDescription>Enter the information for the new training program</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Program Title *</Label>\n                  <Input\n                    id=\"title\"\n                    value={programData.title}\n                    onChange={(e) => setProgramData({ ...programData, title: e.target.value })}\n                    placeholder=\"Enter program title\"\n                    required\n                    data-testid=\"input-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"slug\">URL Slug *</Label>\n                  <Input\n                    id=\"slug\"\n                    value={programData.slug}\n                    onChange={(e) => {\n                      setIsSlugManual(true);\n                      setProgramData({ ...programData, slug: e.target.value });\n                    }}\n                    placeholder=\"auto-generated-from-title\"\n                    required\n                    data-testid=\"input-slug\"\n                    className={!isValidSlug(programData.slug) && programData.slug ? 'border-red-500' : ''}\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Auto-generated from title. You can modify it for SEO. Only lowercase letters, numbers, and hyphens allowed.\n                  </p>\n                  {!isValidSlug(programData.slug) && programData.slug && (\n                    <p className=\"text-sm text-red-500\">\n                      Invalid slug format. Use only lowercase letters, numbers, and hyphens.\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category *</Label>\n                  <Input\n                    id=\"category\"\n                    value={programData.category}\n                    onChange={(e) => setProgramData({ ...programData, category: e.target.value })}\n                    placeholder=\"e.g., Technical, Leadership, Safety\"\n                    required\n                    data-testid=\"input-category\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"duration\">Duration *</Label>\n                  <Input\n                    id=\"duration\"\n                    value={programData.duration}\n                    onChange={(e) => setProgramData({ ...programData, duration: e.target.value })}\n                    placeholder=\"e.g., 2 weeks, 3 months\"\n                    required\n                    data-testid=\"input-duration\"\n                  />\n                </div>\n\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"online_price\">Online Price (₹)</Label>\n                  <Input\n                    id=\"online_price\"\n                    type=\"number\"\n                    value={programData.online_price}\n                    onChange={(e) => setProgramData({ ...programData, online_price: parseInt(e.target.value) || 0 })}\n                    placeholder=\"Enter online price (optional)\"\n                    min=\"0\"\n                    data-testid=\"input-online-price\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"offline_price\">Offline Price (₹) *</Label>\n                  <Input\n                    id=\"offline_price\"\n                    type=\"number\"\n                    value={programData.offline_price}\n                    onChange={(e) => setProgramData({ ...programData, offline_price: parseInt(e.target.value) || 0 })}\n                    placeholder=\"Enter offline price\"\n                    min=\"0\"\n                    required\n                    data-testid=\"input-offline-price\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"delivery_mode\">Delivery Mode *</Label>\n                  <Select \n                    value={programData.delivery_mode} \n                    onValueChange={(value) => setProgramData({ ...programData, delivery_mode: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-delivery-mode\">\n                      <SelectValue placeholder=\"Select delivery mode\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"online\">Online Only</SelectItem>\n                      <SelectItem value=\"offline\">Offline Only</SelectItem>\n                      <SelectItem value=\"both\">Both Online & Offline</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={programData.description}\n                  onChange={(e) => setProgramData({ ...programData, description: e.target.value })}\n                  placeholder=\"Describe the training program...\"\n                  rows={4}\n                  required\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"image_path\">Image Path (URL)</Label>\n                  <Input\n                    id=\"image_path\"\n                    value={programData.image_path}\n                    onChange={(e) => setProgramData({ ...programData, image_path: e.target.value })}\n                    placeholder=\"Enter image URL (optional)\"\n                    data-testid=\"input-image-path\"\n                  />\n                  {programData.image_path && (\n                    <div className=\"mt-3\">\n                      <Label className=\"text-sm text-gray-600 mb-2 block\">Image Preview:</Label>\n                      <div className=\"border rounded-lg p-2 bg-gray-50\">\n                        <img\n                          src={programData.image_path}\n                          alt=\"Training program preview\"\n                          className=\"max-w-full h-32 object-cover rounded\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'none';\n                            const errorDiv = target.nextElementSibling as HTMLDivElement;\n                            if (errorDiv) errorDiv.style.display = 'block';\n                          }}\n                          onLoad={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'block';\n                            const errorDiv = target.nextElementSibling as HTMLDivElement;\n                            if (errorDiv) errorDiv.style.display = 'none';\n                          }}\n                        />\n                        <div \n                          className=\"text-red-500 text-sm p-2 hidden\"\n                          style={{ display: 'none' }}\n                        >\n                          Failed to load image. Please check the URL.\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={createProgramMutation.isPending}\n                  data-testid=\"button-create-program\"\n                >\n                  {createProgramMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Create Program\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11696},"client/src/pages/admin/delete-confirmation.tsx":{"content":"import { useState } from 'react';\nimport { Link, useRoute, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { \n  deleteService, \n  deleteTrainingProgram,\n  deleteParticipant,\n  deleteCertificate, \n  deleteContact\n} from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft, Trash2, AlertTriangle } from 'lucide-react';\n\nexport default function DeleteConfirmation() {\n  const [, params] = useRoute('/admin/delete/:type/:id');\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const { type, id } = params!;\n  const itemId = parseInt(id);\n\n  // Query the specific item to get details for confirmation\n  const { data: item, isLoading } = useQuery({\n    queryKey: [`/api/${type}s/${itemId}`],\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n    enabled: !!type && !!itemId,\n  });\n\n  // Generic delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      setIsDeleting(true);\n      switch (type) {\n        case 'service':\n          return await deleteService(itemId);\n        case 'training-program':\n          return await deleteTrainingProgram(itemId);\n        case 'participant':\n          return await deleteParticipant(itemId);\n        case 'certificate':\n          return await deleteCertificate(itemId);\n        case 'contact':\n          return await deleteContact(itemId);\n        default:\n          throw new Error(`Unknown type: ${type}`);\n      }\n    },\n    onSuccess: () => {\n      // Invalidate the relevant queries\n      queryClient.invalidateQueries({ queryKey: [`/api/${type}s`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/services'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/training-programs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/participants'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/certificates'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n      \n      toast({\n        title: \"Item deleted\",\n        description: `The ${type.replace('-', ' ')} has been successfully deleted`,\n      });\n      navigate('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error deleting item\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setIsDeleting(false);\n    }\n  });\n\n  // Handle delete confirmation\n  const handleDelete = () => {\n    deleteMutation.mutate();\n  };\n\n  // Get item display name and details\n  const getItemDetails = () => {\n    if (!item?.data) return { name: 'Item', details: '' };\n    \n    const data = item.data;\n    \n    switch (type) {\n      case 'service':\n        return { \n          name: data.title || 'Service', \n          details: data.description || '' \n        };\n      case 'training-program':\n        return { \n          name: data.title || 'Training Program', \n          details: `${data.category || ''} • ${data.duration || ''}` \n        };\n      case 'participant':\n        return { \n          name: data.fullName || data.full_name || 'Participant', \n          details: `${data.email || ''} • ID: ${data.participantId || data.participant_id || ''}` \n        };\n      case 'certificate':\n        return { \n          name: `Certificate ${data.certificateId || data.certificate_id || ''}`, \n          details: data.participant_name || '' \n        };\n      case 'contact':\n        return { \n          name: data.fullName || data.full_name || 'Contact', \n          details: `${data.email || ''} • ${data.subject || ''}` \n        };\n      default:\n        return { name: 'Item', details: '' };\n    }\n  };\n\n  const { name, details } = getItemDetails();\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"flex justify-center py-10\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  // If item not found\n  if (!item?.data) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-red-600\">Item Not Found</CardTitle>\n              <CardDescription>\n                The item you're trying to delete could not be found.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Link href=\"/admin\">\n                <Button>\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Admin\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Admin\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"border-red-200\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-12 h-12 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center\">\n              <AlertTriangle className=\"h-6 w-6 text-red-600 dark:text-red-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n              Delete {type.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n            </CardTitle>\n            <CardDescription className=\"text-lg\">\n              Are you sure you want to delete this {type.replace('-', ' ')}?\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-2\">\n              <h3 className=\"font-semibold text-lg\">{name}</h3>\n              {details && (\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{details}</p>\n              )}\n            </div>\n\n            <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n              <div className=\"flex\">\n                <AlertTriangle className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5 mr-3 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"font-medium text-yellow-800 dark:text-yellow-400\">Warning</h4>\n                  <p className=\"text-sm text-yellow-700 dark:text-yellow-300 mt-1\">\n                    This action cannot be undone. The {type.replace('-', ' ')} and all associated data will be permanently removed.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 justify-end\">\n              <Link href=\"/admin\" className=\"order-2 sm:order-1\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full sm:w-auto\"\n                  disabled={isDeleting}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n              </Link>\n              <Button \n                variant=\"destructive\" \n                onClick={handleDelete}\n                disabled={isDeleting}\n                className=\"order-1 sm:order-2 w-full sm:w-auto\"\n                data-testid=\"button-confirm-delete\"\n              >\n                {isDeleting ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Deleting...\n                  </>\n                ) : (\n                  <>\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    Delete {type.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8536},"client/src/pages/admin/edit-certificate.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation, useParams } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { updateCertificate } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft } from 'lucide-react';\nimport type { TrainingProgram, Participant, Certificate } from '@shared/schema';\n\nexport default function EditCertificate() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { id } = useParams();\n  const certificateId = parseInt(id!);\n  \n  const [certificateData, setCertificateData] = useState({\n    certificateId: '',\n    participantId: 0,\n    trainingProgramId: 0,\n    issueDate: '',\n    expiryDate: '',\n    certificatePath: ''\n  });\n\n  // Query certificate\n  const { data: certificate, isLoading: isLoadingCertificate } = useQuery<{ data: Certificate }>({\n    queryKey: [`/api/certificates/${certificateId}`],\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n    enabled: !!certificateId,\n  });\n\n  // Query participants for dropdown\n  const { data: participants } = useQuery<{ data: Participant[] }>({\n    queryKey: ['/api/participants'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Query training programs for the dropdown\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Update certificate data when query loads\n  useEffect(() => {\n    if (certificate?.data) {\n      const c = certificate.data as any; // Handle both camelCase and snake_case\n      setCertificateData({\n        certificateId: c.certificateId || c.certificate_id || '',\n        participantId: c.participantId || c.participant_id || 0,\n        trainingProgramId: c.trainingProgramId || c.training_program_id || 0,\n        issueDate: (() => {\n          const dateField = c.issueDate || c.issue_date;\n          if (!dateField) return '';\n          if (dateField instanceof Date) return dateField.toISOString().split('T')[0];\n          return new Date(dateField).toISOString().split('T')[0];\n        })(),\n        expiryDate: (() => {\n          const dateField = c.expiryDate || c.expiry_date;\n          if (!dateField) return '';\n          if (dateField instanceof Date) return dateField.toISOString().split('T')[0];\n          return new Date(dateField).toISOString().split('T')[0];\n        })(),\n        certificatePath: c.certificatePath || c.certificate_path || ''\n      });\n    }\n  }, [certificate]);\n\n  // Update certificate mutation\n  const updateCertificateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number, data: Partial<Certificate> }) => updateCertificate(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/certificates'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/certificates/${certificateId}`] });\n      toast({\n        title: \"Certificate updated\",\n        description: \"The certificate has been successfully updated\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating certificate\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submissionData = {\n      ...certificateData,\n      participantId: Number(certificateData.participantId),\n      trainingProgramId: Number(certificateData.trainingProgramId),\n      issueDate: new Date(certificateData.issueDate),\n      expiryDate: certificateData.expiryDate ? new Date(certificateData.expiryDate) : null\n    };\n    \n    updateCertificateMutation.mutate({ id: certificateId, data: submissionData });\n  };\n\n  if (isLoadingCertificate) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Edit Certificate</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Update the certificate information.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Certificate Details</CardTitle>\n            <CardDescription>Update the information for this certificate</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"certificateId\">Certificate ID *</Label>\n                  <Input\n                    id=\"certificateId\"\n                    value={certificateData.certificateId}\n                    onChange={(e) => setCertificateData({ ...certificateData, certificateId: e.target.value })}\n                    placeholder=\"Certificate ID\"\n                    disabled // Usually don't change ID after creation\n                    data-testid=\"input-certificate-id\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"participant\">Participant *</Label>\n                  <Select \n                    value={certificateData.participantId.toString()} \n                    onValueChange={(value) => {\n                      const selectedParticipant = participants?.data?.find((p: any) => p.id === parseInt(value)) as any;\n                      const trainingProgramId = selectedParticipant?.training_program_id || selectedParticipant?.trainingProgramId;\n                      setCertificateData({ \n                        ...certificateData, \n                        participantId: parseInt(value),\n                        trainingProgramId: trainingProgramId || certificateData.trainingProgramId\n                      });\n                    }}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-participant\">\n                      <SelectValue placeholder=\"Select a participant\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {participants?.data?.map((participant: any) => (\n                        <SelectItem key={participant.id} value={participant.id.toString()}>\n                          {participant.full_name || participant.fullName} ({participant.participant_id || participant.participantId})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"trainingProgram\">Training Program *</Label>\n                  <Select \n                    value={certificateData.trainingProgramId.toString()} \n                    onValueChange={(value) => setCertificateData({ ...certificateData, trainingProgramId: parseInt(value) })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-training-program\">\n                      <SelectValue placeholder=\"Select a training program\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {programs?.data?.map((program) => (\n                        <SelectItem key={program.id} value={program.id.toString()}>\n                          {program.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"issueDate\">Issue Date *</Label>\n                  <Input\n                    id=\"issueDate\"\n                    type=\"date\"\n                    value={certificateData.issueDate}\n                    onChange={(e) => setCertificateData({ ...certificateData, issueDate: e.target.value })}\n                    required\n                    data-testid=\"input-issue-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"expiryDate\">Expiry Date</Label>\n                  <Input\n                    id=\"expiryDate\"\n                    type=\"date\"\n                    value={certificateData.expiryDate}\n                    onChange={(e) => setCertificateData({ ...certificateData, expiryDate: e.target.value })}\n                    data-testid=\"input-expiry-date\"\n                  />\n                  <p className=\"text-sm text-gray-500\">Leave empty for certificates that don't expire</p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"certificatePath\">Certificate Path</Label>\n                  <Input\n                    id=\"certificatePath\"\n                    value={certificateData.certificatePath}\n                    onChange={(e) => setCertificateData({ ...certificateData, certificatePath: e.target.value })}\n                    placeholder=\"Path to certificate file (optional)\"\n                    data-testid=\"input-certificate-path\"\n                  />\n                  <p className=\"text-sm text-gray-500\">URL or path to the certificate document</p>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={updateCertificateMutation.isPending}\n                  data-testid=\"button-update-certificate\"\n                >\n                  {updateCertificateMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Update Certificate\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11010},"client/src/pages/admin/edit-participant.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation, useParams } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { updateParticipant } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft } from 'lucide-react';\nimport type { TrainingProgram, Participant } from '@shared/schema';\n\nexport default function EditParticipant() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { id } = useParams();\n  const participantId = parseInt(id!);\n  \n  const [participantData, setParticipantData] = useState({\n    participantId: '',\n    fullName: '',\n    email: '',\n    phone: '',\n    trainingProgramId: 0,\n    enrollmentDate: '',\n    status: 'active'\n  });\n\n  // Query participant\n  const { data: participant, isLoading: isLoadingParticipant } = useQuery<{ data: Participant }>({\n    queryKey: [`/api/participants/${participantId}`],\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n    enabled: !!participantId,\n  });\n\n  // Query training programs for the dropdown\n  const { data: programs } = useQuery<{ data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n    staleTime: 10000,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Update participant data when query loads\n  useEffect(() => {\n    if (participant?.data) {\n      const p = participant.data as any; // Handle both camelCase and snake_case\n      setParticipantData({\n        participantId: p.participantId || p.participant_id || '',\n        fullName: p.fullName || p.full_name || '',\n        email: p.email || '',\n        phone: p.phone || '',\n        trainingProgramId: p.trainingProgramId || p.training_program_id || 0,\n        enrollmentDate: (() => {\n          const dateField = p.enrollmentDate || p.enrollment_date;\n          if (!dateField) return '';\n          if (dateField instanceof Date) return dateField.toISOString().split('T')[0];\n          return new Date(dateField).toISOString().split('T')[0];\n        })(),\n        status: (p.status as string) || 'active'\n      });\n    }\n  }, [participant]);\n\n  // Update participant mutation\n  const updateParticipantMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number, data: Partial<Participant> }) => updateParticipant(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/participants'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/participants/${participantId}`] });\n      toast({\n        title: \"Participant updated\",\n        description: \"The participant has been successfully updated\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating participant\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submissionData = {\n      ...participantData,\n      trainingProgramId: Number(participantData.trainingProgramId),\n      enrollmentDate: new Date(participantData.enrollmentDate)\n    };\n    \n    updateParticipantMutation.mutate({ id: participantId, data: submissionData });\n  };\n\n  if (isLoadingParticipant) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Edit Participant</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Update the participant information.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Participant Details</CardTitle>\n            <CardDescription>Update the information for this participant</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"participantId\">Participant ID *</Label>\n                  <Input\n                    id=\"participantId\"\n                    value={participantData.participantId}\n                    onChange={(e) => setParticipantData({ ...participantData, participantId: e.target.value })}\n                    placeholder=\"Participant ID\"\n                    disabled // Usually don't change ID after creation\n                    data-testid=\"input-participant-id\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full Name *</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={participantData.fullName}\n                    onChange={(e) => setParticipantData({ ...participantData, fullName: e.target.value })}\n                    placeholder=\"Enter participant's full name\"\n                    required\n                    data-testid=\"input-full-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={participantData.email}\n                    onChange={(e) => setParticipantData({ ...participantData, email: e.target.value })}\n                    placeholder=\"Enter email address\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number *</Label>\n                  <Input\n                    id=\"phone\"\n                    value={participantData.phone}\n                    onChange={(e) => setParticipantData({ ...participantData, phone: e.target.value })}\n                    placeholder=\"Enter phone number\"\n                    required\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"trainingProgram\">Training Program *</Label>\n                  <Select \n                    value={participantData.trainingProgramId.toString()} \n                    onValueChange={(value) => setParticipantData({ ...participantData, trainingProgramId: parseInt(value) })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-training-program\">\n                      <SelectValue placeholder=\"Select a training program\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {programs?.data?.map((program) => (\n                        <SelectItem key={program.id} value={program.id.toString()}>\n                          {program.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"enrollmentDate\">Enrollment Date *</Label>\n                  <Input\n                    id=\"enrollmentDate\"\n                    type=\"date\"\n                    value={participantData.enrollmentDate}\n                    onChange={(e) => setParticipantData({ ...participantData, enrollmentDate: e.target.value })}\n                    required\n                    data-testid=\"input-enrollment-date\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status *</Label>\n                  <Select \n                    value={participantData.status} \n                    onValueChange={(value) => setParticipantData({ ...participantData, status: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-status\">\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"paused\">Paused</SelectItem>\n                      <SelectItem value=\"withdrawn\">Withdrawn</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={updateParticipantMutation.isPending}\n                  data-testid=\"button-update-participant\"\n                >\n                  {updateParticipantMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Update Participant\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10096},"client/src/pages/admin/edit-service.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useRoute } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { updateService } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft, BarChart3, FileText, Building2, ClipboardCheck, Users, Award, Target, TrendingUp, Briefcase, Settings } from 'lucide-react';\nimport type { Service } from '@shared/schema';\n\nconst iconOptions = [\n  { value: 'chart-line', label: 'Chart Line', icon: <BarChart3 className=\"h-4 w-4\" /> },\n  { value: 'file-invoice', label: 'File Invoice', icon: <FileText className=\"h-4 w-4\" /> },\n  { value: 'building', label: 'Building', icon: <Building2 className=\"h-4 w-4\" /> },\n  { value: 'clipboard-check', label: 'Clipboard Check', icon: <ClipboardCheck className=\"h-4 w-4\" /> },\n  { value: 'users', label: 'Users', icon: <Users className=\"h-4 w-4\" /> },\n  { value: 'award', label: 'Award', icon: <Award className=\"h-4 w-4\" /> },\n  { value: 'target', label: 'Target', icon: <Target className=\"h-4 w-4\" /> },\n  { value: 'trending-up', label: 'Trending Up', icon: <TrendingUp className=\"h-4 w-4\" /> },\n  { value: 'briefcase', label: 'Briefcase', icon: <Briefcase className=\"h-4 w-4\" /> },\n  { value: 'settings', label: 'Settings', icon: <Settings className=\"h-4 w-4\" /> }\n];\n\nexport default function EditService() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [, params] = useRoute('/admin/services/edit/:id');\n  const serviceId = params?.id ? parseInt(params.id) : null;\n  \n  const [serviceData, setServiceData] = useState({\n    title: '',\n    description: '',\n    icon: '',\n    features: ''\n  });\n\n  // Query service data\n  const { data: service, isLoading } = useQuery<{ data: Service }>({\n    queryKey: [`/api/services/${serviceId}`],\n    enabled: !!serviceId,\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n  });\n\n  // Update form data when service data is loaded\n  useEffect(() => {\n    if (service?.data) {\n      const featuresString = Array.isArray(service.data.features) \n        ? service.data.features.join(', ') \n        : '';\n      \n      setServiceData({\n        title: service.data.title || '',\n        description: service.data.description || '',\n        icon: service.data.icon || '',\n        features: featuresString\n      });\n    }\n  }, [service]);\n\n  // Update service mutation\n  const updateServiceMutation = useMutation({\n    mutationFn: (data: Partial<Omit<Service, 'id'>>) => {\n      if (!serviceId) throw new Error('Service ID is required');\n      return updateService(serviceId, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/services'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/services/${serviceId}`] });\n      toast({\n        title: \"Service updated\",\n        description: \"The service has been successfully updated\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating service\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!serviceData.title || !serviceData.description || !serviceData.icon) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Parse features from comma-separated string to array\n    const featuresArray = serviceData.features\n      .split(',')\n      .map(feature => feature.trim())\n      .filter(feature => feature.length > 0);\n    \n    const submissionData = {\n      title: serviceData.title,\n      description: serviceData.description,\n      icon: serviceData.icon,\n      features: featuresArray\n    };\n    \n    updateServiceMutation.mutate(submissionData);\n  };\n\n  const getSelectedIcon = (value: string) => {\n    const option = iconOptions.find(opt => opt.value === value);\n    return option ? option.icon : <Briefcase className=\"h-4 w-4\" />;\n  };\n\n  if (!serviceId) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Invalid Service</h2>\n            <p className=\"mb-8\">The service ID is missing or invalid.</p>\n            <Link href=\"/admin\">\n              <Button>Back to Admin Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!service?.data) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Service not found</h2>\n            <p className=\"mb-8\">The service you're looking for doesn't exist.</p>\n            <Link href=\"/admin\">\n              <Button>Back to Admin Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Edit Service</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Update the service details.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Service Details</CardTitle>\n            <CardDescription>Update the details for this service</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Service Title *</Label>\n                  <Input\n                    id=\"title\"\n                    value={serviceData.title}\n                    onChange={(e) => setServiceData({ ...serviceData, title: e.target.value })}\n                    placeholder=\"Enter service title\"\n                    required\n                    data-testid=\"input-service-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"icon\">Icon *</Label>\n                  <Select \n                    value={serviceData.icon} \n                    onValueChange={(value) => setServiceData({ ...serviceData, icon: value })}\n                    required\n                  >\n                    <SelectTrigger data-testid=\"select-service-icon\">\n                      <SelectValue placeholder=\"Select an icon\">\n                        {serviceData.icon && (\n                          <div className=\"flex items-center\">\n                            {getSelectedIcon(serviceData.icon)}\n                            <span className=\"ml-2\">\n                              {iconOptions.find(opt => opt.value === serviceData.icon)?.label}\n                            </span>\n                          </div>\n                        )}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent>\n                      {iconOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          <div className=\"flex items-center\">\n                            {option.icon}\n                            <span className=\"ml-2\">{option.label}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-sm text-gray-500\">Choose an icon that represents your service</p>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={serviceData.description}\n                  onChange={(e) => setServiceData({ ...serviceData, description: e.target.value })}\n                  placeholder=\"Enter service description\"\n                  rows={4}\n                  required\n                  data-testid=\"textarea-service-description\"\n                />\n                <p className=\"text-sm text-gray-500\">Provide a detailed description of the service</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"features\">Features</Label>\n                <Textarea\n                  id=\"features\"\n                  value={serviceData.features}\n                  onChange={(e) => setServiceData({ ...serviceData, features: e.target.value })}\n                  placeholder=\"Enter features separated by commas (e.g., Feature 1, Feature 2, Feature 3)\"\n                  rows={3}\n                  data-testid=\"textarea-service-features\"\n                />\n                <p className=\"text-sm text-gray-500\">List key features separated by commas</p>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={updateServiceMutation.isPending}\n                  data-testid=\"button-update-service\"\n                >\n                  {updateServiceMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Update Service\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11006},"client/src/pages/admin/edit-training-program.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link, useLocation, useParams } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { queryClient, getQueryFn } from '@/lib/queryClient';\nimport { updateTrainingProgram } from '@/lib/cloudflare-api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, ArrowLeft } from 'lucide-react';\nimport { generateSlug, isValidSlug } from '@/lib/slug-utils';\nimport type { TrainingProgram } from '@shared/schema';\n\nexport default function EditTrainingProgram() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { id } = useParams();\n  const programId = parseInt(id!);\n  \n  const [programData, setProgramData] = useState({\n    title: '',\n    slug: '',\n    description: '',\n    duration: '',\n    category: '',\n    price: 0,\n    online_price: 0,\n    offline_price: 0,\n    delivery_mode: 'both',\n    image_path: ''\n  });\n\n  const [isSlugManual, setIsSlugManual] = useState(false);\n\n  // Auto-generate slug from title when title changes (only if slug is empty)\n  useEffect(() => {\n    if (!isSlugManual && programData.title && !programData.slug) {\n      const autoSlug = generateSlug(programData.title);\n      setProgramData(prev => ({ ...prev, slug: autoSlug }));\n    }\n  }, [programData.title, isSlugManual]);\n\n  // Query training program\n  const { data: program, isLoading } = useQuery<{ data: TrainingProgram }>({\n    queryKey: [`/api/training-programs/${programId}`],\n    queryFn: getQueryFn({ on401: \"throw\", authenticate: true }),\n    enabled: !!programId,\n  });\n\n  // Update program data when query loads\n  useEffect(() => {\n    if (program?.data) {\n      const p = program.data as any; // Handle both camelCase and snake_case\n      setProgramData({\n        title: p.title || '',\n        slug: p.slug || generateSlug(p.title) || '',\n        description: p.description || '',\n        duration: p.duration || '',\n        category: p.category || '',\n        price: p.price || 0,\n        online_price: p.online_price || 0,\n        offline_price: p.offline_price || 0,\n        delivery_mode: (p.delivery_mode as string) || 'both',\n        image_path: p.image_path || ''\n      });\n      // If program already has a slug, mark it as manually set\n      if (p.slug) {\n        setIsSlugManual(true);\n      }\n    }\n  }, [program]);\n\n  // Update training program mutation\n  const updateProgramMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number, data: Partial<TrainingProgram> }) => updateTrainingProgram(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/training-programs'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/training-programs/${programId}`] });\n      toast({\n        title: \"Training program updated\",\n        description: \"The training program has been successfully updated\",\n      });\n      setLocation('/admin');\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating training program\",\n        description: error instanceof Error ? error.message : \"An unknown error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Ensure we have valid prices\n    const onlinePrice = programData.online_price || 0;\n    const offlinePrice = programData.offline_price || 0;\n    \n    const submissionData = {\n      ...programData,\n      price: offlinePrice || onlinePrice || 0, // Set price for backward compatibility\n      online_price: onlinePrice,\n      offline_price: offlinePrice\n    };\n    \n    console.log('Submitting training program update:', submissionData);\n    updateProgramMutation.mutate({ id: programId, data: submissionData });\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-6\">\n          <Link href=\"/admin\" className=\"inline-flex items-center text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Admin Dashboard\n          </Link>\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white\">Edit Training Program</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Update the details for this training program.</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Training Program Details</CardTitle>\n            <CardDescription>Update the information for this training program</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Program Title *</Label>\n                  <Input\n                    id=\"title\"\n                    value={programData.title}\n                    onChange={(e) => setProgramData({ ...programData, title: e.target.value })}\n                    placeholder=\"Enter program title\"\n                    required\n                    data-testid=\"input-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"slug\">URL Slug *</Label>\n                  <Input\n                    id=\"slug\"\n                    value={programData.slug}\n                    onChange={(e) => {\n                      setIsSlugManual(true);\n                      setProgramData({ ...programData, slug: e.target.value });\n                    }}\n                    placeholder=\"auto-generated-from-title\"\n                    required\n                    data-testid=\"input-slug\"\n                    className={!isValidSlug(programData.slug) && programData.slug ? 'border-red-500' : ''}\n                  />\n                  <p className=\"text-sm text-gray-500\">\n                    Auto-generated from title. You can modify it for SEO. Only lowercase letters, numbers, and hyphens allowed.\n                  </p>\n                  {!isValidSlug(programData.slug) && programData.slug && (\n                    <p className=\"text-sm text-red-500\">\n                      Invalid slug format. Use only lowercase letters, numbers, and hyphens.\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category *</Label>\n                  <Input\n                    id=\"category\"\n                    value={programData.category}\n                    onChange={(e) => setProgramData({ ...programData, category: e.target.value })}\n                    placeholder=\"e.g., Technical, Leadership, Safety\"\n                    required\n                    data-testid=\"input-category\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"duration\">Duration *</Label>\n                  <Input\n                    id=\"duration\"\n                    value={programData.duration}\n                    onChange={(e) => setProgramData({ ...programData, duration: e.target.value })}\n                    placeholder=\"e.g., 2 weeks, 3 months\"\n                    required\n                    data-testid=\"input-duration\"\n                  />\n                </div>\n\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"online_price\">Online Price (₹)</Label>\n                  <Input\n                    id=\"online_price\"\n                    type=\"number\"\n                    value={programData.online_price}\n                    onChange={(e) => setProgramData({ ...programData, online_price: parseInt(e.target.value) || 0 })}\n                    placeholder=\"Enter online price (optional)\"\n                    min=\"0\"\n                    data-testid=\"input-online-price\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"offline_price\">Offline Price (₹) *</Label>\n                  <Input\n                    id=\"offline_price\"\n                    type=\"number\"\n                    value={programData.offline_price}\n                    onChange={(e) => setProgramData({ ...programData, offline_price: parseInt(e.target.value) || 0 })}\n                    placeholder=\"Enter offline price\"\n                    min=\"0\"\n                    required\n                    data-testid=\"input-offline-price\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"delivery_mode\">Delivery Mode *</Label>\n                  <Select \n                    value={programData.delivery_mode} \n                    onValueChange={(value) => setProgramData({ ...programData, delivery_mode: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-delivery-mode\">\n                      <SelectValue placeholder=\"Select delivery mode\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"online\">Online Only</SelectItem>\n                      <SelectItem value=\"offline\">Offline Only</SelectItem>\n                      <SelectItem value=\"both\">Both Online & Offline</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={programData.description}\n                  onChange={(e) => setProgramData({ ...programData, description: e.target.value })}\n                  placeholder=\"Describe the training program...\"\n                  rows={4}\n                  required\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"image_path\">Image Path (URL)</Label>\n                  <Input\n                    id=\"image_path\"\n                    value={programData.image_path}\n                    onChange={(e) => setProgramData({ ...programData, image_path: e.target.value })}\n                    placeholder=\"Enter image URL (optional)\"\n                    data-testid=\"input-image-path\"\n                  />\n                  {programData.image_path && (\n                    <div className=\"mt-3\">\n                      <Label className=\"text-sm text-gray-600 mb-2 block\">Image Preview:</Label>\n                      <div className=\"border rounded-lg p-2 bg-gray-50\">\n                        <img\n                          src={programData.image_path}\n                          alt=\"Training program preview\"\n                          className=\"max-w-full h-32 object-cover rounded\"\n                          onError={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'none';\n                            const errorDiv = target.nextElementSibling as HTMLDivElement;\n                            if (errorDiv) errorDiv.style.display = 'block';\n                          }}\n                          onLoad={(e) => {\n                            const target = e.target as HTMLImageElement;\n                            target.style.display = 'block';\n                            const errorDiv = target.nextElementSibling as HTMLDivElement;\n                            if (errorDiv) errorDiv.style.display = 'none';\n                          }}\n                        />\n                        <div \n                          className=\"text-red-500 text-sm p-2 hidden\"\n                          style={{ display: 'none' }}\n                        >\n                          Failed to load image. Please check the URL.\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4 pt-6\">\n                <Link href=\"/admin\">\n                  <Button type=\"button\" variant=\"outline\">Cancel</Button>\n                </Link>\n                <Button \n                  type=\"submit\" \n                  disabled={updateProgramMutation.isPending}\n                  data-testid=\"button-update-program\"\n                >\n                  {updateProgramMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Update Program\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13464},"server/telegram-notifications.ts":{"content":"import TelegramBot from 'node-telegram-bot-api';\n\n// Telegram Bot Configuration\nconst TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\nconst TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;\nconst MAX_MESSAGE_LENGTH = 4096; // Telegram's message length limit\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1000; // 1 second\n\nlet bot: TelegramBot | null = null;\nlet lastNotificationTime = 0;\nconst MIN_NOTIFICATION_INTERVAL = 2000; // Prevent spam (2 seconds between notifications)\n\n// Initialize Telegram Bot\nfunction initializeTelegramBot() {\n  if (!TELEGRAM_BOT_TOKEN || TELEGRAM_BOT_TOKEN.trim() === '' || TELEGRAM_BOT_TOKEN === 'your_telegram_bot_token_here') {\n    console.warn('⚠️ TELEGRAM_BOT_TOKEN not configured. Telegram notifications disabled.');\n    return null;\n  }\n\n  if (!TELEGRAM_CHAT_ID || TELEGRAM_CHAT_ID.trim() === '' || TELEGRAM_CHAT_ID === 'your_telegram_chat_id_here') {\n    console.warn('⚠️ TELEGRAM_CHAT_ID not configured. Telegram notifications disabled.');\n    return null;\n  }\n\n  try {\n    bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { \n      polling: false\n    });\n    console.log('✅ Telegram bot initialized successfully');\n    return bot;\n  } catch (error) {\n    console.error('❌ Failed to initialize Telegram bot:', error);\n    return null;\n  }\n}\n\n// Helper function to sanitize and truncate text\nfunction sanitizeText(text: string | undefined | null): string {\n  if (!text) return 'N/A';\n  // Remove any potentially harmful characters and normalize\n  return String(text).trim().replace(/[\\x00-\\x1F\\x7F]/g, '').substring(0, 500);\n}\n\n// Helper function to truncate message if too long\nfunction truncateMessage(message: string): string {\n  if (message.length <= MAX_MESSAGE_LENGTH) {\n    return message;\n  }\n  \n  const truncated = message.substring(0, MAX_MESSAGE_LENGTH - 100);\n  return truncated + '\\n\\n... [Message truncated due to length limit]';\n}\n\n// Helper function to validate contact data\nfunction validateContactData(contactData: any): boolean {\n  if (!contactData || typeof contactData !== 'object') {\n    return false;\n  }\n  \n  // At minimum, we need name and either email or subject\n  const hasName = contactData.name && String(contactData.name).trim().length > 0;\n  const hasEmail = contactData.email && String(contactData.email).trim().length > 0;\n  const hasSubject = contactData.subject && String(contactData.subject).trim().length > 0;\n  \n  return hasName && (hasEmail || hasSubject);\n}\n\n// Retry function with exponential backoff\nasync function retryWithBackoff<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = MAX_RETRIES,\n  delay: number = RETRY_DELAY\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      \n      // Don't retry on authentication errors or invalid chat ID\n      if (error && typeof error === 'object' && 'response' in error) {\n        const response = (error as any).response;\n        if (response?.statusCode === 401 || response?.statusCode === 403) {\n          throw error; // Don't retry auth failures\n        }\n      }\n      \n      if (i < maxRetries - 1) {\n        console.log(`⏳ Telegram API attempt ${i + 1} failed, retrying in ${delay}ms...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n        delay *= 2; // Exponential backoff\n      }\n    }\n  }\n  \n  throw lastError!;\n}\n\n// Send notification when someone contacts you\nexport async function sendContactNotification(contactData: {\n  name: string;\n  email: string;\n  phone?: string;\n  subject: string;\n  message: string;\n}) {\n  // Rate limiting check\n  const now = Date.now();\n  if (now - lastNotificationTime < MIN_NOTIFICATION_INTERVAL) {\n    console.log('⏳ Rate limiting: Skipping notification (too frequent)');\n    return { success: false, reason: 'rate_limited' };\n  }\n\n  // Validate input data\n  if (!validateContactData(contactData)) {\n    console.error('❌ Invalid contact data provided to notification system');\n    logContactToConsole(contactData, 'Invalid data provided');\n    return { success: false, reason: 'invalid_data' };\n  }\n\n  // Initialize bot if needed\n  if (!bot && !initializeTelegramBot()) {\n    console.log('⚠️ Telegram bot not available. Logging contact to console instead.');\n    logContactToConsole(contactData, 'Telegram bot not configured');\n    return { success: false, reason: 'bot_not_configured' };\n  }\n\n  if (!TELEGRAM_CHAT_ID) {\n    console.warn('⚠️ TELEGRAM_CHAT_ID not found. Logging contact to console instead.');\n    logContactToConsole(contactData, 'Chat ID not configured');\n    return { success: false, reason: 'chat_id_not_configured' };\n  }\n\n  try {\n    // Sanitize all input data\n    const sanitizedData = {\n      name: sanitizeText(contactData.name),\n      email: sanitizeText(contactData.email),\n      phone: contactData.phone ? sanitizeText(contactData.phone) : undefined,\n      subject: sanitizeText(contactData.subject),\n      message: sanitizeText(contactData.message)\n    };\n\n    // Create notification message\n    let notificationMessage = `\n🔔 NEW CONTACT FORM SUBMISSION!\n\n👤 Name: ${sanitizedData.name}\n📧 Email: ${sanitizedData.email}\n${sanitizedData.phone ? `📱 Phone: ${sanitizedData.phone}` : ''}\n📋 Subject: ${sanitizedData.subject}\n\n💬 Message:\n${sanitizedData.message}\n\n⏰ Time: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}\n\n🔗 Check your admin panel: https://bhumiconsultancy.in/admin\n    `.trim();\n\n    // Truncate if too long\n    notificationMessage = truncateMessage(notificationMessage);\n\n    // Send with retry logic\n    await retryWithBackoff(async () => {\n      await bot!.sendMessage(TELEGRAM_CHAT_ID!, notificationMessage, {\n        disable_web_page_preview: true,\n        parse_mode: undefined // Use plain text to avoid parsing issues\n      });\n    });\n\n    lastNotificationTime = now;\n    console.log(`✅ Telegram notification sent successfully to ${sanitizedData.name} (${sanitizedData.email})`);\n    return { success: true };\n\n  } catch (error: any) {\n    // Comprehensive error handling\n    const errorMessage = error?.message || 'Unknown error';\n    const errorCode = error?.response?.statusCode || error?.code;\n    \n    console.error(`❌ Failed to send Telegram notification: ${errorMessage} (Code: ${errorCode})`);\n    \n    // Log the contact details to console as fallback\n    logContactToConsole(contactData, `Telegram failed: ${errorMessage}`);\n    \n    // Specific error handling\n    if (errorCode === 401) {\n      console.error('🔐 Authentication failed: Invalid bot token');\n    } else if (errorCode === 403) {\n      console.error('🚫 Forbidden: Bot may be blocked or chat ID invalid');\n    } else if (errorCode === 429) {\n      console.error('⏱️ Rate limited by Telegram API');\n    } else if (errorCode === 400) {\n      console.error('📝 Bad request: Message format issue');\n    } else if (error?.code === 'ENOTFOUND' || error?.code === 'ECONNREFUSED') {\n      console.error('🌐 Network error: Cannot reach Telegram servers');\n    }\n    \n    return { success: false, reason: 'telegram_api_error', error: errorMessage };\n  }\n}\n\n// Fallback: Log contact details to console when Telegram fails\nfunction logContactToConsole(contactData: any, reason: string) {\n  console.log('\\n' + '='.repeat(60));\n  console.log('📋 CONTACT FORM SUBMISSION (Console Fallback)');\n  console.log('='.repeat(60));\n  console.log(`Reason: ${reason}`);\n  console.log(`Time: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}`);\n  console.log(`Name: ${contactData?.name || 'N/A'}`);\n  console.log(`Email: ${contactData?.email || 'N/A'}`);\n  console.log(`Phone: ${contactData?.phone || 'N/A'}`);\n  console.log(`Subject: ${contactData?.subject || 'N/A'}`);\n  console.log(`Message: ${contactData?.message || 'N/A'}`);\n  console.log('='.repeat(60));\n  console.log('🔗 Check admin panel: https://bhumiconsultancy.in/admin');\n  console.log('='.repeat(60) + '\\n');\n}\n\n// Test function to verify bot is working\nexport async function testTelegramBot() {\n  if (!bot && !initializeTelegramBot()) {\n    return { success: false, error: 'Bot not initialized - check TELEGRAM_BOT_TOKEN' };\n  }\n\n  if (!TELEGRAM_CHAT_ID) {\n    return { success: false, error: 'Chat ID not configured - check TELEGRAM_CHAT_ID' };\n  }\n\n  try {\n    // Test with retry logic\n    await retryWithBackoff(async () => {\n      await bot!.sendMessage(TELEGRAM_CHAT_ID!, \n        '🤖 TEST MESSAGE\\n\\nYour Telegram notification bot is working perfectly! You will now receive instant alerts when someone contacts you through your website.\\n\\n✅ All systems operational',\n        { disable_web_page_preview: true }\n      );\n    });\n    \n    return { \n      success: true, \n      message: 'Test message sent successfully',\n      botToken: TELEGRAM_BOT_TOKEN ? '✅ Configured' : '❌ Missing',\n      chatId: TELEGRAM_CHAT_ID ? '✅ Configured' : '❌ Missing'\n    };\n  } catch (error: any) {\n    const errorMessage = error?.message || 'Unknown error';\n    const errorCode = error?.response?.statusCode || error?.code;\n    \n    let specificError = errorMessage;\n    if (errorCode === 401) {\n      specificError = 'Invalid bot token - check your TELEGRAM_BOT_TOKEN';\n    } else if (errorCode === 403) {\n      specificError = 'Bot blocked or invalid chat ID - check your TELEGRAM_CHAT_ID';\n    } else if (errorCode === 400) {\n      specificError = 'Bad request - check your bot configuration';\n    }\n    \n    return { \n      success: false, \n      error: specificError,\n      botToken: TELEGRAM_BOT_TOKEN ? '✅ Configured' : '❌ Missing',\n      chatId: TELEGRAM_CHAT_ID ? '✅ Configured' : '❌ Missing',\n      errorCode\n    };\n  }\n}\n\n// Health check function\nexport function getTelegramBotStatus() {\n  return {\n    botInitialized: bot !== null,\n    tokenConfigured: !!(TELEGRAM_BOT_TOKEN && TELEGRAM_BOT_TOKEN !== 'your_telegram_bot_token_here'),\n    chatIdConfigured: !!(TELEGRAM_CHAT_ID && TELEGRAM_CHAT_ID !== 'your_telegram_chat_id_here'),\n    lastNotificationTime: lastNotificationTime ? new Date(lastNotificationTime).toISOString() : null\n  };\n}\n\n// Initialize bot on module load\ninitializeTelegramBot();","size_bytes":10213},"client/src/lib/slug-utils.ts":{"content":"/**\n * Generate SEO-friendly slug from text\n */\nexport function generateSlug(text: string): string {\n  if (!text) return '';\n  \n  return text\n    .toLowerCase()\n    .trim()\n    // Replace special characters and spaces with hyphens\n    .replace(/[^\\w\\s-]/g, '')\n    // Replace multiple spaces/hyphens with single hyphen\n    .replace(/[\\s_-]+/g, '-')\n    // Remove leading/trailing hyphens\n    .replace(/^-+|-+$/g, '');\n}\n\n/**\n * Validate slug format\n */\nexport function isValidSlug(slug: string): boolean {\n  const slugPattern = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;\n  return slugPattern.test(slug);\n}","size_bytes":592},"client/src/components/SEO/Breadcrumbs.tsx":{"content":"import { useEffect } from 'react';\nimport { Link } from 'wouter';\n\ninterface BreadcrumbItem {\n  name: string;\n  url: string;\n}\n\ninterface BreadcrumbsProps {\n  items: BreadcrumbItem[];\n  className?: string;\n}\n\nexport default function Breadcrumbs({ items, className = '' }: BreadcrumbsProps) {\n  // Add structured data for breadcrumbs\n  useEffect(() => {\n    const breadcrumbSchema = {\n      '@context': 'https://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: items.map((item, index) => ({\n        '@type': 'ListItem',\n        position: index + 1,\n        name: item.name,\n        item: {\n          '@type': 'WebPage',\n          '@id': item.url.startsWith('http') ? item.url : `https://bhumiconsultancy.in${item.url}`\n        }\n      }))\n    };\n\n    // Create script element for JSON-LD\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.innerHTML = JSON.stringify(breadcrumbSchema);\n    script.id = 'breadcrumb-schema';\n\n    // Remove existing breadcrumb schema if present\n    const existingScript = document.getElementById('breadcrumb-schema');\n    if (existingScript) {\n      existingScript.remove();\n    }\n\n    // Add new schema\n    document.head.appendChild(script);\n\n    // Cleanup function to remove the script when component unmounts\n    return () => {\n      const scriptToRemove = document.getElementById('breadcrumb-schema');\n      if (scriptToRemove) {\n        scriptToRemove.remove();\n      }\n    };\n  }, [items]);\n\n  if (items.length <= 1) {\n    return null; // Don't show breadcrumbs if there's only one item (home)\n  }\n\n  return (\n    <nav \n      className={`text-sm text-gray-600 mb-4 ${className}`}\n      aria-label=\"Breadcrumb navigation\"\n    >\n      <ol className=\"flex items-center space-x-2\">\n        {items.map((item, index) => (\n          <li key={index} className=\"flex items-center\">\n            {index > 0 && (\n              <svg \n                className=\"w-4 h-4 mx-2 text-gray-400\" \n                fill=\"currentColor\" \n                viewBox=\"0 0 20 20\"\n                aria-hidden=\"true\"\n              >\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n              </svg>\n            )}\n            {index === items.length - 1 ? (\n              // Current page - not a link\n              <span \n                className=\"font-medium text-gray-900\"\n                aria-current=\"page\"\n              >\n                {item.name}\n              </span>\n            ) : (\n              // Link to previous pages\n              <Link \n                href={item.url}\n                className=\"hover:text-blue-600 transition-colors duration-200\"\n              >\n                {item.name}\n              </Link>\n            )}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}\n\n// Helper function to generate breadcrumbs for different page types\nexport const generateBreadcrumbs = {\n  home: (): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' }\n  ],\n  \n  about: (): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'About Us', url: '/about' }\n  ],\n  \n  contact: (): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'Contact', url: '/contact' }\n  ],\n  \n  trainingPrograms: (): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'Training Programs', url: '/training-programs' }\n  ],\n  \n  trainingProgramDetail: (programTitle: string, programId: string): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'Training Programs', url: '/training-programs' },\n    { name: programTitle, url: `/training-programs/${programId}` }\n  ],\n  \n  services: (): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'Services', url: '/services' }\n  ],\n  \n  serviceDetail: (serviceTitle: string, serviceId: string): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'Services', url: '/services' },\n    { name: serviceTitle, url: `/services/${serviceId}` }\n  ],\n  \n  verifyCertificate: (): BreadcrumbItem[] => [\n    { name: 'Home', url: '/' },\n    { name: 'Verify Certificate', url: '/verify-certificate' }\n  ]\n};","size_bytes":4233},"client/src/components/SEO/FAQSchema.tsx":{"content":"import { useEffect } from 'react';\nimport { ChevronDownIcon, ChevronUpIcon } from 'lucide-react';\nimport { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\n\nexport interface FAQItem {\n  question: string;\n  answer: string;\n}\n\ninterface FAQSchemaProps {\n  faqs: FAQItem[];\n  showVisualFAQ?: boolean;\n  className?: string;\n}\n\nexport default function FAQSchema({ faqs, showVisualFAQ = true, className = '' }: FAQSchemaProps) {\n  const [expandedItems, setExpandedItems] = useState<number[]>([]);\n\n  // Add FAQ structured data\n  useEffect(() => {\n    if (faqs.length === 0) return;\n\n    const faqSchema = {\n      '@context': 'https://schema.org',\n      '@type': 'FAQPage',\n      mainEntity: faqs.map((faq) => ({\n        '@type': 'Question',\n        name: faq.question,\n        acceptedAnswer: {\n          '@type': 'Answer',\n          text: faq.answer\n        }\n      }))\n    };\n\n    // Create script element for JSON-LD\n    const script = document.createElement('script');\n    script.type = 'application/ld+json';\n    script.innerHTML = JSON.stringify(faqSchema);\n    script.id = 'faq-schema';\n\n    // Remove existing FAQ schema if present\n    const existingScript = document.getElementById('faq-schema');\n    if (existingScript) {\n      existingScript.remove();\n    }\n\n    // Add new schema\n    document.head.appendChild(script);\n\n    // Cleanup function to remove the script when component unmounts\n    return () => {\n      const scriptToRemove = document.getElementById('faq-schema');\n      if (scriptToRemove) {\n        scriptToRemove.remove();\n      }\n    };\n  }, [faqs]);\n\n  const toggleExpanded = (index: number) => {\n    setExpandedItems(prev => \n      prev.includes(index) \n        ? prev.filter(i => i !== index)\n        : [...prev, index]\n    );\n  };\n\n  if (!showVisualFAQ) {\n    return null; // Only add structured data, no visual component\n  }\n\n  if (faqs.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Frequently Asked Questions</h2>\n      \n      {faqs.map((faq, index) => (\n        <Card key={index} className=\"overflow-hidden\">\n          <button\n            onClick={() => toggleExpanded(index)}\n            className=\"w-full text-left p-6 hover:bg-gray-50 transition-colors duration-200\"\n            aria-expanded={expandedItems.includes(index)}\n          >\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-900 pr-4\">\n                {faq.question}\n              </h3>\n              <div className=\"flex-shrink-0\">\n                {expandedItems.includes(index) ? (\n                  <ChevronUpIcon className=\"w-5 h-5 text-gray-500\" />\n                ) : (\n                  <ChevronDownIcon className=\"w-5 h-5 text-gray-500\" />\n                )}\n              </div>\n            </div>\n          </button>\n          \n          {expandedItems.includes(index) && (\n            <CardContent className=\"pt-0 pb-6 px-6\">\n              <div className=\"text-gray-700 leading-relaxed whitespace-pre-line\">\n                {faq.answer}\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// Pre-defined FAQ sets for different types of content\nexport const commonFAQs = {\n  trainingProgram: (programTitle: string, duration: string, price: number): FAQItem[] => [\n    {\n      question: `What is included in the ${programTitle} training program?`,\n      answer: `The ${programTitle} program includes comprehensive training materials, hands-on exercises, expert instruction, and a professional certificate upon completion. You'll have access to all course resources and ongoing support throughout the program.`\n    },\n    {\n      question: `How long does the ${programTitle} program take to complete?`,\n      answer: `The program duration is ${duration}. This includes both theoretical learning and practical exercises. You can learn at your own pace with flexible scheduling options.`\n    },\n    {\n      question: `What is the cost of this training program?`,\n      answer: `The ${programTitle} program is priced at ₹${price.toLocaleString('en-IN')}. This is a one-time fee that includes all training materials, assessments, and certification.`\n    },\n    {\n      question: `Do I get a certificate after completing the program?`,\n      answer: `Yes, you will receive a professional certificate from Bhumi Consultancy Services upon successful completion of the program. This certificate is recognized in the industry and can enhance your professional credentials.`\n    },\n    {\n      question: `Are there any prerequisites for this training program?`,\n      answer: `This program is designed for professionals of all levels. While no specific prerequisites are required, having basic knowledge in the relevant field may be beneficial for faster learning.`\n    },\n    {\n      question: `How can I enroll in this training program?`,\n      answer: `You can enroll by clicking the \"Enroll Now\" button on this page. Our team will contact you within 24 hours to guide you through the enrollment process and provide all necessary information.`\n    }\n  ],\n\n  generalBusiness: (): FAQItem[] => [\n    {\n      question: 'What services does Bhumi Consultancy offer?',\n      answer: 'Bhumi Consultancy offers comprehensive business consulting services including strategic planning, financial advisory, training programs, certification services, and operational improvement consulting.'\n    },\n    {\n      question: 'How experienced is the Bhumi Consultancy team?',\n      answer: 'Our team consists of experienced professionals with expertise across various business domains. We have successfully served numerous clients and have a proven track record in delivering quality consulting services.'\n    },\n    {\n      question: 'Do you provide customized solutions?',\n      answer: 'Yes, we believe every business is unique. We provide customized consulting solutions tailored to your specific needs, industry requirements, and business objectives.'\n    },\n    {\n      question: 'What industries do you serve?',\n      answer: 'We serve businesses across various industries including manufacturing, retail, technology, healthcare, finance, and service sectors. Our expertise spans multiple domains to address diverse business challenges.'\n    },\n    {\n      question: 'How can I get started with your services?',\n      answer: 'You can get started by contacting us through our website or calling our team directly. We offer free initial consultations to understand your needs and propose the best solution for your business.'\n    }\n  ]\n};","size_bytes":6696},"client/src/components/SEO/RelatedContent.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ArrowRight, BookOpen, Briefcase, Star } from 'lucide-react';\nimport { TrainingProgram, Service } from '@shared/schema';\n\ninterface RelatedContentProps {\n  currentId?: number;\n  currentType: 'training' | 'service';\n  currentCategory?: string;\n  maxItems?: number;\n  className?: string;\n}\n\n// Map of category names to badge colors (reused from training-program-details)\nconst categoryColors: Record<string, string> = {\n  'Business': 'bg-blue-100 text-primary',\n  'Finance': 'bg-green-100 text-green-800',\n  'Leadership': 'bg-yellow-100 text-yellow-800',\n  'Marketing': 'bg-purple-100 text-purple-800',\n  'Technology': 'bg-cyan-100 text-cyan-800'\n};\n\nexport default function RelatedContent({ \n  currentId, \n  currentType, \n  currentCategory,\n  maxItems = 3,\n  className = '' \n}: RelatedContentProps) {\n  const [relatedItems, setRelatedItems] = useState<any[]>([]);\n\n  // Fetch training programs\n  const { data: trainingResponse } = useQuery<{ success: boolean; data: TrainingProgram[] }>({\n    queryKey: ['/api/training-programs'],\n  });\n\n  // Fetch services\n  const { data: servicesResponse } = useQuery<{ success: boolean; data: Service[] }>({\n    queryKey: ['/api/services'],\n  });\n\n  useEffect(() => {\n    const trainingPrograms = trainingResponse?.data || [];\n    const services = servicesResponse?.data || [];\n\n    let related: any[] = [];\n\n    if (currentType === 'training') {\n      // For training programs, show:\n      // 1. Other training programs in same category\n      // 2. Different category training programs\n      // 3. Related services\n      \n      const sameCategory = trainingPrograms\n        .filter(p => p.id !== currentId && p.category === currentCategory)\n        .slice(0, 2);\n      \n      const differentCategory = trainingPrograms\n        .filter(p => p.id !== currentId && p.category !== currentCategory)\n        .slice(0, 1);\n        \n      const relatedServices = services.slice(0, 1);\n\n      related = [\n        ...sameCategory.map(item => ({ ...item, type: 'training' })),\n        ...differentCategory.map(item => ({ ...item, type: 'training' })),\n        ...relatedServices.map(item => ({ ...item, type: 'service' }))\n      ];\n    } else {\n      // For services, show:\n      // 1. Other services\n      // 2. Related training programs\n      \n      const otherServices = services\n        .filter(s => s.id !== currentId)\n        .slice(0, 2);\n        \n      const relatedTraining = trainingPrograms.slice(0, 1);\n\n      related = [\n        ...otherServices.map(item => ({ ...item, type: 'service' })),\n        ...relatedTraining.map(item => ({ ...item, type: 'training' }))\n      ];\n    }\n\n    setRelatedItems(related.slice(0, maxItems));\n  }, [trainingResponse, servicesResponse, currentId, currentType, currentCategory, maxItems]);\n\n  if (relatedItems.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`${className}`}>\n      <div className=\"flex items-center gap-3 mb-6\">\n        <Star className=\"w-6 h-6 text-primary\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">\n          {currentType === 'training' ? 'Related Programs & Services' : 'Related Services & Training'}\n        </h2>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {relatedItems.map((item, index) => (\n          <Card key={`${item.type}-${item.id}`} className=\"group hover:shadow-lg transition-all duration-300 border hover:border-primary/20\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between gap-3\">\n                <div className=\"flex-1\">\n                  {item.type === 'training' && item.category && (\n                    <Badge className={`${categoryColors[item.category] || 'bg-gray-100 text-gray-800'} mb-3 text-xs font-medium`}>\n                      {item.category}\n                    </Badge>\n                  )}\n                  <CardTitle className=\"text-lg font-semibold leading-tight mb-2 group-hover:text-primary transition-colors\">\n                    {item.title}\n                  </CardTitle>\n                </div>\n                <div className=\"flex-shrink-0 p-2 rounded-full bg-gray-100 group-hover:bg-primary/10 transition-colors\">\n                  {item.type === 'training' ? (\n                    <BookOpen className=\"w-4 h-4 text-gray-600 group-hover:text-primary transition-colors\" />\n                  ) : (\n                    <Briefcase className=\"w-4 h-4 text-gray-600 group-hover:text-primary transition-colors\" />\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"pt-0\">\n              <p className=\"text-gray-600 text-sm line-clamp-3 mb-4 leading-relaxed\">\n                {item.description?.length > 120 \n                  ? `${item.description.substring(0, 120)}...` \n                  : item.description\n                }\n              </p>\n\n              {item.type === 'training' && (\n                <div className=\"flex items-center gap-4 mb-4 text-sm text-gray-500\">\n                  {item.duration && (\n                    <span className=\"flex items-center gap-1\">\n                      ⏱️ {item.duration}\n                    </span>\n                  )}\n                  {item.price && (\n                    <span className=\"flex items-center gap-1 font-medium text-primary\">\n                      ₹{item.price.toLocaleString('en-IN')}\n                    </span>\n                  )}\n                </div>\n              )}\n\n              <Link href={item.type === 'training' ? `/training-programs/${item.slug || item.id}` : `/services/${item.id}`}>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full group-hover:bg-primary group-hover:text-white group-hover:border-primary transition-all duration-300\"\n                >\n                  <span>Learn More</span>\n                  <ArrowRight className=\"w-4 h-4 ml-2 transition-transform group-hover:translate-x-1\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Additional internal links for SEO */}\n      <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Explore More</h3>\n        <div className=\"flex flex-wrap gap-3\">\n          <Link href=\"/training-programs\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-sm hover:text-primary\">\n              All Training Programs →\n            </Button>\n          </Link>\n          <Link href=\"/#services\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-sm hover:text-primary\">\n              All Services →\n            </Button>\n          </Link>\n          <Link href=\"/about\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-sm hover:text-primary\">\n              About Bhumi Consultancy →\n            </Button>\n          </Link>\n          <Link href=\"/contact\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-sm hover:text-primary\">\n              Contact Us →\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Helper component for cross-linking between content types\nexport function InternalLinkSuggestions({ className = '' }: { className?: string }) {\n  return (\n    <div className={`bg-gradient-to-r from-primary/5 to-blue-50 p-6 rounded-lg border border-primary/10 ${className}`}>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Popular Pages</h3>\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n        <Link href=\"/training-programs\">\n          <div className=\"p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105 border border-gray-100 hover:border-primary/20\">\n            <BookOpen className=\"w-5 h-5 text-primary mb-2\" />\n            <div className=\"text-sm font-medium text-gray-900\">Training Programs</div>\n            <div className=\"text-xs text-gray-600 mt-1\">Professional Courses</div>\n          </div>\n        </Link>\n        \n        <Link href=\"/#services\">\n          <div className=\"p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105 border border-gray-100 hover:border-primary/20\">\n            <Briefcase className=\"w-5 h-5 text-primary mb-2\" />\n            <div className=\"text-sm font-medium text-gray-900\">Our Services</div>\n            <div className=\"text-xs text-gray-600 mt-1\">Business Consulting</div>\n          </div>\n        </Link>\n        \n        <Link href=\"/verify-certificate\">\n          <div className=\"p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105 border border-gray-100 hover:border-primary/20\">\n            <Star className=\"w-5 h-5 text-primary mb-2\" />\n            <div className=\"text-sm font-medium text-gray-900\">Verify Certificate</div>\n            <div className=\"text-xs text-gray-600 mt-1\">Authentication</div>\n          </div>\n        </Link>\n        \n        <Link href=\"/about\">\n          <div className=\"p-3 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105 border border-gray-100 hover:border-primary/20\">\n            <ArrowRight className=\"w-5 h-5 text-primary mb-2\" />\n            <div className=\"text-sm font-medium text-gray-900\">About Us</div>\n            <div className=\"text-xs text-gray-600 mt-1\">Our Story</div>\n          </div>\n        </Link>\n      </div>\n    </div>\n  );\n}","size_bytes":9835}},"version":1}